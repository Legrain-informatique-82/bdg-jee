/******************************************************************************/
/*                 Generated by IBExpert 23/03/2009 11:45:35                  */
/******************************************************************************/



/******************************************************************************/
/*                                   Tables                                   */
/******************************************************************************/


CREATE GENERATOR NUM_ID_COMPTE_BANQUE;
CREATE DOMAIN DLGR_2L AS VARCHAR(2);

CREATE TABLE TA_COMPTE_BANQUE (
    ID_COMPTE_BANQUE           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_TIERS                   DID3 not null,
    NOM_BANQUE                 DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    COMPTE                     DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    CODE_BANQUE                DLGR_CODEL /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    CODE_GUICHET               DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    CLE_RIB                    DLGR_2L /* DLGR_2 = VARCHAR(2) NOT NULL */,
    ADRESSE1_BANQUE            DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE2_BANQUE            DLIB100 /* DLIB100 = VARCHAR(100) */,
    CP_BANQUE                  DCODPOS /* DCODPOS = VARCHAR(25) */,
    VILLE_BANQUE               DLIB100 /* DLIB100 = VARCHAR(100) */,
    IBAN                       DLIB100 /* DLIB100 = VARCHAR(100) */,
    CODE_B_I_C                 DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    TITULAIRE                  DLIB100 /* DLIB100 = VARCHAR(100) */,
    ID_T_BANQUE                DID4 /* DID4 = INTEGER */,
    QUI_CREE_COMPTE_BANQUE     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_COMPTE_BANQUE   TIMESTAMP DEFAULT 'NOW',
    QUI_MODIF_COMPTE_BANQUE    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_COMPTE_BANQUE  TIMESTAMP DEFAULT 'NOW',
    "VERSION"                  NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                   DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ                INTEGER
);




/******************************************************************************/
/*                                Primary Keys                                */
/******************************************************************************/

ALTER TABLE TA_COMPTE_BANQUE ADD PRIMARY KEY (ID_COMPTE_BANQUE);

ALTER TABLE TA_COMPTE_BANQUE ADD CONSTRAINT FK_TA_COMPTE_BANQUE_1 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS);
alter table TA_COMPTE_BANQUE add constraint FK_TA_COMPTE_BANQUE_2 foreign key (ID_T_BANQUE) references TA_T_BANQUE(ID_T_BANQUE)

/******************************************************************************/
/*                                  Triggers                                  */
/******************************************************************************/


SET TERM ^ ;



/******************************************************************************/
/*                            Triggers for tables                             */
/******************************************************************************/



/* Trigger: TBI_TA_COMPTE_BANQUE */
CREATE OR ALTER TRIGGER TBI_TA_COMPTE_BANQUE FOR TA_COMPTE_BANQUE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_COMPTE_BANQUE is null) Then
      New.ID_COMPTE_BANQUE = GEN_ID(NUM_ID_COMPTE_BANQUE,1);
   New.QUI_CREE_COMPTE_BANQUE = USER;
   new.QUAND_CREE_COMPTE_BANQUE = 'NOW';
   new.QUI_MODIF_COMPTE_BANQUE = USER;
   new.QUAND_MODIF_COMPTE_BANQUE = 'NOW';
   select num_version from ta_version into new."VERSION";
   new.IP_ACCES = current_connection;
end
^


/* Trigger: TBI_XAKCOMPTE_BANQUE */
CREATE OR ALTER TRIGGER TBI_XAKCOMPTE_BANQUE FOR TA_COMPTE_BANQUE
ACTIVE BEFORE INSERT POSITION 1
as
DECLARE variable numrows integer;
begin
  /* E_XAKCOmpte_BANQUE  */
   select count(*) from TA_COMPTE_BANQUE
   where COMPTE = NEW.COMPTE
   into :numrows;
   if (numrows > 0) then
      exception E_XAKCOMPTE_BANQUE ;
end
^


/* Trigger: TBU_TA_COMPTE_BANQUE */
CREATE OR ALTER TRIGGER TBU_TA_COMPTE_BANQUE FOR TA_COMPTE_BANQUE
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   New.COMPTE = Upper(New.COMPTE);
   new.QUI_MODIF_COMPTE_BANQUE = USER;
   select num_version from ta_version into new."VERSION";
   new.QUAND_MODIF_COMPTE_BANQUE = 'NOW';
   new.IP_ACCES = current_connection;
end
^


/* Trigger: TBU_XAKCOMPTE_BANQUE */
CREATE OR ALTER TRIGGER TBU_XAKCOMPTE_BANQUE FOR TA_COMPTE_BANQUE
ACTIVE BEFORE UPDATE POSITION 1
as
DECLARE variable numrows integer;
begin
  /* E_XAKCOMPTE_BANQUE  */
   If  ((OLD.COMPTE <> NEW.COMPTE)) then
   begin
     select count(*) from TA_COMPTE_BANQUE
     where COMPTE = NEW.COMPTE
     into :numrows;
     if (numrows > 0) then
        exception E_XAKCOMPTE_BANQUE ;
   end
end
^


SET TERM ; ^



/******************************************************************************/
/*                                 Privileges                                 */
/******************************************************************************/


/* Privileges of users */
GRANT ALL ON TA_COMPTE_BANQUE TO "ADMIN" WITH GRANT OPTION;
