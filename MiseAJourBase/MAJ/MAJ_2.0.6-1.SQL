CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR1
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_CREE_DOC_TIERS')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_CREE_DOC_TIERS';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_CREE_DOC_TIERS TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR1 
^
drop procedure GESTION_CREATION_GENERATOR1
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR2
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_PARAM_CREAT_DOC')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_PARAM_CREAT_DOC';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_PARAM_CREAT_DOC TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR2 
^
drop procedure GESTION_CREATION_GENERATOR2
^


CREATE or ALTER  PROCEDURE CREATION_TABLE_1
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_PARAM_CREE_DOC_TIERS')) THEN
  begin
    query = 'CREATE TABLE TA_PARAM_CREE_DOC_TIERS (
    ID_PARAM_CREE_DOC_TIERS     DID3 NOT NULL ,
    ID_TIERS                    did_facultatif,
    CODE_PARAM                 DLIB50NN,
    TIERS                       DBOOL DEFAULT 0 ,
    DOCUMENT                    DBOOL DEFAULT 0 ,
    SEMAINE                     DBOOL DEFAULT 0 ,
    DEUX_SEMAINES               DBOOL DEFAULT 0 ,
    MOIS                        DBOOL DEFAULT 0 ,
    X_JOURS                     DBOOL DEFAULT 0 ,
	DECADE                      DBOOL DEFAULT 0 ,
    NB_JOURS                    did_facultatif,
    QUI_CREE                    DLIB50 ,
    QUAND_CREE                  TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF                   DLIB50 ,
    QUAND_MODIF                 TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                   NUM_VERSION ,
    IP_ACCES                    DLIB50NN DEFAULT 0 ,
    VERSION_OBJ                 INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_PARAM_CREE_DOC_TIERS ADD PRIMARY KEY (ID_PARAM_CREE_DOC_TIERS)';
    EXECUTE STATEMENT :query;
   
    
    query ='ALTER TABLE TA_PARAM_CREE_DOC_TIERS ADD CONSTRAINT FK_TA_PARAM_CREE_DOC_TIERS_1 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_1
^
drop procedure CREATION_TABLE_1
^


CREATE or ALTER  PROCEDURE CREATION_TABLE_2
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_PARAM_CREAT_DOC')) THEN
  begin
    query = 'CREATE TABLE TA_R_PARAM_CREAT_DOC (
    ID_R_PARAM_CREAT_DOC  DID3 NOT NULL ,
    ID_PARAM_CREE_DOC_TIERS    DID3 NOT NULL,
    ID_T_DOC           DID3 NOT NULL ,
    QUI_CREE           DLIB50,
    QUAND_CREE         TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF          DLIB50 ,
    QUAND_MODIF        TIMESTAMP DEFAULT ''NOW'',
    "VERSION"          NUM_VERSION ,
    IP_ACCES           DLIB50NN DEFAULT 0 ,
    VERSION_OBJ        INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_PARAM_CREAT_DOC ADD PRIMARY KEY (ID_R_PARAM_CREAT_DOC);';
    EXECUTE STATEMENT :query;
   
    
    query ='ALTER TABLE TA_R_PARAM_CREAT_DOC ADD CONSTRAINT FK_TA_R_PARAM_CREAT_DOC_1 FOREIGN KEY (ID_PARAM_CREE_DOC_TIERS) REFERENCES TA_PARAM_CREE_DOC_TIERS (ID_PARAM_CREE_DOC_TIERS);';
    EXECUTE STATEMENT :query;
    
    query ='ALTER TABLE TA_R_PARAM_CREAT_DOC ADD CONSTRAINT FK_TA_R_PARAM_CREAT_DOC_2 FOREIGN KEY (ID_T_DOC) REFERENCES TA_T_DOC (ID_T_DOC);';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_2
^
drop procedure CREATION_TABLE_2
^

CREATE OR ALTER TRIGGER TBI_TA_PARAM_CREE_DOC_TIERS FOR TA_PARAM_CREE_DOC_TIERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_PARAM_CREE_DOC_TIERS is null) Then
      New.ID_PARAM_CREE_DOC_TIERS = GEN_ID(NUM_ID_CREE_DOC_TIERS,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE OR ALTER TRIGGER TBU_TA_PARAM_CREE_DOC_TIERS FOR TA_PARAM_CREE_DOC_TIERS
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


CREATE OR ALTER TRIGGER TBI_TA_R_PARAM_CREAT_DOC FOR TA_R_PARAM_CREAT_DOC
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_R_PARAM_CREAT_DOC is null) Then
      New.ID_R_PARAM_CREAT_DOC = GEN_ID(NUM_ID_R_PARAM_CREAT_DOC,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_TA_R_DOCUMENT_DOC */
CREATE OR ALTER TRIGGER TBU_TA_R_PARAM_CREAT_DOC FOR TA_R_PARAM_CREAT_DOC
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



