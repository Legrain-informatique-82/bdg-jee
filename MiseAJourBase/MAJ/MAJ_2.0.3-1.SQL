
              
/* ****************************************************** CATALOGUE WEB ************************************************* */
CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR1
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_CATALOGUE_WEB')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_CATALOGUE_WEB;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_CATALOGUE_WEB TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR1 
^
drop procedure GESTION_CREATION_GENERATOR1
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE1
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_CATALOGUE_WEB')) THEN
  begin
    query = 'CREATE TABLE TA_CATALOGUE_WEB(
    ID_CATALOGUE_WEB DID3 NOT NULL,
  
    URL_REWRITING_CATALOGUE_WEB DLIB255,
    NOUVEAUTE_CATALOGUE_WEB DBOOL,
    PROMOTION_CATALOGUE_WEB DID9FACULT,
    PROMOTION_U2_CATALOGUE_WEB DID9FACULT,
    DESCRIPTION_LONGUE_CAT_WEB DLIB_COMMENTAIRE,
    EXPORTATION_CATALOGUE_WEB DBOOL,
    EXPEDIABLE_CATALOGUE_WEB DBOOL,
    SPECIAL_CATALOGUE_WEB DBOOL,

    QUI_CREE_CATALOGUE_WEB DLIB50,
    QUAND_CREE_CATALOGUE_WEB Timestamp DEFAULT ''NOW'',
    QUI_MODIF_CATALOGUE_WEB DLIB50,
    QUAND_MODIF_CATALOGUE_WEB Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN DEFAULT 0,
    VERSION_OBJ Integer
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_CATALOGUE_WEB ADD PRIMARY KEY (ID_CATALOGUE_WEB)';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE1
^
drop procedure GESTION_CREATION_TABLE1
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE1
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='ID_CATALOGUE_WEB')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD ID_CATALOGUE_WEB DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_ARTICLE ADD CONSTRAINT FK_TA_CATALOGUE_WEB_2 FOREIGN KEY (ID_CATALOGUE_WEB) REFERENCES TA_CATALOGUE_WEB (ID_CATALOGUE_WEB)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE1
^
drop procedure GESTION_ALTER_TABLE1
^

create or alter TRIGGER TBID_CATALOGUE_WEB FOR TA_CATALOGUE_WEB ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID_CATALOGUE_WEB  is null) Then
      New.ID_CATALOGUE_WEB  = GEN_ID(NUM_ID_CATALOGUE_WEB,1);
   New.QUI_CREE_CATALOGUE_WEB  = USER;
   New.QUAND_CREE_CATALOGUE_WEB = 'NOW';
   New.QUI_MODIF_CATALOGUE_WEB = USER;
   New.QUAND_MODIF_CATALOGUE_WEB = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_CATALOGUE_WEB FOR TA_CATALOGUE_WEB ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF_CATALOGUE_WEB = USER;
   new.QUAND_MODIF_CATALOGUE_WEB = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* ****************************************************** CATEGORIE ARTICLE ************************************************* */
CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR2
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_CATEGORIE_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_CATEGORIE_ARTICLE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_CATEGORIE_ARTICLE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR2
^
drop procedure GESTION_CREATION_GENERATOR2
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR3
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_CATEGORIE_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_CATEGORIE_ARTICLE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_CATEGORIE_ARTICLE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR3
^
drop procedure GESTION_CREATION_GENERATOR3
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE2
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_CATEGORIE_ARTICLE')) THEN
  begin
    query='CREATE TABLE TA_CATEGORIE_ARTICLE (
    ID_CATEGORIE_ARTICLE DID3 NOT NULL,
    ID_PARENT_CATEGORIE_ARTICLE DID_FACULTATIF,
    CODE_CATEGORIE_ARTICLE DLIB255NN,
    LIBELLE_CATEGORIE_ARTICLE DLIB255NN,
    DESCRIPTION_CATEGORIE_ARTICLE DLIB255,
    URL_REWRITING_CATEGORIE_ARTICLE DLIB255,
    CHEMIN_IMAGE_CATEGORIE_ARTICLE DLIB255,
    NOM_IMAGE_CATEGORIE_ARTICLE DLIB255,

    QUI_CREE_CATEGORIE_ARTICLE DLIB50,
    QUAND_CREE_CATEGORIE_ARTICLE Timestamp DEFAULT ''NOW'',
    QUI_MODIF_CATEGORIE_ARTICLE DLIB50,
    QUAND_MODIF_CATEGORIE_ARTICLE Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN DEFAULT 0,
    VERSION_OBJ Integer
    )
    ';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_CATEGORIE_ARTICLE ADD PRIMARY KEY (ID_CATEGORIE_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    --query='ALTER TABLE TA_CATEGORIE_ARTICLE ADD CONSTRAINT FK_TA_CATEGORIE_ARTICLE_1 FOREIGN KEY (ID_PARENT_CATEGORIE_ARTICLE) REFERENCES TA_CATEGORIE_ARTICLE (ID_PARENT_CATEGORIE_ARTICLE)';
    --EXECUTE STATEMENT :query;
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE2
^
drop procedure GESTION_CREATION_TABLE2
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE3
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_CATEGORIE_ARTICLE')) THEN
  begin
    query='CREATE TABLE TA_R_CATEGORIE_ARTICLE (
    ID DID3 ,
    ID_ARTICLE DID_FACULTATIF,
    ID_CATEGORIE_ARTICLE DID_FACULTATIF,
    QUI_CREE DLIB50,
    QUAND_CREE Timestamp DEFAULT ''NOW'',
    QUI_MODIF DLIB50,
    QUAND_MODIF Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN,
    VERSION_OBJ Integer
    )';
    EXECUTE STATEMENT :query;
    
	query = 'ALTER TABLE TA_R_CATEGORIE_ARTICLE ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query; 

    query='ALTER TABLE TA_R_CATEGORIE_ARTICLE ADD CONSTRAINT FK_TA_R_CATEGORIE_ARTICLE_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_R_CATEGORIE_ARTICLE ADD CONSTRAINT FK_TA_R_CATEGORIE_ARTICLE_2 FOREIGN KEY (ID_CATEGORIE_ARTICLE) REFERENCES TA_CATEGORIE_ARTICLE (ID_CATEGORIE_ARTICLE)';
    EXECUTE STATEMENT :query;
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE3
^
drop procedure GESTION_CREATION_TABLE3
^

create or alter TRIGGER TBI_CATEGORIE_ARTICLE FOR TA_CATEGORIE_ARTICLE ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID_CATEGORIE_ARTICLE  is null) Then
      New.ID_CATEGORIE_ARTICLE  = GEN_ID(NUM_ID_CATEGORIE_ARTICLE,1);
   New.QUI_CREE_CATEGORIE_ARTICLE  = USER;
   New.QUAND_CREE_CATEGORIE_ARTICLE = 'NOW';
   New.QUI_MODIF_CATEGORIE_ARTICLE = USER;
   New.QUAND_MODIF_CATEGORIE_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_CATEGORIE_ARTICLE FOR TA_CATEGORIE_ARTICLE ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF_CATEGORIE_ARTICLE = USER;
   new.QUAND_MODIF_CATEGORIE_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBI_TA_R_CATEGORIE_ARTICLE FOR TA_R_CATEGORIE_ARTICLE ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(NUM_ID_R_CATEGORIE_ARTICLE,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_TA_R_CATEGORIE_ARTICLE FOR TA_R_CATEGORIE_ARTICLE ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^
/* ****************************************************** LABELS ARTICLE ************************************************* */

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR4
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_LABEL_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_LABEL_ARTICLE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_LABEL_ARTICLE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR4
^
drop procedure GESTION_CREATION_GENERATOR4
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR5
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_LABEL_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_LABEL_ARTICLE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_LABEL_ARTICLE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR5
^
drop procedure GESTION_CREATION_GENERATOR5
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE4
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_LABEL_ARTICLE')) THEN
  begin
    query='CREATE TABLE TA_LABEL_ARTICLE (
    ID_LABEL_ARTICLE DID3 NOT NULL,
    CODE_LABEL_ARTICLE DLIB255NN,
    LIBELLE_LABEL_ARTICLE DLIB255NN,
    DESCRIPTION_LABEL_ARTICLE DLIB255,
    CHEMIN_IMAGE_LABEL_ARTICLE DLIB255,
    NOM_IMAGE_LABEL_ARTICLE DLIB255,
    
    QUI_CREE_LABEL_ARTICLE DLIB50,
    QUAND_CREE_LABEL_ARTICLE Timestamp DEFAULT ''NOW'',
    QUI_MODIF_LABEL_ARTICLE DLIB50,
    QUAND_MODIF_LABEL_ARTICLE Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN DEFAULT 0,
    VERSION_OBJ Integer
    )';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_LABEL_ARTICLE ADD PRIMARY KEY (ID_LABEL_ARTICLE)';
    EXECUTE STATEMENT :query;
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE4
^
drop procedure GESTION_CREATION_TABLE4
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE5
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_LABEL_ARTICLE')) THEN
  begin
    query='CREATE TABLE TA_R_LABEL_ARTICLE (
    ID DID3 NOT NULL,
    ID_ARTICLE DID_FACULTATIF,
    ID_LABEL_ARTICLE DID_FACULTATIF,
    QUI_CREE DLIB50,
    QUAND_CREE Timestamp DEFAULT ''NOW'',
    QUI_MODIF DLIB50,
    QUAND_MODIF Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN,
    VERSION_OBJ Integer
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_LABEL_ARTICLE ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_R_LABEL_ARTICLE ADD CONSTRAINT FK_TA_R_LABEL_ARTICLE_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE  TA_R_LABEL_ARTICLE ADD CONSTRAINT FK_TA_R_LABEL_ARTICLE_2 FOREIGN KEY (ID_LABEL_ARTICLE) REFERENCES TA_LABEL_ARTICLE (ID_LABEL_ARTICLE)';
    EXECUTE STATEMENT :query;
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE5
^
drop procedure GESTION_CREATION_TABLE5
^

create or alter TRIGGER TBI_LABEL_ARTICLE FOR TA_LABEL_ARTICLE ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID_LABEL_ARTICLE  is null) Then
      New.ID_LABEL_ARTICLE  = GEN_ID(NUM_ID_LABEL_ARTICLE,1);
   New.QUI_CREE_LABEL_ARTICLE  = USER;
   New.QUAND_CREE_LABEL_ARTICLE = 'NOW';
   New.QUI_MODIF_LABEL_ARTICLE = USER;
   New.QUAND_MODIF_LABEL_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_LABEL_ARTICLE FOR TA_LABEL_ARTICLE ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF_LABEL_ARTICLE = USER;
   new.QUAND_MODIF_LABEL_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBI_TA_R_LABEL_ARTICLE FOR TA_R_LABEL_ARTICLE ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(NUM_ID_R_LABEL_ARTICLE,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_TA_R_LABEL_ARTICLE FOR TA_R_LABEL_ARTICLE ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* ****************************************************** IMAGE ARTICLE ************************************************* */





CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR6
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_IMAGE_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_IMAGE_ARTICLE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_IMAGE_ARTICLE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR6
^
drop procedure GESTION_CREATION_GENERATOR6
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE6
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_IMAGE_ARTICLE')) THEN
  begin
    query='CREATE TABLE TA_IMAGE_ARTICLE(
    ID_IMAGE_ARTICLE DID3 NOT NULL,
    ID_ARTICLE DID3,
    CHEMIN_IMAGE_ARTICLE DLIB255NN,
    NOM_IMAGE_ARTICLE DLIB255NN,
    QUI_CREE_IMAGE_ARTICLE DLIB50,
    QUAND_CREE_IMAGE_ARTICLE Timestamp DEFAULT ''NOW'',
    QUI_MODIF_IMAGE_ARTICLE DLIB50,
    QUAND_MODIF_IMAGE_ARTICLE Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN DEFAULT 0,
    VERSION_OBJ Integer
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_IMAGE_ARTICLE ADD PRIMARY KEY (ID_IMAGE_ARTICLE)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_IMAGE_ARTICLE ADD CONSTRAINT FK_TA_IMAGE_ARTICLE_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE6
^
drop procedure GESTION_CREATION_TABLE6
^


CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE2
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='ID_IMAGE_ARTICLE')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD ID_IMAGE_ARTICLE DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_ARTICLE ADD CONSTRAINT FK_TA_IMAGE_ARTICLE_2 FOREIGN KEY (ID_IMAGE_ARTICLE) REFERENCES TA_IMAGE_ARTICLE (ID_IMAGE_ARTICLE)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE2
^
drop procedure GESTION_ALTER_TABLE2
^

create or alter TRIGGER TBID_IMAGE_ARTICLE FOR TA_IMAGE_ARTICLE ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID_IMAGE_ARTICLE  is null) Then
      New.ID_IMAGE_ARTICLE  = GEN_ID(NUM_ID_IMAGE_ARTICLE,1);
   New.QUI_CREE_IMAGE_ARTICLE  = USER;
   New.QUAND_CREE_IMAGE_ARTICLE = 'NOW';
   New.QUI_MODIF_IMAGE_ARTICLE = USER;
   New.QUAND_MODIF_IMAGE_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_IMAGE_ARTICLE FOR TA_IMAGE_ARTICLE ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF_IMAGE_ARTICLE = USER;
   new.QUAND_MODIF_IMAGE_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* ****************************************************** AJOUT CHAMPS ID/ORIGINE IMPORT ************************************************* */
CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE3
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_TIERS' and  a.RDB$FIELD_NAME ='ORIGINE_IMPORT')) THEN
  begin
    query = 'ALTER TABLE TA_TIERS ADD ORIGINE_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_TIERS ADD ID_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE3
^
drop procedure GESTION_ALTER_TABLE3
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE4
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_TELEPHONE' and  a.RDB$FIELD_NAME ='ORIGINE_IMPORT')) THEN
  begin
    query = 'ALTER TABLE TA_TELEPHONE ADD ORIGINE_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_TELEPHONE ADD ID_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE4
^
drop procedure GESTION_ALTER_TABLE4
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE5
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_EMAIL' and  a.RDB$FIELD_NAME ='ORIGINE_IMPORT')) THEN
  begin
    query = 'ALTER TABLE TA_EMAIL ADD ORIGINE_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_EMAIL ADD ID_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE5
^
drop procedure GESTION_ALTER_TABLE5
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE6
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ADRESSE' and  a.RDB$FIELD_NAME ='ORIGINE_IMPORT')) THEN
  begin
    query = 'ALTER TABLE TA_ADRESSE ADD ORIGINE_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ADRESSE ADD ID_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE6
^
drop procedure GESTION_ALTER_TABLE6
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE7
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='ORIGINE_IMPORT')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD ORIGINE_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ARTICLE ADD ID_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE7
^
drop procedure GESTION_ALTER_TABLE7
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE8
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_PRIX' and  a.RDB$FIELD_NAME ='ORIGINE_IMPORT')) THEN
  begin
    query = 'ALTER TABLE TA_PRIX ADD ORIGINE_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_PRIX ADD ID_IMPORT DLIB100';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE8
^
drop procedure GESTION_ALTER_TABLE8
^

/* ****************************************************** FOURNISSEUR ARTICLE ************************************************* */

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR7
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_FOURNISSEUR_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_FOURNISSEUR_ARTICLE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_FOURNISSEUR_ARTICLE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR7
^
drop procedure GESTION_CREATION_GENERATOR7
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE8
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_FOURNISSEUR_ARTICLE')) THEN
  begin
    query='CREATE TABLE TA_R_FOURNISSEUR_ARTICLE (
    ID DID3 NOT NULL,
    ID_ARTICLE DID3,
    ID_TIERS DID3,
    QUI_CREE DLIB50,
    QUAND_CREE Timestamp DEFAULT ''NOW'',
    QUI_MODIF DLIB50,
    QUAND_MODIF Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN,
    VERSION_OBJ Integer
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_FOURNISSEUR_ARTICLE ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_R_FOURNISSEUR_ARTICLE ADD CONSTRAINT FK_TA_R_FOURNISSEUR_ARTICLE_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_R_FOURNISSEUR_ARTICLE ADD CONSTRAINT FK_TA_R_FOURNISSEUR_ARTICLE_2 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE8
^
drop procedure GESTION_CREATION_TABLE8
^

create or alter TRIGGER TBI_TA_R_FOURNISSEUR_ARTICLE FOR TA_R_FOURNISSEUR_ARTICLE ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(NUM_ID_R_FOURNISSEUR_ARTICLE,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_TA_R_FOURNISSEUR_ARTICLE FOR TA_R_FOURNISSEUR_ARTICLE ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* ****************************************************** INFOS_DOCUMENTS GESTION DE L'UNICITE ************************************************* */

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE9
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_FACTURE' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_FACTURE ADD CONSTRAINT UNQ1_TA_INFOS_FACTURE UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end

IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_DEVIS' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_DEVIS ADD CONSTRAINT UNQ1_TA_INFOS_DEVIS UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_ACOMPTE' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_ACOMPTE ADD CONSTRAINT UNQ1_TA_INFOS_ACOMPTE UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_AVOIR' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_AVOIR ADD CONSTRAINT UNQ1_TA_INFOS_AVOIR UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_APPORTEUR' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_APPORTEUR ADD CONSTRAINT UNQ1_TA_INFOS_APPORTEUR UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_BONCDE' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_BONCDE ADD CONSTRAINT UNQ1_TA_INFOS_BONCDE UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_BONLIV' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_BONLIV ADD CONSTRAINT UNQ1_TA_INFOS_BONLIV UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_PRELEVEMENT' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_PRELEVEMENT ADD CONSTRAINT UNQ1_TA_INFOS_PRELEVEMENT UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_INFOS_PROFORMA' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='ID_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_INFOS_PROFORMA ADD CONSTRAINT UNQ1_TA_INFOS_PROFORMA UNIQUE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end  
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE9
^
drop procedure GESTION_ALTER_TABLE9
^

/* ****************************************************** TYPE CONDITION DE PAIEMENT ************************************************* */
CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR8
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_C_PAIEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_C_PAIEMENT;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_C_PAIEMENT TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR8 
^
drop procedure GESTION_CREATION_GENERATOR8
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TCPAIEMENT
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_T_C_PAIEMENT')) THEN
  begin
    query = 'CREATE TABLE TA_T_C_PAIEMENT (
  		ID_T_C_PAIEMENT DID3 NOT NULL,
  		ID_C_PAIEMENT DID4, 
  		CODE_T_C_PAIEMENT DLGR_CODE,
  		LIBL_T_C_PAIEMENT DLGR_LIB,
  		QUI_CREE_T_C_PAIEMENT DLIB50,
  		QUAND_CREE_T_C_PAIEMENT Timestamp DEFAULT ''NOW'',
  		QUI_MODIF_T_C_PAIEMENT DLIB50,
 		QUAND_MODIF_T_C_PAIEMENT Timestamp DEFAULT ''NOW'',
  		"VERSION" NUM_VERSION,
  		IP_ACCES DLIB50NN DEFAULT 0,
  		VERSION_OBJ Integer
   	)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_C_PAIEMENT ADD PRIMARY KEY (ID_T_C_PAIEMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_C_PAIEMENT ADD CONSTRAINT FK_TA_T_C_PAIEMENT_1 FOREIGN KEY (ID_C_PAIEMENT) REFERENCES TA_C_PAIEMENT (ID_C_PAIEMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_C_PAIEMENT ADD CONSTRAINT UNQ1_TA_T_C_PAIEMENT UNIQUE (CODE_T_C_PAIEMENT)';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TCPAIEMENT
^
drop procedure GESTION_CREATION_TCPAIEMENT
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE10
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_C_PAIEMENT' and  a.RDB$FIELD_NAME ='ID_T_C_PAIEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_C_PAIEMENT ADD ID_T_C_PAIEMENT DID3';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_C_PAIEMENT ADD CONSTRAINT FK_TA_C_PAIEMENT_1 FOREIGN KEY (ID_T_C_PAIEMENT) REFERENCES TA_T_C_PAIEMENT (ID_T_C_PAIEMENT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE10
^
drop procedure GESTION_ALTER_TABLE10
^

create or alter TRIGGER TBI_TA_T_C_PAIEMENT FOR TA_T_C_PAIEMENT ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID_T_C_PAIEMENT  is null) Then
      New.ID_T_C_PAIEMENT  = GEN_ID(NUM_ID_T_C_PAIEMENT,1);
   New.QUI_CREE_T_C_PAIEMENT  = USER;
   New.QUAND_CREE_T_C_PAIEMENT = 'NOW';
   New.QUI_MODIF_T_C_PAIEMENT = USER;
   New.QUAND_MODIF_T_C_PAIEMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_TA_T_C_PAIEMENT FOR TA_T_C_PAIEMENT ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF_T_C_PAIEMENT = USER;
   new.QUAND_MODIF_T_C_PAIEMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR9
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_C_PAIEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_C_PAIEMENT;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_C_PAIEMENT TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR9 
^
drop procedure GESTION_CREATION_GENERATOR9
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR10
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_AVOIR')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_AVOIR;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_AVOIR TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR10 
^
drop procedure GESTION_CREATION_GENERATOR10
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE11
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_AVOIR')) THEN
  begin
    query = 'CREATE TABLE TA_R_AVOIR (
    ID           INTEGER NOT NULL,
    ID_AVOIR     DID_FACULTATIF ,
    ID_FACTURE   DID_FACULTATIF ,
    AFFECTATION  DID9FACULT ,
    ETAT         BIGINT,
    QUI_CREE     DLIB50 ,
    QUAND_CREE   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF    DLIB50 ,
    QUAND_MODIF  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"    NUM_VERSION ,
    IP_ACCES     DLIB50NN DEFAULT 0 ,
    VERSION_OBJ  INTEGER
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_AVOIR ADD CONSTRAINT PK_TA_R_AVOIR PRIMARY KEY (ID);';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_R_AVOIR ADD CONSTRAINT FK_TA_R_AVOIR_1 FOREIGN KEY (ID_FACTURE) REFERENCES TA_FACTURE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_R_AVOIR ADD CONSTRAINT FK_TA_R_AVOIR_7 FOREIGN KEY (ID_AVOIR) REFERENCES TA_AVOIR (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE11
^
drop procedure GESTION_CREATION_TABLE11
^

/* Trigger: TBI_R_AVOIR */
CREATE OR ALTER TRIGGER TBI_R_AVOIR FOR TA_R_AVOIR
ACTIVE BEFORE INSERT POSITION 2
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(num_id_r_AVOIR,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_R_AVOIR */
CREATE OR ALTER TRIGGER TBU_R_AVOIR FOR TA_R_AVOIR
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* ****************************************************** DOCUMENT TIERS ************************************************* */

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR11
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_DOCUMENT_TIERS')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_DOCUMENT_TIERS;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_DOCUMENT_TIERS TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR11
^
drop procedure GESTION_CREATION_GENERATOR11
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE12
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_DOCUMENT_TIERS')) THEN
  begin
    query = 'CREATE TABLE TA_DOCUMENT_TIERS (
    	ID_DOCUMENT_TIERS            	DID3 NOT NULL,
    	CODE_DOCUMENT_TIERS          	DLGR_CODE,
   	 	LIBELLE_DOCUMENT_TIERS       	DLIB100,
    	CHEMIN_CORRESP_DOCUMENT_TIERS  	DLIB255,
    	CHEMIN_MODEL_DOCUMENT_TIERS    	DLIB255,
    	ACTIF                   		DBOOL,
    	DEFAUT                  		DBOOL,
    	TYPE_LOGICIEL          			DLIB20 NOT NULL,
    	QUI_CREE_DOCUMENT_TIERS      	DLIB50,
    	QUAND_CREE_DOCUMENT_TIERS    	TIMESTAMP DEFAULT ''NOW'',
    	QUI_MODIF_DOCUMENT_TIERS     	DLIB50,
    	QUAND_MODIF_DOCUMENT_TIERS   	TIMESTAMP DEFAULT ''NOW'',
    	"VERSION"               		NUM_VERSION,
    	IP_ACCES               			DLIB50NN DEFAULT 0,
    	VERSION_OBJ             		INTEGER
	)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_DOCUMENT_TIERS ADD PRIMARY KEY (ID_DOCUMENT_TIERS);';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_DOCUMENT_TIERS_CODE ON TA_DOCUMENT_TIERS (CODE_DOCUMENT_TIERS);';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_DOCUMENT_TIERS ADD CONSTRAINT UNQ1_TA_DOCUMENT_TIERS UNIQUE (CODE_DOCUMENT_TIERS);';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE12
^
drop procedure GESTION_CREATION_TABLE12
^

CREATE OR ALTER TRIGGER TBI_TA_DOCUMENT_TIERS FOR TA_DOCUMENT_TIERS
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_DOCUMENT_TIERS is null) Then
      New.ID_DOCUMENT_TIERS = GEN_ID(NUM_ID_DOCUMENT_TIERS,1);
   New.CODE_DOCUMENT_TIERS = Upper(New.CODE_DOCUMENT_TIERS);
   New.QUI_CREE_DOCUMENT_TIERS = USER;
   new.QUAND_CREE_DOCUMENT_TIERS = 'NOW';
   new.QUI_MODIF_DOCUMENT_TIERS = USER;
   new.QUAND_MODIF_DOCUMENT_TIERS = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_DOCUMENT_TIERS FOR TA_DOCUMENT_TIERS
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   New.CODE_DOCUMENT_TIERS = Upper(New.CODE_DOCUMENT_TIERS);
   new.QUI_MODIF_DOCUMENT_TIERS = USER;
   new.QUAND_MODIF_DOCUMENT_TIERS = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


CREATE OR ALTER PROCEDURE RECORD_MODIFIABLE (
    nom_table varchar(100),
    idtable integer)
returns (
    nb integer)
as
begin
if (upper(:NOM_TABLE) = upper('ta_tiers'))   then
    begin
        nb=0;
        select count(*) from ta_facture doc where doc.id_tiers = :idtable into :nb  ;
        if (:nb<=0)then
            select count(*) from ta_devis doc where doc.id_tiers = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_boncde doc where doc.id_tiers = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_avoir doc where doc.id_tiers = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_apporteur doc where doc.id_tiers = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_proforma doc where doc.id_tiers = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_bonliv doc where doc.id_tiers = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_acompte doc where doc.id_tiers = :idtable into nb  ;

        suspend;
    end
else
if (upper(:NOM_TABLE) = upper('ta_article'))   then
    begin
        nb=0;
        select count(*) from ta_L_facture Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_devis Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;

        if (:nb<=0)then
            select count(*) from ta_l_boncde Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_avoir Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_apporteur Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_proforma Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_bonliv Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_acompte Ldoc where Ldoc.id_ARTICLE = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_stock Ldoc where Ldoc.id_article_stock = :idtable into nb  ;

        suspend;
    end
else
if (upper(:NOM_TABLE) = upper('ta_T_PAIEMENT'))   then
    begin
        nb=0;
        select count(*) from ta_facture doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_devis doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_bonliv doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_boncde doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_avoir doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_apporteur doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_proforma doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_acompte doc where doc.ID_T_PAIEMENT = :idtable into nb  ;
        suspend;
    end
else
if (upper(:NOM_TABLE) = upper('ta_T_civilite'))   then
    begin
        nb=0;
        select count(*) from ta_tiers tiers where tiers.id_t_civilite = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_Unite'))   then
    begin
        nb=0;
        select count(*) from ta_Prix prix where prix.id_unite = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_T_Ligne'))   then
    begin
        nb=0;
        select count(*) from ta_l_facture ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_devis ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_bonliv ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_boncde ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_avoir ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_apporteur ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_proforma ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        if (:nb<=0)then
            select count(*) from ta_l_acompte ldoc where ldoc.id_t_ligne = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_famille'))   then
    begin
        nb=0;
        select count(*) from ta_article article where article.id_famille = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_TVA'))   then
    begin
        nb=0;
        select count(*) from ta_ARTICLE article where article.id_tva = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_T_TVA'))   then
    begin
        nb=0;
        select count(*) from ta_Article article where article.id_T_Tva = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_T_Entite'))   then
    begin
        nb=0;
        select count(*) from ta_tiers tiers where tiers.id_t_entite = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_Entreprise'))   then
    begin
        nb=0;
        select count(*) from ta_tiers tiers where tiers.id_entreprise = :idtable into nb  ;
        suspend;
    end

if (upper(:NOM_TABLE) = upper('ta_t_tiers'))   then
    begin
        nb=0;
        select count(*) from ta_tiers tiers where tiers.id_t_tiers = :idtable into nb  ;
        suspend;
    end

if (upper(:NOM_TABLE) = upper('ta_t_adr'))   then
    begin
        nb=0;
        select count(*) from ta_adresse doc where doc.id_t_adr = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_t_email'))   then
    begin
        nb=0;
        select count(*) from ta_email doc where doc.id_t_email = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_t_web'))   then
    begin
        nb=0;
        select count(*) from ta_web doc where doc.id_t_web = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_t_tel'))   then
    begin
        nb=0;
        select count(*) from ta_telephone doc where doc.id_t_tel = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_t_tarif'))   then
    begin
        nb=0;
        select count(*) from ta_tiers doc where doc.id_t_tarif = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_t_banque'))   then
    begin
        nb=0;
        select count(*) from ta_compte_banque doc where doc.id_t_banque = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_t_liens'))   then
    begin
        nb=0;
        select count(*) from ta_liens doc where doc.id_t_liens = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('ta_etablissement'))   then
    begin
        nb=0;
        select count(*) from ta_operation doc where doc.id_etablissement = :idtable into nb  ;
        select count(*) from ta_depot doc where doc.id_etablissement = :idtable into nb  ;
        select count(*) from ta_report_t_paiement doc where doc.id_etablissement = :idtable into nb  ;
        suspend;
    end  
if (upper(:NOM_TABLE) = upper('TA_FAMILLE_TIERS'))   then
    begin
        nb=0;
        select count(*) from TA_R_FAMILLE_TIERS doc where doc.id_famille = :idtable into nb  ;
        suspend;
    end
if (upper(:NOM_TABLE) = upper('TA_FAMILLE_UNITE'))   then
    begin
        nb=0;
        select count(*) from TA_unite doc where doc.id_famille = :idtable into nb  ;
        suspend;
    end    
if (upper(:NOM_TABLE) = upper('TA_C_PAIEMENT'))   then
    begin
        nb=0;
        select count(*) from TA_TIERS doc where doc.ID_C_PAIEMENT = :idtable into nb  ;
        suspend;
    end    

if (upper(:NOM_TABLE) = upper('ta_acompte'))   then
    begin
        nb=0;
        select count(*) from ta_r_acompte r where r.id_acompte = :idtable
            and id_facture is not null into nb  ;
        suspend;
    end

    if (upper(:NOM_TABLE) = upper('ta_avoir'))   then
    begin
        nb=0;
        select count(*) from ta_r_avoir r where r.id_avoir = :idtable
            and id_facture is not null into nb  ;
        suspend;
    end
suspend;
end
^

/* ****************************************************** DOCUMENT DOC ************************************************* */
CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR12
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_DOCUMENT_DOC')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_DOCUMENT_DOC;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_DOCUMENT_DOC TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR12
^
drop procedure GESTION_CREATION_GENERATOR12
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE13
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_DOCUMENT_DOC')) THEN
  begin
    query = 'CREATE TABLE TA_DOCUMENT_DOC (
    	ID_DOCUMENT_DOC            	DID3 NOT NULL,
    	CODE_DOCUMENT_DOC          	DLGR_CODE,
    	LIBELLE_DOCUMENT_DOC       	DLIB100,
    	CHEMIN_CORRESP_DOCUMENT_DOC  	DLIB255,
    	CHEMIN_MODEL_DOCUMENT_DOC    	DLIB255,
    	ACTIF                   		DBOOL,
    	DEFAUT                  		DBOOL,
    	TYPE_LOGICIEL          			DLIB20 NOT NULL,
    	QUI_CREE_DOCUMENT_DOC      	DLIB50,
    	QUAND_CREE_DOCUMENT_DOC    	TIMESTAMP DEFAULT ''NOW'',
    	QUI_MODIF_DOCUMENT_DOC     	DLIB50,
    	QUAND_MODIF_DOCUMENT_DOC   	TIMESTAMP DEFAULT ''NOW'',
    	"VERSION"               		NUM_VERSION,
    	IP_ACCES               			DLIB50NN DEFAULT 0,
    	VERSION_OBJ             		INTEGER
	)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_DOCUMENT_DOC ADD PRIMARY KEY (ID_DOCUMENT_DOC);';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_DOCUMENT_DOC_CODE ON TA_DOCUMENT_DOC (CODE_DOCUMENT_DOC);';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_DOCUMENT_DOC ADD CONSTRAINT UNQ1_TA_DOCUMENT_DOC UNIQUE (CODE_DOCUMENT_DOC);';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE13
^
drop procedure GESTION_CREATION_TABLE13
^

CREATE OR ALTER TRIGGER TBI_TA_DOCUMENT_DOC FOR TA_DOCUMENT_DOC
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_DOCUMENT_DOC is null) Then
      New.ID_DOCUMENT_DOC = GEN_ID(NUM_ID_DOCUMENT_DOC,1);
   New.CODE_DOCUMENT_DOC = Upper(New.CODE_DOCUMENT_DOC);
   New.QUI_CREE_DOCUMENT_DOC = USER;
   new.QUAND_CREE_DOCUMENT_DOC = 'NOW';
   new.QUI_MODIF_DOCUMENT_DOC = USER;
   new.QUAND_MODIF_DOCUMENT_DOC = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_DOCUMENT_DOC FOR TA_DOCUMENT_DOC
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   New.CODE_DOCUMENT_DOC = Upper(New.CODE_DOCUMENT_DOC);
   new.QUI_MODIF_DOCUMENT_DOC = USER;
   new.QUAND_MODIF_DOCUMENT_DOC = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR13
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_DOCUMENT_DOC')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_DOCUMENT_DOC;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_DOCUMENT_DOC TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR13
^
drop procedure GESTION_CREATION_GENERATOR13
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE14
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_DOCUMENT_DOC')) THEN
  begin
    query = 'CREATE TABLE TA_R_DOCUMENT_DOC (
		ID_R_DOCUMENT_DOC			DID3 NOT NULL,
    	ID_DOCUMENT_DOC            	DID3 NOT NULL,
		ID_T_DOC					DID3 NOT NULL,
    	QUI_CREE     				DLIB50,
    	QUAND_CREE    				TIMESTAMP DEFAULT ''NOW'',
    	QUI_MODIF     				DLIB50,
    	QUAND_MODIF   				TIMESTAMP DEFAULT ''NOW'',
    	"VERSION"               		NUM_VERSION,
    	IP_ACCES               			DLIB50NN DEFAULT 0,
    	VERSION_OBJ             		INTEGER
	)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_DOCUMENT_DOC ADD PRIMARY KEY (ID_R_DOCUMENT_DOC);';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_DOCUMENT_DOC ADD CONSTRAINT FK_TA_R_DOCUMENT_DOC_1 FOREIGN KEY (ID_DOCUMENT_DOC) REFERENCES TA_DOCUMENT_DOC (ID_DOCUMENT_DOC);';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_DOCUMENT_DOC ADD CONSTRAINT FK_TA_R_DOCUMENT_DOC_2 FOREIGN KEY (ID_T_DOC) REFERENCES TA_T_DOC (ID_T_DOC);';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE14
^
drop procedure GESTION_CREATION_TABLE14
^

CREATE OR ALTER TRIGGER TBI_TA_R_DOCUMENT_DOC FOR TA_R_DOCUMENT_DOC
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_R_DOCUMENT_DOC is null) Then
      New.ID_R_DOCUMENT_DOC = GEN_ID(NUM_ID_R_DOCUMENT_DOC,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_R_DOCUMENT_DOC FOR TA_R_DOCUMENT_DOC
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE11
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_TIERS' and  a.RDB$FIELD_NAME ='ID_T_PAIEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_TIERS ADD ID_T_PAIEMENT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_TIERS ADD CONSTRAINT FK_TA_TIERS_11 FOREIGN KEY (ID_T_PAIEMENT) REFERENCES TA_T_PAIEMENT (ID_T_PAIEMENT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE11
^
drop procedure GESTION_ALTER_TABLE11
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE12
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_T_PAIEMENT' and  a.RDB$FIELD_NAME ='REPORT_T_PAIEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_T_PAIEMENT ADD REPORT_T_PAIEMENT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
  end
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_T_PAIEMENT' and  a.RDB$FIELD_NAME ='FIN_MOIS_T_PAIEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_T_PAIEMENT ADD FIN_MOIS_T_PAIEMENT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
  end
  
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE12
^
drop procedure GESTION_ALTER_TABLE12
^

/* ****************************************************** TA_ARTICLE ************************************************* */

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE13
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='ACTIF')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD ACTIF DBOOL DEFAULT ''1''';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE13
^
drop procedure GESTION_ALTER_TABLE13
^

/* ****************************************************** TA_RAPPORT_UNITE ************************************************* */

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE14
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_RAPPORT_UNITE' and  a.RDB$FIELD_NAME ='SENS')) THEN
  begin
    query = 'ALTER TABLE TA_RAPPORT_UNITE ADD SENS DBOOL DEFAULT ''1''';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE14
^
drop procedure GESTION_ALTER_TABLE14
^

/* ****************************************************** TA_COMPTE_BANQUE ************************************************* */
CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE15
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
	query ='';
	query = 'update RDB$RELATION_FIELDS set RDB$FIELD_SOURCE = ''DLIB100'' where (RDB$FIELD_NAME = ''NOM_BANQUE'') and (RDB$RELATION_NAME = ''TA_COMPTE_BANQUE'')';
    EXECUTE STATEMENT :query;
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE15
^
drop procedure GESTION_ALTER_TABLE15
^


/* ****************************************************** TA_C_PAIEMENT ************************************************* */
CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE16
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
IF (not exists(SELECT a.rdb$constraint_name, a.RDB$RELATION_NAME FROM rdb$relation_constraints a
JOIN RDB$INDEX_SEGMENTS B ON B.rdb$index_name=a.rdb$constraint_name
where a.RDB$RELATION_NAME = 'TA_C_PAIEMENT' and  a.rdb$constraint_type ='UNIQUE' AND B.rdb$field_name='CODE_C_PAIEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_C_PAIEMENT ADD CONSTRAINT UNQ1_TA_C_PAIEMENT UNIQUE (CODE_C_PAIEMENT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE16
^
drop procedure GESTION_ALTER_TABLE16
^

/* ****************************************************************************************************** */
CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR14
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_TA_DEPARTEMENTS')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_TA_DEPARTEMENTS;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_TA_DEPARTEMENTS TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR14
^
drop procedure GESTION_CREATION_GENERATOR14
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE15
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_DEPARTEMENTS')) THEN
  begin
    query = 'CREATE TABLE TA_DEPARTEMENTS(
  
	NUMDEP Char(2) NOT NULL,
  	CODEDEP Char(5) NOT NULL,
  	NOMDEP Varchar(30) NOT NULL,
  	CODEREGION Char(4) NOT NULL,
  	NOMREGION Varchar(30) NOT NULL,

    QUI_CREE DLIB50,
    QUAND_CREE Timestamp DEFAULT ''NOW'',
    QUI_MODIF DLIB50,
    QUAND_MODIF Timestamp DEFAULT ''NOW'',
    "VERSION" NUM_VERSION,
    IP_ACCES DLIB50NN DEFAULT 0,
    VERSION_OBJ Integer
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_DEPARTEMENTS ADD PRIMARY KEY (NUMDEP)';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE15
^
drop procedure GESTION_CREATION_TABLE15
^
