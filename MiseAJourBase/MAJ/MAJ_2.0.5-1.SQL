CREATE or ALTER  PROCEDURE CREATION_TABLE_TA_REMISE
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_REMISE')) THEN
  begin
    query = 'CREATE TABLE TA_REMISE (
	  ID_DOCUMENT                  DID3 NOT NULL ,
    CODE_DOCUMENT                DLGR_CODE ,
    DATE_DOCUMENT                DATE_LGR DEFAULT ''NOW'' ,
    DATE_LIV_DOCUMENT            DATE_LGR DEFAULT ''NOW'' ,
    LIBELLE_DOCUMENT             DLIB255 ,
    ID_TIERS                     DID_FACULTATIF ,
    ID_T_PAIEMENT                DID_FACULTATIF ,
    EXPORT                       DBOOL DEFAULT 0 ,
    NET_TTC_CALC                 DID9FACULT ,
	  ID_COMPTE_BANQUE   			 DID_FACULTATIF,
	  ETAT               		 	 BIGINT,
	  QUI_CREE_DOCUMENT            DLIB50 ,
    QUAND_CREE_DOCUMENT          TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_DOCUMENT           DLIB50 ,
    QUAND_MODIF_DOCUMENT         TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                    NUM_VERSION ,
    IP_ACCES                     DLIB50NN DEFAULT 0 ,
    VERSION_OBJ                  INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_REMISE ADD CONSTRAINT UNQ1_TA_REMISE UNIQUE (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query ='ALTER TABLE TA_REMISE ADD PRIMARY KEY (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query ='ALTER TABLE TA_REMISE ADD FOREIGN KEY (ID_T_PAIEMENT) REFERENCES TA_T_PAIEMENT (ID_T_PAIEMENT)';
    EXECUTE STATEMENT :query;
    
    query ='ALTER TABLE TA_REMISE ADD FOREIGN KEY (ID_COMPTE_BANQUE) REFERENCES TA_COMPTE_BANQUE (ID_COMPTE_BANQUE)';
    EXECUTE STATEMENT :query;
    
    query ='CREATE INDEX TA_REMISE_CODE ON TA_REMISE (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_TA_REMISE
^
drop procedure CREATION_TABLE_TA_REMISE
^


CREATE or ALTER  PROCEDURE CREATION_TABLE_TA_L_REMISE
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_L_REMISE')) THEN
  begin
    query = 'CREATE TABLE TA_L_REMISE (
    ID_L_DOCUMENT       DID3 NOT NULL,
    ID_DOCUMENT       DID_FACULTATIF,
    ID_REGLEMENT         DID_FACULTATIF ,
    ID_ACOMPTE       DID_FACULTATIF ,
    ETAT               		 	 BIGINT,
    EXPORT                       DBOOL DEFAULT 0,
    QUI_CREE_L_DOCUMENT           DLIB50 ,
    QUAND_CREE_L_DOCUMENT         TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_L_DOCUMENT          DLIB50 ,
    QUAND_MODIF_L_DOCUMENT        TIMESTAMP DEFAULT ''NOW'',
    "VERSION"          NUM_VERSION ,
    IP_ACCES           DLIB50NN DEFAULT 0 ,
    VERSION_OBJ        INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_REMISE ADD PRIMARY KEY (ID_L_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_REMISE ADD CONSTRAINT FK_TA_L_REMISE_1 FOREIGN KEY (ID_DOCUMENT) REFERENCES TA_REMISE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_REMISE ADD CONSTRAINT FK_TA_L_REMISE_2 FOREIGN KEY (ID_REGLEMENT) REFERENCES TA_REGLEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_REMISE ADD CONSTRAINT FK_TA_L_REMISE_3 FOREIGN KEY (ID_ACOMPTE) REFERENCES TA_ACOMPTE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_L_ACOMPTE_ID_REMISE ON TA_L_REMISE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;    
  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_TA_L_REMISE
^
drop procedure CREATION_TABLE_TA_L_REMISE
^


CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_R_REGLEMENT
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_REGLEMENT' and  a.RDB$FIELD_NAME ='EXPORT')) THEN
  begin
    query = 'ALTER TABLE TA_R_REGLEMENT ADD EXPORT DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query; 
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_R_REGLEMENT
^
drop procedure GESTION_ALTER_TA_R_REGLEMENT
^


CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_R_ACOMPTE
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_ACOMPTE' and  a.RDB$FIELD_NAME ='EXPORT')) THEN
  begin
    query = 'ALTER TABLE TA_R_ACOMPTE ADD EXPORT DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;

  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_R_ACOMPTE
^
drop procedure GESTION_ALTER_TA_R_ACOMPTE
^


CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_R_AVOIR
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_AVOIR' and  a.RDB$FIELD_NAME ='EXPORT')) THEN
  begin
    query = 'ALTER TABLE TA_R_AVOIR ADD EXPORT DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
            
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_R_AVOIR
^
drop procedure GESTION_ALTER_TA_R_AVOIR
^


CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_ACOMPTE1
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ACOMPTE' and  a.RDB$FIELD_NAME ='ID_COMPTE_BANQUE')) THEN
  begin
    query = 'ALTER TABLE TA_ACOMPTE ADD ID_COMPTE_BANQUE DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_ACOMPTE ADD CONSTRAINT FK_TA_ACOMPTE_1 FOREIGN KEY (ID_COMPTE_BANQUE) REFERENCES TA_COMPTE_BANQUE (ID_COMPTE_BANQUE)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_ACOMPTE1
^
drop procedure GESTION_ALTER_TA_ACOMPTE1
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_ACOMPTE2
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ACOMPTE' and  a.RDB$FIELD_NAME ='ID_T_PAIEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_ACOMPTE ADD ID_T_PAIEMENT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_ACOMPTE ADD FOREIGN KEY (ID_T_PAIEMENT) REFERENCES TA_T_PAIEMENT (ID_T_PAIEMENT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_ACOMPTE2
^
drop procedure GESTION_ALTER_TA_ACOMPTE2
^




CREATE OR ALTER TRIGGER TBDID_REMISE_ETRANGER FOR TA_REMISE
ACTIVE AFTER DELETE POSITION 1
as
begin
  delete from ta_l_remise where id_DOCUMENT = old.id_DOCUMENT;
end
^

CREATE OR ALTER TRIGGER TBI_REMISE FOR TA_REMISE
ACTIVE BEFORE INSERT POSITION 2
as
begin
   New.CODE_DOCUMENT = Upper(New.CODE_DOCUMENT);
   New.QUI_CREE_DOCUMENT  = USER;
   New.QUAND_CREE_DOCUMENT = 'NOW';
   New.QUI_MODIF_DOCUMENT = USER;
   New.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_REMISE FOR TA_REMISE
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   New.CODE_DOCUMENT = Upper(New.CODE_DOCUMENT);
   new.QUI_MODIF_DOCUMENT = USER;
   new.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^
/* Trigger: TBI_L_REMISE */
CREATE OR ALTER TRIGGER TBI_L_REMISE FOR TA_L_REMISE
ACTIVE BEFORE INSERT POSITION 2
as
begin
   New.QUI_CREE_L_DOCUMENT  = USER;
   New.QUAND_CREE_L_DOCUMENT = 'NOW';
   New.QUI_MODIF_L_DOCUMENT = USER;
   New.QUAND_MODIF_L_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_L_REMISE */
CREATE OR ALTER TRIGGER TBU_L_REMISE FOR TA_L_REMISE
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF_L_DOCUMENT = USER;
   new.QUAND_MODIF_L_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR3
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_PRIX')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_PRIX;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_PRIX TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR3
^
drop procedure GESTION_CREATION_GENERATOR3
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE3
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_PRIX')) THEN
  begin
    query = 'CREATE TABLE TA_R_PRIX(
    ID							DID3 NOT NULL,
    ID_PRIX      				DID3,
	ID_TIERS     				DID_FACULTATIF,
	ID_T_TARIF	 				DID_FACULTATIF,
    QUI_CREE     				DLIB50,
    QUAND_CREE  				TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF    				DLIB50,
    QUAND_MODIF  				TIMESTAMP DEFAULT ''NOW'',
    "VERSION"            		NUM_VERSION,
    IP_ACCES             		DLIB50NN DEFAULT 0,
    VERSION_OBJ					INTEGER
    )';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_R_PRIX ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_R_PRIX ADD CONSTRAINT FK_TA_R_PRIX_1 FOREIGN KEY (ID_PRIX) REFERENCES TA_PRIX(ID_PRIX)';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_R_PRIX ADD CONSTRAINT FK_TA_R_PRIX_2 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS(ID_TIERS)';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE3
^
drop procedure GESTION_CREATION_TABLE3
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE2
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='LONGUEUR')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD LONGUEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_ARTICLE ADD HAUTEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_ARTICLE ADD LARGEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_ARTICLE ADD POIDS DID9FACULT';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE2
^
drop procedure GESTION_ALTER_TABLE2
^

create or alter TRIGGER TBI_R_PRIX FOR TA_R_PRIX ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(NUM_ID_R_PRIX,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_R_PRIX FOR TA_R_PRIX ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE3
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_T_TARIF' and  a.RDB$FIELD_NAME ='SENS')) THEN
  begin
    query = 'ALTER TABLE TA_T_TARIF ADD SENS DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
  end

IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_T_TARIF' and  a.RDB$FIELD_NAME ='POURCENTAGE')) THEN
  begin
    query = 'ALTER TABLE TA_T_TARIF ADD POURCENTAGE DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
  end

IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_T_TARIF' and  a.RDB$FIELD_NAME ='VALEUR')) THEN
  begin
    query = 'ALTER TABLE TA_T_TARIF ADD VALEUR DID9FACULT';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE3
^
drop procedure GESTION_ALTER_TABLE3
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE4
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_UNITE' and  a.RDB$FIELD_NAME ='LONGUEUR')) THEN
  begin
    query = 'ALTER TABLE TA_UNITE ADD LONGUEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_UNITE ADD HAUTEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_UNITE ADD LARGEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_UNITE ADD POIDS DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_UNITE ADD NB_UNITE DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_UNITE ADD ID_ARTICLE DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_UNITE ADD CONSTRAINT FK_TA_UNITE_2 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE(ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'alter table TA_UNITE add constraint UNQ_TA_UNITE_1 unique (CODE_UNITE, ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_UNITE DROP CONSTRAINT UNQ1_TA_UNITE';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE4
^
drop procedure GESTION_ALTER_TABLE4
^



CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE5
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( select * from rdb$indices i
join rdb$index_segments s on s.rdb$index_name=i.rdb$index_name
where upper(i.rdb$relation_name)='TA_REGLEMENT' and upper(s.rdb$field_name)='ID_TIERS')) THEN
  begin
    
    query='ALTER TABLE TA_REGLEMENT ADD CONSTRAINT FK_TA_REGLEMENT_1 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;

  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE5
^
drop procedure GESTION_ALTER_TABLE5
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_IMAGE_ARTICLE
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_IMAGE_ARTICLE' and  a.RDB$FIELD_NAME ='ID_IMAGE_ORIGINE')) THEN
  begin
    query = 'ALTER TABLE TA_IMAGE_ARTICLE ADD ID_IMAGE_ORIGINE DID_FACULTATIF';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_IMAGE_ARTICLE ADD CHECKSUM_IMAGE_ARTICLE DLIB255';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_IMAGE_ARTICLE
^
drop procedure GESTION_ALTER_TA_IMAGE_ARTICLE
^


