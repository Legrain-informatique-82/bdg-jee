
EXECUTE PROCEDURE MAJ_GENERATEUR
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR1
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_REGLEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_REGLEMENT;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_REGLEMENT TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR1
^
drop procedure GESTION_CREATION_GENERATOR1
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR2
as
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_TVA_DOC')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_TVA_DOC;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_TVA_DOC TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR2
^
drop procedure GESTION_CREATION_GENERATOR2
^


CREATE OR ALTER PROCEDURE GESTION_ALTER_INSERTION01 
as
declare variable nom_info_entreprise varchar(100);
declare variable adresse1_info_entreprise varchar(100);
declare variable adresse2_info_entreprise varchar(100);
declare variable adresse3_info_entreprise varchar(100);
declare variable codepostal_info_entreprise varchar(25);
declare variable ville_info_entreprise varchar(100);
declare variable pays_info_entreprise varchar(100);
declare variable tel_info_entreprise varchar(20);
declare variable fax_info_entreprise varchar(20);
declare variable email_info_entreprise varchar(100);
declare variable web_info_entreprise varchar(100);
declare variable id_genere integer;
BEGIN
id_genere=-1;

if (not exists(select * from TA_T_TIERS where CODE_T_TIERS like ('R2D2')))then
begin
    Insert into TA_T_TIERS (ID_T_TIERS,CODE_T_TIERS,LIBELLE_T_TIERS,COMPTE_T_TIERS,VERSION_OBJ) 
    values('-1','R2D2','UtilisateurBDG','421',0);
end 

if (not exists(select * from TA_TIERS where CODE_TIERS like ('Z-6PO')))then
begin
select infos.nom_info_entreprise,infos.adresse1_info_entreprise,infos.adresse2_info_entreprise
,infos.adresse3_info_entreprise,infos.codepostal_info_entreprise,infos.ville_info_entreprise,infos.pays_info_entreprise
,infos.tel_info_entreprise,infos.fax_info_entreprise,infos.email_info_entreprise,infos.web_info_entreprise
 from ta_info_entreprise infos into
:nom_info_entreprise,
:adresse1_info_entreprise,
:adresse2_info_entreprise,
:adresse3_info_entreprise,
:codepostal_info_entreprise,
:ville_info_entreprise,
:pays_info_entreprise,
:tel_info_entreprise,
:fax_info_entreprise,
:email_info_entreprise,
:web_info_entreprise;
if((:nom_info_entreprise is not null) or (:ville_info_entreprise is not null))then
begin
insert into TA_TIERS (ID_TIERS,CODE_TIERS,NOM_TIERS,code_compta,COMPTE,ACTIF_TIERS,TTC_TIERS,ID_T_TIERS,VERSION_OBJ)
values('-1','Z-6PO',:nom_info_entreprise,'Z-6PO','421',0,0,-1,0);

id_genere=gen_id(num_id_adresse,1);
insert into ta_adresse (id_adresse,adresse1_adresse,adresse2_adresse,adresse3_adresse
,codepostal_adresse,ville_adresse,pays_adresse,id_tiers,version_obj)
values(:id_genere,:adresse1_info_entreprise,:adresse2_info_entreprise,:adresse3_info_entreprise,:codepostal_info_entreprise,
:ville_info_entreprise,:pays_info_entreprise,-1,0);
update ta_tiers set id_adresse=:id_genere where id_tiers=-1;

if(:tel_info_entreprise is not null and tel_info_entreprise<>'')then
  begin
    id_genere=gen_id(num_id_telephone,1);  
    insert into ta_telephone (id_telephone,numero_telephone,id_tiers,version_obj)
    values(:id_genere,:tel_info_entreprise,-1,0);
    update ta_tiers set id_telephone=:id_genere where id_tiers=-1;
  end
  
if(:fax_info_entreprise is not null and fax_info_entreprise<>'')then
  begin
  id_genere=gen_id(num_id_telephone,1);
    insert into ta_telephone (id_telephone,numero_telephone,id_tiers,id_t_tel,version_obj)
    values(:id_genere,:fax_info_entreprise,-1,(select id_t_tel from ta_t_tel where upper(code_t_tel) like'FAX'),0);
    end
  
if(:email_info_entreprise is not null)then
  begin
    insert into ta_email (id_email, adresse_email,id_tiers,version_obj)
    values(:id_genere,:email_info_entreprise,-1,0);
    update ta_tiers set id_email=:id_genere where id_tiers=-1;
    end  
  
if(:web_info_entreprise is not null)then
  begin
    insert into ta_web (id_web, adresse_web,id_tiers,version_obj)
    values(:id_genere,:web_info_entreprise,-1,0);
    update ta_tiers set id_web=:id_genere where id_tiers=-1;
    end   
end 
else
begin
insert into TA_TIERS (ID_TIERS,CODE_TIERS,NOM_TIERS,code_compta,COMPTE,ACTIF_TIERS,TTC_TIERS,ID_T_TIERS,VERSION_OBJ)
values('-1','Z-6PO','Z-6PO','Z-6PO','421',0,0,-1,0);
end 
END
end
^
EXECUTE PROCEDURE GESTION_ALTER_INSERTION01
^
drop procedure GESTION_ALTER_INSERTION01
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE01
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_COMPTE_BANQUE' and  a.RDB$FIELD_NAME ='CPTCOMPTABLE')) THEN
  begin
    query = 'ALTER TABLE TA_COMPTE_BANQUE ADD CPTCOMPTABLE DLIB8';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE01
^
drop procedure GESTION_ALTER_TABLE01
^
CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE1
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_REGLEMENT')) THEN
  begin
    query='CREATE TABLE TA_REGLEMENT (
    ID_DOCUMENT                  DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_DOCUMENT                DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    DATE_DOCUMENT                DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DATE_LIV_DOCUMENT            DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    LIBELLE_DOCUMENT             DLIB255 /* DLIB255 = VARCHAR(255) */,
    ID_TIERS                     DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_PAIEMENT                DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    EXPORT                       DBOOL DEFAULT 0 /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    NET_TTC_CALC                 DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    ID_COMPTE_BANQUE                DID_FACULTATIF,
    ETAT                             BIGINT,
    QUI_CREE_DOCUMENT            DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_DOCUMENT          TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_DOCUMENT           DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_DOCUMENT         TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                    NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                     DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ                  INTEGER
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_REGLEMENT ADD CONSTRAINT UNQ1_TA_REGLEMENT UNIQUE (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_REGLEMENT ADD PRIMARY KEY (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_REGLEMENT ADD FOREIGN KEY (ID_COMPTE_BANQUE) REFERENCES TA_COMPTE_BANQUE (ID_COMPTE_BANQUE);';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_REGLEMENT ADD FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_REGLEMENT ADD FOREIGN KEY (ID_T_PAIEMENT) REFERENCES TA_T_PAIEMENT (ID_T_PAIEMENT)';
    EXECUTE STATEMENT :query;
     
    query='CREATE INDEX TA_REGLEMENT_CODE ON TA_REGLEMENT (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='CREATE INDEX TA_REGLEMENT_ID_TIERS ON TA_REGLEMENT (ID_TIERS)';
    EXECUTE STATEMENT :query;
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE1
^
drop procedure GESTION_CREATION_TABLE1
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE1_2
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_REGLEMENT')) THEN
  begin
    query='CREATE TABLE TA_R_REGLEMENT (
    ID                 INTEGER NOT NULL,
    ID_REGLEMENT       INTEGER NOT NULL,
    ID_FACTURE         DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_DEVIS           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_BONCDE          DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_PROFORMA        DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_APPORTEUR       DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_AVOIR           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_BONLIV          DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    AFFECTATION        DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QUI_CREE           DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE         TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF          DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF        TIMESTAMP DEFAULT ''NOW'',
    "VERSION"          NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES           DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ        INTEGER
    )';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_R_REGLEMENT ADD CONSTRAINT PK_TA_R_REGLEMENT PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_FACTURE) REFERENCES TA_FACTURE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_DEVIS) REFERENCES TA_DEVIS (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_BONCDE) REFERENCES TA_BONCDE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_PROFORMA) REFERENCES TA_PROFORMA (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_APPORTEUR) REFERENCES TA_APPORTEUR (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_AVOIR) REFERENCES TA_AVOIR (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_BONLIV) REFERENCES TA_BONLIV (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_R_REGLEMENT ADD FOREIGN KEY (ID_REGLEMENT) REFERENCES TA_REGLEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
       
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE1_2
^
drop procedure GESTION_CREATION_TABLE1_2
^



CREATE OR ALTER TRIGGER TBI_REGLEMENT FOR TA_REGLEMENT
ACTIVE BEFORE INSERT POSITION 2
as
begin
   New.CODE_DOCUMENT = Upper(New.CODE_DOCUMENT);
   New.QUI_CREE_DOCUMENT  = USER;
   New.QUAND_CREE_DOCUMENT = 'NOW';
   New.QUI_MODIF_DOCUMENT = USER;
   New.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^


CREATE OR ALTER TRIGGER TBU_REGLEMENT FOR TA_REGLEMENT
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF_DOCUMENT = USER;
   new.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBI_R_REGLEMENT FOR TA_R_REGLEMENT
ACTIVE BEFORE INSERT POSITION 2
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(num_id_r_REGLEMENT,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^


CREATE OR ALTER TRIGGER TBU_R_REGLEMENT FOR TA_R_REGLEMENT
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE2
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_T_TVA_DOC')) THEN
  begin
    query='CREATE TABLE TA_T_TVA_DOC (
    ID_T_TVA_DOC           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_T_TVA_DOC         DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    LIBELLE_T_TVA_DOC      DLGR_LIBCODE /* DLGR_LIBCODE = VARCHAR(100) NOT NULL */,
    JOURNAL_T_TVA_DOC      DLIB8NN /* DLIB8NN = VARCHAR(8) NOT NULL */,
    QUI_CREE_T_TVA_DOC     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_T_TVA_DOC   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_T_TVA_DOC    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_T_TVA_DOC  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"              NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES               DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ            INTEGER
    )';

    EXECUTE STATEMENT :query;
    query='ALTER TABLE TA_T_TVA_DOC ADD CONSTRAINT UNQ1_TA_T_TVA_DOC UNIQUE (CODE_T_TVA_DOC)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_T_TVA_DOC ADD PRIMARY KEY (ID_T_TVA_DOC)';
    EXECUTE STATEMENT :query;

    query='CREATE INDEX TA_T_TVA_DOC_CODE ON TA_T_TVA_DOC (CODE_T_TVA_DOC)';
    EXECUTE STATEMENT :query;

  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE2
^
drop procedure GESTION_CREATION_TABLE2
^








CREATE OR ALTER TRIGGER TBI_TA_T_TVA_DOC FOR TA_T_TVA_DOC
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_T_TVA_DOC is null) Then
      New.ID_T_TVA_DOC= GEN_ID(NUM_ID_T_TVA_DOC,1);
   New.CODE_T_TVA_DOC = Upper(New.CODE_T_TVA_DOC);
   New.QUI_CREE_T_TVA_DOC = USER;
   new.QUAND_CREE_T_TVA_DOC = 'NOW';
   new.QUI_MODIF_T_TVA_DOC = USER;
   new.QUAND_MODIF_T_TVA_DOC = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_TA_T_TVA_DOC */
CREATE OR ALTER TRIGGER TBU_TA_T_TVA_DOC FOR TA_T_TVA_DOC
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   New.CODE_T_TVA_DOC = Upper(New.CODE_T_TVA_DOC);
   new.QUI_MODIF_T_TVA_DOC = USER;
   new.QUAND_MODIF_T_TVA_DOC = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE02
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_TIERS' and  a.RDB$FIELD_NAME ='ID_T_TVA_DOC')) THEN
  begin
    query = 'ALTER TABLE TA_TIERS ADD ID_T_TVA_DOC DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    query = 'ALTER TABLE TA_TIERS ADD FOREIGN KEY (ID_T_TVA_DOC) REFERENCES TA_T_TVA_DOC (ID_T_TVA_DOC)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE02
^
drop procedure GESTION_ALTER_TABLE02
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE3
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_INFO_JURIDIQUE')) THEN
  begin
    query='CREATE TABLE TA_INFO_JURIDIQUE (
    ID_INFO_JURIDIQUE           DID3 NOT NULL,
    SIRET_INFO_JURIDIQUE        DLIB100,
    CAPITAL_INFO_JURIDIQUE      DLIB100,
    APE_INFO_JURIDIQUE          DLIB100,
    RCS_INFO_JURIDIQUE          DLIB100,
    QUI_CREE_INFO_JURIDIQUE     DLIB50,
    QUAND_CREE_INFO_JURIDIQUE   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_INFO_JURIDIQUE    DLIB50,
    QUAND_MODIF_INFO_JURIDIQUE  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                   NUM_VERSION,
    IP_ACCES                    DLIB50NN DEFAULT 0,
    VERSION_OBJ                 INTEGER
    )';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_INFO_JURIDIQUE ADD PRIMARY KEY (ID_INFO_JURIDIQUE)';
    EXECUTE STATEMENT :query;

  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE3
^
drop procedure GESTION_CREATION_TABLE3
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR3
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_INFO_JURIDIQUE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_INFO_JURIDIQUE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_INFO_JURIDIQUE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR3
^
drop procedure GESTION_CREATION_GENERATOR3
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE03
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_TIERS' and  a.RDB$FIELD_NAME ='ID_INFO_JURIDIQUE')) THEN
  begin
    query = 'ALTER TABLE TA_TIERS ADD ID_INFO_JURIDIQUE DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    query = 'ALTER TABLE TA_TIERS ADD FOREIGN KEY (ID_INFO_JURIDIQUE) REFERENCES TA_INFO_JURIDIQUE (ID_INFO_JURIDIQUE)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE03
^
drop procedure GESTION_ALTER_TABLE03
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE04
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_INFO_ENTREPRISE' and  a.RDB$FIELD_NAME ='ID_TIERS')) THEN
  begin
    query = 'ALTER TABLE TA_INFO_ENTREPRISE ADD ID_TIERS DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    query = 'ALTER TABLE TA_INFO_ENTREPRISE ADD FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE04
^
drop procedure GESTION_ALTER_TABLE04
^






CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE07
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_INFO_ENTREPRISE' and  a.RDB$FIELD_NAME ='DATEDEB_REG_INFO_ENTREPRISE')) THEN
  begin
    query = 'ALTER TABLE TA_INFO_ENTREPRISE ADD DATEDEB_REG_INFO_ENTREPRISE DATE_LGR';
    EXECUTE STATEMENT :query;
  end
  
  IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_INFO_ENTREPRISE' and  a.RDB$FIELD_NAME ='DATEDEB_REL_INFO_ENTREPRISE')) THEN
  begin
    query = 'ALTER TABLE TA_INFO_ENTREPRISE ADD DATEDEB_REL_INFO_ENTREPRISE DATE_LGR';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE07
^
drop procedure GESTION_ALTER_TABLE07
^




CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE08
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
query = 'ALTER TABLE TA_INFO_ENTREPRISE ALTER VILLE_INFO_ENTREPRISE TYPE DLIB100';
EXECUTE STATEMENT :query;
    
query = 'ALTER TABLE TA_INFO_ENTREPRISE ALTER PAYS_INFO_ENTREPRISE TYPE DLIB100';
EXECUTE STATEMENT :query;
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE08
^
drop procedure GESTION_ALTER_TABLE08
^

CREATE OR ALTER TRIGGER TBU_TA_INFO_ENTREPRISE FOR TA_INFO_ENTREPRISE
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   New.CODEPOSTAL_INFO_ENTREPRISE = Upper(New.CODEPOSTAL_INFO_ENTREPRISE);
   New.VILLE_INFO_ENTREPRISE = Upper(New.VILLE_INFO_ENTREPRISE);
   New.PAYS_INFO_ENTREPRISE = Upper(New.PAYS_INFO_ENTREPRISE);
   New.CODEXO_INFO_ENTREPRISE = Upper(New.CODEXO_INFO_ENTREPRISE);
   new.QUI_MODIF_INFO_ENTREPRISE = USER;
   new.QUAND_MODIF_INFO_ENTREPRISE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^
CREATE OR ALTER TRIGGER TBI_TA_INFO_ENTREPRISE FOR TA_INFO_ENTREPRISE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_INFO_ENTREPRISE is null) Then
      New.ID_INFO_ENTREPRISE = GEN_ID(NUM_ID_INFO_ENTREPRISE,1);
   New.CODEPOSTAL_INFO_ENTREPRISE = Upper(New.CODEPOSTAL_INFO_ENTREPRISE);
   New.VILLE_INFO_ENTREPRISE = Upper(New.VILLE_INFO_ENTREPRISE);
   New.PAYS_INFO_ENTREPRISE = Upper(New.PAYS_INFO_ENTREPRISE);
   New.CODEXO_INFO_ENTREPRISE = Upper(New.CODEXO_INFO_ENTREPRISE);
   New.QUI_CREE_INFO_ENTREPRISE = USER;
   new.QUAND_CREE_INFO_ENTREPRISE = 'NOW';
   new.QUI_MODIF_INFO_ENTREPRISE = USER;
   new.QUAND_MODIF_INFO_ENTREPRISE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^
/* Trigger: TBI_TA_INFO_JURIDIQUE */
CREATE or ALTER TRIGGER TBI_TA_INFO_JURIDIQUE FOR TA_INFO_JURIDIQUE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_INFO_JURIDIQUE is null) Then
      New.ID_INFO_JURIDIQUE = GEN_ID(NUM_ID_INFO_JURIDIQUE,1);
   New.QUI_CREE_INFO_JURIDIQUE = USER;
   new.QUAND_CREE_INFO_JURIDIQUE = 'NOW';
   new.QUI_MODIF_INFO_JURIDIQUE = USER;
   new.QUAND_MODIF_INFO_JURIDIQUE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBU_TA_INFO_JURIDIQUE */
CREATE or ALTER TRIGGER TBU_TA_INFO_JURIDIQUE FOR TA_INFO_JURIDIQUE
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF_INFO_JURIDIQUE = USER;
   new.QUAND_MODIF_INFO_JURIDIQUE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^




CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR4
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_RELANCE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_RELANCE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_RELANCE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR4
^
drop procedure GESTION_CREATION_GENERATOR4
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR5
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_RELANCE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_RELANCE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_RELANCE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR5
^
drop procedure GESTION_CREATION_GENERATOR5
^



CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR6
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_L_RELANCE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_L_RELANCE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_L_RELANCE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR6
^
drop procedure GESTION_CREATION_GENERATOR6
^





CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR7
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_PRELEVEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_PRELEVEMENT;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_PRELEVEMENT TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR7
^
drop procedure GESTION_CREATION_GENERATOR7
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR8
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_L_PRELEVEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_L_PRELEVEMENT;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_L_PRELEVEMENT TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR8
^
drop procedure GESTION_CREATION_GENERATOR8
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR9
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_INFOS_PRELEVEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_INFOS_PRELEVEMENT;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_INFOS_PRELEVEMENT TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR9
^
drop procedure GESTION_CREATION_GENERATOR9
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE9
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_T_RELANCE')) THEN
  begin
    query='CREATE TABLE TA_T_RELANCE (
    ID_T_RELANCE            DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_T_RELANCE          DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    LIBELLE_T_RELANCE       DLIB100 /* DLIB100 = VARCHAR(100) */,
    CHEMIN_CORRESP_RELANCE  DLIB255 /* DLIB255 = VARCHAR(255) */,
    CHEMIN_MODEL_RELANCE    DLIB255 /* DLIB255 = VARCHAR(255) */,
    ORDRE_T_RELANCE         DID3 /* DID3 = INTEGER NOT NULL */,
    ACTIF                   DBOOL /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    DEFAUT                  DBOOL /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    TYPE_LOGICIEL           DLIB20 NOT NULL /* DLIB20 = VARCHAR(20) */,
    QUI_CREE_T_RELANCE      DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_T_RELANCE    TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_T_RELANCE     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_T_RELANCE   TIMESTAMP DEFAULT ''NOW'',
    "VERSION"               NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ             INTEGER
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_T_RELANCE ADD CONSTRAINT UNQ1_TA_T_RELANCE UNIQUE (CODE_T_RELANCE)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_T_RELANCE ADD PRIMARY KEY (ID_T_RELANCE)';
    EXECUTE STATEMENT :query;

    query='CREATE INDEX TA_T_RELANCE_CODE ON TA_T_RELANCE (CODE_T_RELANCE)';
    EXECUTE STATEMENT :query;

  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE9
^
drop procedure GESTION_CREATION_TABLE9
^
CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE7
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_RELANCE')) THEN
  begin
    query='CREATE TABLE TA_RELANCE (
    ID_RELANCE    INTEGER NOT NULL,
    CODE_RELANCE  DLGR_LIBCODE /* DLGR_LIBCODE = VARCHAR(100) NOT NULL */,
    DATE_RELANCE  TIMESTAMP DEFAULT ''NOW'',
    DATE_DEBUT    DATE,
    DATE_FIN      DATE,
    CODE_TIERS    DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    ETAT          BIGINT,
    QUI_CREE      DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE    TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF   TIMESTAMP DEFAULT ''NOW'',
    "VERSION"     NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES      DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ   INTEGER
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_RELANCE ADD CONSTRAINT UNQ1_TA_RELANCE UNIQUE (CODE_RELANCE)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_RELANCE ADD CONSTRAINT PK_TA_RELANCE PRIMARY KEY (ID_RELANCE)';
    EXECUTE STATEMENT :query;

  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE7
^
drop procedure GESTION_CREATION_TABLE7
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE8
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_L_RELANCE')) THEN
  begin
    query='CREATE TABLE TA_L_RELANCE (
    ID_L_RELANCE    INTEGER NOT NULL,
    ID_RELANCE      DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_DOCUMENT   DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    CODE_TIERS      DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    NOM_TIERS       DLGR_LIB /* DLGR_LIB = VARCHAR(100) NOT NULL */,
    TYPE_DOCUMENT   DLGR_LIBCODE /* DLGR_LIBCODE = VARCHAR(100) NOT NULL */,
    NET_TTC         DID9 /* DID9 = NUMERIC(15,2) NOT NULL */,
    RESTE_A_REGLER  DID9 /* DID9 = NUMERIC(15,2) NOT NULL */,
    DATE_ECHEANCE   DATE,
    ID_T_RELANCE    DID3 /* DID3 = INTEGER NOT NULL */,
    ETAT            BIGINT,
    QUI_CREE        DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE      TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF       DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF     TIMESTAMP DEFAULT ''NOW'',
    "VERSION"       NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES        DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ     INTEGER
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_L_RELANCE ADD CONSTRAINT PK_TA_L_RELANCE PRIMARY KEY (ID_L_RELANCE)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_L_RELANCE ADD FOREIGN KEY (ID_RELANCE) REFERENCES TA_RELANCE (ID_RELANCE)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_L_RELANCE ADD FOREIGN KEY (ID_T_RELANCE) REFERENCES TA_T_RELANCE (ID_T_RELANCE)';
    EXECUTE STATEMENT :query;

  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE8
^
drop procedure GESTION_CREATION_TABLE8
^



CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE10
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_PARAM_PUBLIPOSTAGE')) THEN
  begin
    query='CREATE TABLE TA_PARAM_PUBLIPOSTAGE (
    ID                     DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    LOGICIEL_PUBLIPOSTAGE  DLIB100 /* DLIB100 = VARCHAR(100) */,
    EXTENSION              DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUI_CREE               DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE             TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF              DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF            TIMESTAMP DEFAULT ''NOW'',
    IP_ACCES               DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    VERSION_OBJ            INTEGER,
    "VERSION"              NUM_VERSION /* NUM_VERSION = VARCHAR(20) */
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_PARAM_PUBLIPOSTAGE ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;
    
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE10
^
drop procedure GESTION_CREATION_TABLE10
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE11
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_PRELEVEMENT')) THEN
  begin
    query='CREATE TABLE TA_PRELEVEMENT (
    ID_DOCUMENT                  DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_DOCUMENT                DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    DATE_DOCUMENT                DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DATE_ECH_DOCUMENT            DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DATE_LIV_DOCUMENT            DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    LIBELLE_DOCUMENT             DLIB255NN /* DLIB255NN = VARCHAR(255) NOT NULL */,
    ID_TIERS                     DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_PAIEMENT                DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    REGLE_DOCUMENT               DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    REM_HT_DOCUMENT              DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    TX_REM_HT_DOCUMENT           DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    REM_TTC_DOCUMENT             DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    TX_REM_TTC_DOCUMENT          DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    NB_E_DOCUMENT                DID_FACULTATIF DEFAULT 0 /* DID_FACULTATIF = INTEGER */,
    TTC                          DBOOL DEFAULT 0 /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    EXPORT                       DBOOL DEFAULT 0 /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    COMMENTAIRE                  DLIB_COMMENTAIRE /* DLIB_COMMENTAIRE = VARCHAR(2000) */,
    MT_TTC_CALC                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_HT_CALC                   DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TVA_CALC                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_TTC_CALC                 DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_HT_CALC                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_TVA_CALC                 DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_A_PAYER                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_AVT_REM_GLOBALE_CALC  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QUI_CREE_DOCUMENT            DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_DOCUMENT          TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_DOCUMENT           DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_DOCUMENT         TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                    NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                     DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ                  INTEGER
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_PRELEVEMENT ADD CONSTRAINT UNQ1_TA_PRELEVEMENT UNIQUE (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_PRELEVEMENT ADD PRIMARY KEY (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_PRELEVEMENT ADD FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_PRELEVEMENT ADD FOREIGN KEY (ID_T_PAIEMENT) REFERENCES TA_T_PAIEMENT (ID_T_PAIEMENT)';
    EXECUTE STATEMENT :query;
    
    query='CREATE INDEX TA_PRELEVEMENT_CODE ON TA_PRELEVEMENT (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;

    query='CREATE INDEX TA_PRELEVEMENT_ID_TIERS ON TA_PRELEVEMENT (ID_TIERS)';
    EXECUTE STATEMENT :query;
    
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE11
^
drop procedure GESTION_CREATION_TABLE11
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE12
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_L_PRELEVEMENT')) THEN
  begin
    query='CREATE TABLE TA_L_PRELEVEMENT (
    ID_L_DOCUMENT           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_DOCUMENT             DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_LIGNE              DID3 /* DID3 = INTEGER NOT NULL */,
    ID_ARTICLE              DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    NUM_LIGNE_L_DOCUMENT    DID3 /* DID3 = INTEGER NOT NULL */,
    LIB_L_DOCUMENT          DLIB255 /* DLIB255 = VARCHAR(255) */,
    QTE_L_DOCUMENT          DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QTE2_L_DOCUMENT         DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    U1_L_DOCUMENT           DLIB20 /* DLIB20 = VARCHAR(20) */,
    U2_L_DOCUMENT           DLIB20 /* DLIB20 = VARCHAR(20) */,
    PRIX_U_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    TAUX_TVA_L_DOCUMENT     DLONG /* DLONG = NUMERIC(15,4) */,
    COMPTE_L_DOCUMENT       DLIB8 /* DLIB8 = VARCHAR(8) */,
    CODE_TVA_L_DOCUMENT     DLIB20 /* DLIB20 = VARCHAR(20) */,
    CODE_T_TVA_L_DOCUMENT   DLIB1L /* DLIB1L = VARCHAR(1) */,
    MT_HT_L_DOCUMENT        DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    REM_TX_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    REM_HT_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_HT_APR_REM_GLOBALE   DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_APR_REM_GLOBALE  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QUI_CREE_L_DOCUMENT     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_L_DOCUMENT   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_L_DOCUMENT    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_L_DOCUMENT  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"               NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ             INTEGER
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_L_PRELEVEMENT ADD PRIMARY KEY (ID_L_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_L_PRELEVEMENT ADD FOREIGN KEY (ID_DOCUMENT) REFERENCES TA_PRELEVEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;


    query='ALTER TABLE TA_L_PRELEVEMENT ADD FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_L_PRELEVEMENT ADD FOREIGN KEY (ID_T_LIGNE) REFERENCES TA_T_LIGNE (ID_T_LIGNE)';
    EXECUTE STATEMENT :query;

    query='CREATE INDEX TA_L_PRELEVEMENT_ID_PRELEVEMENT ON TA_L_PRELEVEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;

    query='CREATE INDEX TA_L_PRELEVEMENT_ID_T_LIGNE ON TA_L_PRELEVEMENT (ID_T_LIGNE)';
    EXECUTE STATEMENT :query;

  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE12
^
drop procedure GESTION_CREATION_TABLE12
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE13
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_INFOS_PRELEVEMENT')) THEN
  begin
    query='CREATE TABLE TA_INFOS_PRELEVEMENT (
    ID_INFOS_DOCUMENT           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_DOCUMENT                 DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ADRESSE1                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE2                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE3                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    CODEPOSTAL                  DCODPOS /* DCODPOS = VARCHAR(25) */,
    VILLE                       DLIB100 /* DLIB100 = VARCHAR(100) */,
    PAYS                        DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE1_LIV                DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE2_LIV                DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE3_LIV                DLIB100 /* DLIB100 = VARCHAR(100) */,
    CODEPOSTAL_LIV              DCODPOS /* DCODPOS = VARCHAR(25) */,
    VILLE_LIV                   DLIB100 /* DLIB100 = VARCHAR(100) */,
    PAYS_LIV                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    CODE_COMPTA                 DLIB8NN /* DLIB8NN = VARCHAR(8) NOT NULL */,
    COMPTE                      DLIB8NN /* DLIB8NN = VARCHAR(8) NOT NULL */,
    NOM_TIERS                   DLIB100 /* DLIB100 = VARCHAR(100) */,
    PRENOM_TIERS                DLIB100 /* DLIB100 = VARCHAR(100) */,
    SURNOM_TIERS                DLIB20 /* DLIB20 = VARCHAR(20) */,
    CODE_T_CIVILITE             DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    CODE_T_ENTITE               DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    TVA_I_COM_COMPL             DLIB50 /* DLIB50 = VARCHAR(50) */,
    CODE_C_PAIEMENT             DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    LIB_C_PAIEMENT              DLIB255 /* DLIB255 = VARCHAR(255) */,
    REPORT_C_PAIEMENT           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    FIN_MOIS_C_PAIEMENT         DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    LIBL_ENTREPRISE             DLIB100 /* DLIB100 = VARCHAR(100) */,
    NOM_ENTREPRISE              DLIB100 /* DLIB100 = VARCHAR(100) */,
    QUI_CREE_INFOS_DOCUMENT     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_INFOS_DOCUMENT   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_INFOS_DOCUMENT    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_INFOS_DOCUMENT  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                   NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                    DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ                 INTEGER
)
';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_INFOS_PRELEVEMENT ADD PRIMARY KEY (ID_INFOS_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_INFOS_PRELEVEMENT ADD FOREIGN KEY (ID_DOCUMENT) REFERENCES TA_PRELEVEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query='CREATE INDEX TA_INFOS_PREL_ID_PRELEVEMENT ON TA_INFOS_PRELEVEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE13
^
drop procedure GESTION_CREATION_TABLE13
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE05
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_DOCUMENT' and  a.RDB$FIELD_NAME ='ID_ACOMPTE')) THEN
  begin
    query = 'ALTER TABLE TA_R_DOCUMENT ADD ID_ACOMPTE DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    query = 'ALTER TABLE TA_R_DOCUMENT ADD FOREIGN KEY (ID_ACOMPTE) REFERENCES TA_ACOMPTE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
  end
  
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_DOCUMENT' and  a.RDB$FIELD_NAME ='ID_REGLEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_R_DOCUMENT ADD ID_REGLEMENT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    query = 'ALTER TABLE TA_R_DOCUMENT ADD FOREIGN KEY (ID_REGLEMENT) REFERENCES TA_REGLEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
  end  
  
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_DOCUMENT' and  a.RDB$FIELD_NAME ='ID_PRELEVEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_R_DOCUMENT ADD ID_PRELEVEMENT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    query = 'ALTER TABLE TA_R_DOCUMENT ADD FOREIGN KEY (ID_PRELEVEMENT) REFERENCES TA_PRELEVEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
  end   
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE05
^
drop procedure GESTION_ALTER_TABLE05
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE_R_ACOMPTE
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_ACOMPTE' and  a.RDB$FIELD_NAME ='ID_PRELEVEMENT')) THEN
  begin
    query = 'ALTER TABLE TA_R_ACOMPTE ADD ID_PRELEVEMENT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    query = 'ALTER TABLE TA_R_ACOMPTE ADD FOREIGN KEY (ID_PRELEVEMENT) REFERENCES TA_PRELEVEMENT (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
  end
     
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE_R_ACOMPTE
^
drop procedure GESTION_ALTER_TABLE_R_ACOMPTE
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR10
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_PARAM_DOS_INTEL')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_PARAM_DOS_INTEL;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_PARAM_DOS_INTEL TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR10
^
drop procedure GESTION_CREATION_GENERATOR10
^


CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR11
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_PARAM_DOSS_INTEL')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_PARAM_DOSS_INTEL;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_PARAM_DOSS_INTEL TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR11
^
drop procedure GESTION_CREATION_GENERATOR11
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR12
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_TYPE_DONNEE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_TYPE_DONNEE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_TYPE_DONNEE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR12
^
drop procedure GESTION_CREATION_GENERATOR12
^





CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE16
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_TYPE_DONNEE')) THEN
  begin
    query='CREATE TABLE TA_TYPE_DONNEE (
    ID           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    TYPE_DONNEE  DLIB50NN /* DLIB50NN = VARCHAR(50) NOT NULL */,
    QUI_CREE     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF  TIMESTAMP DEFAULT ''NOW'',
    IP_ACCES     DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    VERSION_OBJ  INTEGER,
    "VERSION"    NUM_VERSION /* NUM_VERSION = VARCHAR(20) */
)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_TYPE_DONNEE ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;
    
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE16
^
drop procedure GESTION_CREATION_TABLE16
^



CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE15
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_PARAM_DOSSIER_INTELLIGENT')) THEN
  begin
    query='CREATE TABLE TA_PARAM_DOSSIER_INTELLIGENT (
    ID           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    MOT          DLIB50NN NOT NULL /* DLIB50NN = VARCHAR(50) NOT NULL */,
    SQL          DLIB50 /* DLIB50 = VARCHAR(50) */,
    NB_ZONES     DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    QUI_CREE     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF  TIMESTAMP DEFAULT ''NOW'',
    IP_ACCES     DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    VERSION_OBJ  INTEGER,
    "VERSION"    NUM_VERSION /* NUM_VERSION = VARCHAR(20) */
)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_PARAM_DOSSIER_INTELLIGENT ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;
    
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE15
^
drop procedure GESTION_CREATION_TABLE15
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE14
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_PARAM_DOS_INTEL')) THEN
  begin
    query='CREATE TABLE TA_R_PARAM_DOS_INTEL (
    ID              INTEGER NOT NULL,
    ID_PARAM        DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_TYPE_DONNEE  DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    QUI_CREE        DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE      TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF       DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF     TIMESTAMP DEFAULT ''NOW'',
    "VERSION"       NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES        DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ     INTEGER
)';
    EXECUTE STATEMENT :query;

    query='ALTER TABLE TA_R_PARAM_DOS_INTEL ADD CONSTRAINT PK_TA_R_PARAM_DOS_INTEL PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_R_PARAM_DOS_INTEL ADD CONSTRAINT FK_TA_R_PARAM_DOS_INTEL_1 FOREIGN KEY (ID_PARAM) REFERENCES TA_PARAM_DOSSIER_INTELLIGENT (ID)';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_R_PARAM_DOS_INTEL ADD CONSTRAINT FK_TA_R_PARAM_DOS_INTEL_2 FOREIGN KEY (ID_TYPE_DONNEE) REFERENCES TA_TYPE_DONNEE (ID)';
    EXECUTE STATEMENT :query;
    
  end 
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE14
^
drop procedure GESTION_CREATION_TABLE14
^






/* Trigger: TBI_RELANCE */
CREATE OR ALTER TRIGGER TBI_RELANCE FOR TA_RELANCE
ACTIVE BEFORE INSERT POSITION 2
as
begin
   If (New.ID_RELANCE  is null) Then
      New.ID_RELANCE  = GEN_ID(num_id_RELANCE,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_RELANCE */
CREATE OR ALTER TRIGGER TBU_RELANCE FOR TA_RELANCE
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBI_L_RELANCE */
CREATE OR ALTER TRIGGER TBI_L_RELANCE FOR TA_L_RELANCE
ACTIVE BEFORE INSERT POSITION 2
as
begin
   If (New.ID_L_RELANCE  is null) Then
      New.ID_L_RELANCE  = GEN_ID(num_id_L_RELANCE,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_L_RELANCE */
CREATE OR ALTER TRIGGER TBU_L_RELANCE FOR TA_L_RELANCE
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBI_TA_T_RELANCE */
CREATE OR ALTER TRIGGER TBI_TA_T_RELANCE FOR TA_T_RELANCE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_T_RELANCE is null) Then
      New.ID_T_RELANCE = GEN_ID(NUM_ID_T_RELANCE,1);
   New.CODE_T_RELANCE = Upper(New.CODE_T_RELANCE);
   New.QUI_CREE_T_RELANCE = USER;
   new.QUAND_CREE_T_RELANCE = 'NOW';
   new.QUI_MODIF_T_RELANCE = USER;
   new.QUAND_MODIF_T_RELANCE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_TA_T_RELANCE */
CREATE OR ALTER TRIGGER TBU_TA_T_RELANCE FOR TA_T_RELANCE
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   New.CODE_T_RELANCE = Upper(New.CODE_T_RELANCE);
   new.QUI_MODIF_T_RELANCE = USER;
   new.QUAND_MODIF_T_RELANCE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBI_TA_PARAM_PUBLIPOSTAGE */
CREATE OR ALTER TRIGGER TBI_TA_PARAM_PUBLIPOSTAGE FOR TA_PARAM_PUBLIPOSTAGE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
end
^


/* Trigger: TBU_TA_PARAM_PUBLIPOSTAGE */
CREATE OR ALTER TRIGGER TBU_TA_PARAM_PUBLIPOSTAGE FOR TA_PARAM_PUBLIPOSTAGE
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
end
^



/* Trigger: TBDID_PRELEVEMENT_ETRANGER */
CREATE OR ALTER TRIGGER TBDID_PRELEVEMENT_ETRANGER FOR TA_PRELEVEMENT
ACTIVE AFTER DELETE POSITION 1
as
begin
  delete from ta_l_PRELEVEMENT where id_DOCUMENT = old.id_DOCUMENT;
  delete from TA_COM_DOC where ID_DOCUMENT = old.ID_DOCUMENT;
  delete from ta_infos_PRELEVEMENT where id_DOCUMENT = old.id_DOCUMENT;
  delete from ta_r_document where id_PRELEVEMENT = old.id_DOCUMENT; 
end
^


/* Trigger: TBI_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBI_PRELEVEMENT FOR TA_PRELEVEMENT
ACTIVE BEFORE INSERT POSITION 2
as
begin
  /* If (New.ID_DOCUMENT  is null) Then
      New.ID_DOCUMENT  = GEN_ID(NUM_ID_PRELEVEMENT,1);*/
   New.CODE_DOCUMENT = Upper(New.CODE_DOCUMENT);
   New.QUI_CREE_DOCUMENT  = USER;
   New.QUAND_CREE_DOCUMENT = 'NOW';
   New.QUI_MODIF_DOCUMENT = USER;
   New.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBU_PRELEVEMENT FOR TA_PRELEVEMENT
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   New.CODE_DOCUMENT = Upper(New.CODE_DOCUMENT);
   new.QUI_MODIF_DOCUMENT = USER;
   new.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



/* Trigger: TBIID_ARTICLE_L_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBIID_ARTICLE_L_PRELEVEMENT FOR TA_L_PRELEVEMENT
ACTIVE BEFORE INSERT POSITION 1
as
DECLARE variable numrows integer;
declare variable typeligneH integer;
declare variable typeligneC integer;
declare variable commentaire integer;
begin
  /* E_XAKID_ARTICLE */
  select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'H' into :typeligneh;
    select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'C' into :typelignec;
      select f.id_famille from ta_famille f where f.code_famille like ('&&&') into commentaire;
   if (NEW.ID_ARTICLE is not null and new.id_t_ligne =:typeligneh ) then
       begin
     select count(*) from TA_ARTICLE
     where ID_ARTICLE= NEW.ID_ARTICLE
     into :numrows;
     if (numrows = 0) then
        exception E_XAKID_ARTICLE;
       end
   else if (new.id_t_ligne=:typelignec or (exists(
    select id_article from ta_article where id_famille=:commentaire  and ta_article.id_article = new.id_article)) ) then
     begin
        new.id_article=null;
        new.qte_l_DOCUMENT=null;
        new.u1_l_DOCUMENT=null;
        new.u2_l_DOCUMENT=null;
        new.prix_u_l_DOCUMENT=null;
        new.taux_tva_l_DOCUMENT=null;
        new.compte_l_DOCUMENT=null;
        new.code_tva_l_DOCUMENT=null;
        new.code_t_tva_l_DOCUMENT=null;
        new.mt_ht_l_DOCUMENT=null;
        new.mt_ttc_l_DOCUMENT=null;
        new.rem_tx_l_DOCUMENT=null;
        new.rem_ht_l_DOCUMENT=null;
     end
end
^


/* Trigger: TBI_L_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBI_L_PRELEVEMENT FOR TA_L_PRELEVEMENT
ACTIVE BEFORE INSERT POSITION 2
as
begin

   New.QUI_CREE_L_DOCUMENT  = USER;
   New.QUAND_CREE_L_DOCUMENT = 'NOW';
   New.QUI_MODIF_L_DOCUMENT = USER;
   New.QUAND_MODIF_L_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBUID_ARTICLE_L_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBUID_ARTICLE_L_PRELEVEMENT FOR TA_L_PRELEVEMENT
ACTIVE BEFORE UPDATE POSITION 1
as
DECLARE variable numrows integer;
declare variable typeligneH integer;
declare variable typeligneC integer;
declare variable commentaire integer;
begin
  /* E_XAKID_ARTICLE */
  select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'H' into :typeligneh;
    select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'C' into :typelignec;
      select f.id_famille from ta_famille f where f.code_famille like ('&&&') into commentaire;
   if (NEW.ID_ARTICLE is not null and new.id_t_ligne =:typeligneh ) then
       begin
     select count(*) from TA_ARTICLE
     where ID_ARTICLE= NEW.ID_ARTICLE
     into :numrows;
     if (numrows = 0) then
        exception E_XAKID_ARTICLE;
       end
   else if (new.id_t_ligne=:typelignec or (exists(
    select id_article from ta_article where id_famille=:commentaire  and ta_article.id_article = new.id_article)) ) then
     begin
        new.id_article=null;
        new.qte_l_DOCUMENT=null;
        new.u1_l_DOCUMENT=null;
        new.u2_l_DOCUMENT=null;
        new.prix_u_l_DOCUMENT=null;
        new.taux_tva_l_DOCUMENT=null;
        new.compte_l_DOCUMENT=null;
        new.code_tva_l_DOCUMENT=null;
        new.code_t_tva_l_DOCUMENT=null;
        new.mt_ht_l_DOCUMENT=null;
        new.mt_ttc_l_DOCUMENT=null;
        new.rem_tx_l_DOCUMENT=null;
        new.rem_ht_l_DOCUMENT=null;
     end
end
^


/* Trigger: TBU_L_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBU_L_PRELEVEMENT FOR TA_L_PRELEVEMENT
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF_L_DOCUMENT = USER;
   new.QUAND_MODIF_L_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



/* Trigger: TBI_TA_INFOS_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBI_TA_INFOS_PRELEVEMENT FOR TA_INFOS_PRELEVEMENT
ACTIVE BEFORE INSERT POSITION 0
as
begin

   New.QUI_CREE_INFOS_DOCUMENT = USER;
   new.QUAND_CREE_INFOS_DOCUMENT = 'NOW';
   new.QUI_MODIF_INFOS_DOCUMENT = USER;
   new.QUAND_MODIF_INFOS_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_TA_INFOS_PRELEVEMENT */
CREATE OR ALTER TRIGGER TBU_TA_INFOS_PRELEVEMENT FOR TA_INFOS_PRELEVEMENT
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   new.QUI_MODIF_INFOS_DOCUMENT = USER;
   new.QUAND_MODIF_INFOS_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE OR ALTER TRIGGER TBDID_REGLEMENT_ETRANGER FOR TA_REGLEMENT
ACTIVE AFTER DELETE POSITION 1
as
begin
  delete from ta_r_document where id_REGLEMENT = old.id_DOCUMENT;
  delete from ta_r_REGLEMENT where id_REGLEMENT = old.id_DOCUMENT;
end
^


/* Trigger: TBI_DOSSIER_INTELLIGENT */
CREATE OR ALTER TRIGGER TBI_DOSSIER_INTELLIGENT FOR TA_PARAM_DOSSIER_INTELLIGENT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(num_id_param_doss_intel,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
end
^


/* Trigger: TBU_DOSSIER_INTELLIGENT */
CREATE OR ALTER TRIGGER TBU_DOSSIER_INTELLIGENT FOR TA_PARAM_DOSSIER_INTELLIGENT
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
end
^


/* Trigger: TBI_TYPE_DONNEE */
CREATE OR ALTER TRIGGER TBI_TYPE_DONNEE FOR TA_TYPE_DONNEE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(num_id_type_donnee,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
end
^


/* Trigger: TBU_TYPE_DONNEE */
CREATE OR ALTER TRIGGER TBU_TYPE_DONNEE FOR TA_TYPE_DONNEE
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
end
^


/* Trigger: TBI_R_PARAM_DOS_INTEL */
CREATE OR ALTER TRIGGER TBI_R_PARAM_DOS_INTEL FOR TA_R_PARAM_DOS_INTEL
ACTIVE BEFORE INSERT POSITION 2
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(NUM_ID_R_PARAM_DOS_INTEL,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_R_PARAM_DOS_INTEL */
CREATE OR ALTER TRIGGER TBU_R_PARAM_DOS_INTEL FOR TA_R_PARAM_DOS_INTEL
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES=current_connection;
   select num_version from ta_version into new."VERSION";
end
^
