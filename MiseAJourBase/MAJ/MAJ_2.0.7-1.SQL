
CREATE or ALTER  PROCEDURE GESTION_INSERTION_DECADE
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_PARAM_CREE_DOC_TIERS' and  a.RDB$FIELD_NAME ='DECADE')) THEN
  begin
    query = 'ALTER TABLE TA_PARAM_CREE_DOC_TIERS ADD DECADE DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query; 
  end
    
END
^
EXECUTE PROCEDURE GESTION_INSERTION_DECADE
^
drop procedure GESTION_INSERTION_DECADE
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR1
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_ETAT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_ETAT';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_ETAT TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR1 
^
drop procedure GESTION_CREATION_GENERATOR1
^

CREATE or ALTER  PROCEDURE CREATION_TABLE_1
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_ETAT')) THEN
  begin
    query = 'CREATE TABLE TA_ETAT (
    ID_ETAT					    DID3 NOT NULL ,
    CODE_ETAT                   DLGR_CODE ,
    LIBELLE_ETAT                DLIB255 ,
    QUI_CREE                    DLIB50 ,
    QUAND_CREE                  TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF                   DLIB50 ,
    QUAND_MODIF                 TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                   NUM_VERSION ,
    IP_ACCES                    DLIB50NN DEFAULT 0 ,
    VERSION_OBJ                 INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ETAT ADD PRIMARY KEY (ID_ETAT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ETAT ADD CONSTRAINT UNQ1_TA_ETAT UNIQUE (CODE_ETAT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_1
^
drop procedure CREATION_TABLE_1
^

CREATE OR ALTER TRIGGER TBI_TA_ETAT FOR TA_ETAT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_ETAT is null) Then
      New.ID_ETAT = GEN_ID(NUM_ID_ETAT,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE OR ALTER TRIGGER TBU_TA_ETAT FOR TA_ETAT
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_FACTURE
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_FACTURE' and  a.RDB$FIELD_NAME ='ID_ETAT')) THEN
  begin
    query = 'ALTER TABLE TA_FACTURE ADD ID_ETAT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_FACTURE ADD FOREIGN KEY (ID_ETAT) REFERENCES TA_ETAT (ID_ETAT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_FACTURE
^
drop procedure GESTION_ALTER_TA_FACTURE
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_DEVIS
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_DEVIS' and  a.RDB$FIELD_NAME ='ID_ETAT')) THEN
  begin
    query = 'ALTER TABLE TA_DEVIS ADD ID_ETAT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_DEVIS ADD FOREIGN KEY (ID_ETAT) REFERENCES TA_ETAT (ID_ETAT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_DEVIS
^
drop procedure GESTION_ALTER_TA_DEVIS
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_BONCDE
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_BONCDE' and  a.RDB$FIELD_NAME ='ID_ETAT')) THEN
  begin
    query = 'ALTER TABLE TA_BONCDE ADD ID_ETAT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_BONCDE ADD FOREIGN KEY (ID_ETAT) REFERENCES TA_ETAT (ID_ETAT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_BONCDE
^
drop procedure GESTION_ALTER_TA_BONCDE
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_PRELEVEMENT
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_PRELEVEMENT' and  a.RDB$FIELD_NAME ='ID_ETAT')) THEN
  begin
    query = 'ALTER TABLE TA_PRELEVEMENT ADD ID_ETAT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_PRELEVEMENT ADD FOREIGN KEY (ID_ETAT) REFERENCES TA_ETAT (ID_ETAT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_PRELEVEMENT
^
drop procedure GESTION_ALTER_TA_PRELEVEMENT
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_PROFORMA
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_PROFORMA' and  a.RDB$FIELD_NAME ='ID_ETAT')) THEN
  begin
    query = 'ALTER TABLE TA_PROFORMA ADD ID_ETAT DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_PROFORMA ADD FOREIGN KEY (ID_ETAT) REFERENCES TA_ETAT (ID_ETAT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_PROFORMA
^
drop procedure GESTION_ALTER_TA_PROFORMA
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_TIERS
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_TIERS' and  a.RDB$FIELD_NAME ='ID_COMMERCIAL')) THEN
  begin
    query = 'ALTER TABLE TA_TIERS ADD ID_COMMERCIAL DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_TIERS ADD FOREIGN KEY (ID_COMMERCIAL) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_TIERS
^
drop procedure GESTION_ALTER_TA_TIERS
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_TELEPHONE
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_TELEPHONE' and  a.RDB$FIELD_NAME ='COMM_COMMERCIAL')) THEN
  begin
    query = 'ALTER TABLE TA_TELEPHONE ADD COMM_COMMERCIAL DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_TELEPHONE ADD COMM_ADMINISTRATIF DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_TELEPHONE
^
drop procedure GESTION_ALTER_TA_TELEPHONE
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_EMAIL
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_EMAIL' and  a.RDB$FIELD_NAME ='COMM_COMMERCIAL')) THEN
  begin
    query = 'ALTER TABLE TA_EMAIL ADD COMM_COMMERCIAL DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_EMAIL ADD COMM_ADMINISTRATIF DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_EMAIL
^
drop procedure GESTION_ALTER_TA_EMAIL
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_ADRESSE
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ADRESSE' and  a.RDB$FIELD_NAME ='COMM_COMMERCIAL')) THEN
  begin
    query = 'ALTER TABLE TA_ADRESSE ADD COMM_COMMERCIAL DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ADRESSE ADD COMM_ADMINISTRATIF DBOOL DEFAULT 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_ADRESSE
^
drop procedure GESTION_ALTER_TA_ADRESSE
^



CREATE or ALTER  PROCEDURE CREATION_TABLE_2
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_TITRE_TRANSPORT')) THEN
  begin
    query = 'CREATE TABLE TA_TITRE_TRANSPORT (
    ID_TITRE_TRANSPORT   DID3 NOT NULL,
    CODE_TITRE_TRANSPORT DLGR_LIB,
    QUI_CREE    DLIB50,
    QUAND_CREE  TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF   DLIB50,
    QUAND_MODIF TIMESTAMP DEFAULT ''NOW'',
    "VERSION"          NUM_VERSION,
    IP_ACCES           DLIB50NN DEFAULT 0,
    VERSION_OBJ        INTEGER
	)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_TITRE_TRANSPORT ADD PRIMARY KEY (ID_TITRE_TRANSPORT)';
    EXECUTE STATEMENT :query;

  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_2
^
drop procedure CREATION_TABLE_2
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR_2
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_TITRE_TRANSPORT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_TITRE_TRANSPORT';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_TITRE_TRANSPORT TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR_2
^
drop procedure GESTION_CREATION_GENERATOR_2
^

CREATE OR ALTER TRIGGER TBI_TA_TITRE_TRANSPORT FOR TA_TITRE_TRANSPORT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_TITRE_TRANSPORT is null) Then
      New.ID_TITRE_TRANSPORT = GEN_ID(NUM_ID_TITRE_TRANSPORT,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_TITRE_TRANSPORT FOR TA_TITRE_TRANSPORT
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR3
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_ARTICLE';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_ARTICLE TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR3
^
drop procedure GESTION_CREATION_GENERATOR3
^

CREATE or ALTER  PROCEDURE CREATION_TABLE_3
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_T_ARTICLE')) THEN
  begin
    query = 'CREATE TABLE TA_T_ARTICLE (
    ID_T_ARTICLE           DID3 NOT NULL,
    CODE_T_ARTICLE         dlgr_libcode ,
    TYPES                  DLIB1  DEFAULT ''S'',
    QUI_CREE_T_ARTICLE     DLIB50,
    QUAND_CREE_T_ARTICLE   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_T_ARTICLE    DLIB50,
    QUAND_MODIF_T_ARTICLE  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"            NUM_VERSION,
    IP_ACCES             DLIB50NN DEFAULT 0,
    VERSION_OBJ          INTEGER
	)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_ARTICLE ADD PRIMARY KEY (ID_T_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_ARTICLE ADD CONSTRAINT UNQ1_TA_T_ARTICLE UNIQUE (CODE_T_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_T_ARTICLE_CODE ON TA_T_ARTICLE (CODE_T_ARTICLE)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_3
^
drop procedure CREATION_TABLE_3
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR4
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_T_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_T_ARTICLE';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_T_ARTICLE TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR4
^
drop procedure GESTION_CREATION_GENERATOR4
^

CREATE or ALTER  PROCEDURE CREATION_TABLE_4
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_T_ARTICLE')) THEN
  begin
    query = 'CREATE TABLE TA_R_T_ARTICLE (
    ID_R_T_ARTICLE  DID3 NOT NULL,
    ID_ARTICLE      DID_FACULTATIF,
    ID_T_ARTICLE    DID_FACULTATIF,
    QUI_CREE        DLIB50,
    QUAND_CREE      TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF       DLIB50,
    QUAND_MODIF     TIMESTAMP DEFAULT ''NOW'',
    "VERSION"       NUM_VERSION,
    IP_ACCES        DLIB50NN,
    VERSION_OBJ     INTEGER
	)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_T_ARTICLE ADD PRIMARY KEY (ID_R_T_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_T_ARTICLE ADD CONSTRAINT FK_TA_R_T_ARTICLE_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;
     
	query = 'ALTER TABLE TA_R_T_ARTICLE ADD CONSTRAINT FK_TA_R_T_ARTICLE_2 FOREIGN KEY (ID_T_ARTICLE) REFERENCES TA_T_ARTICLE (ID_T_ARTICLE)';
	EXECUTE STATEMENT :query;

  end
END
^
EXECUTE PROCEDURE CREATION_TABLE_4
^
drop procedure CREATION_TABLE_4
^

CREATE OR ALTER TRIGGER TBI_TA_T_ARTICLE FOR TA_T_ARTICLE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_T_ARTICLE is null) Then
      New.ID_T_ARTICLE = GEN_ID(NUM_ID_T_ARTICLE,1);
   New.QUI_CREE_T_ARTICLE = USER;
   new.QUAND_CREE_T_ARTICLE = 'NOW';
   new.QUI_MODIF_T_ARTICLE = USER;
   new.QUAND_MODIF_T_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_T_ARTICLE FOR TA_T_ARTICLE
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   new.QUI_MODIF_T_ARTICLE = USER;
   new.QUAND_MODIF_T_ARTICLE = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBI_TA_R_T_ARTICLE FOR TA_R_T_ARTICLE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_R_T_ARTICLE is null) Then
      New.ID_R_T_ARTICLE = GEN_ID(NUM_ID_R_T_ARTICLE,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_R_T_ARTICLE FOR TA_R_T_ARTICLE
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE or ALTER  PROCEDURE INSERTION_VISUALISATION1
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
    query ='';
    if(not exists(select * from TA_VISUALISATION where lower(CODE_REQUETE) like 'liste des règlements'))then
    begin
	 	query = 'INSERT INTO TA_VISUALISATION (ID, CODE_REQUETE, REQUETE, CHAMPS, TITRE_CHAMPS, TAILLE_CHAMPS, MODULE, IMPRESSION, IDENTIFIANT, ID_EDITEUR, ID_PLUGIN, CLAUSE_WHERE, GROUPBY, CLAUSE_HAVING, PROC, PARAM, TYPES_RETOUR, TOTAUX, QUERY_LANG, CLASSE_RECHERCHE) VALUES 
(gen_id(num_id_visualisation,1), ''CA commercial par année'', ''select
substring(a.codepostalAdresse,1,2),
extract(year from f.dateDocument),
(c.codeTiers)as commercial,
t.codeTiers,
t.nomTiers,
case when extract ( year from f.dateDocument) <= 2001 then  sum(f.netHtCalc/6.55957) else sum(f.netHtCalc) end,  
case when extract ( year from f.dateDocument) <= 2001 then  sum(f.netTvaCalc/6.55957) else sum(f.netTvaCalc) end,  
case when extract ( year from f.dateDocument) <= 2001 then  sum(f.netTtcCalc/6.55957 ) else sum(f.netTtcCalc) end  
from 
TaFacture f left join f.taTiers t  join t.taCommercial c left join t.taAdresse a'', ''substring(a.codepostalAdresse,1,2);extract(year from
f.dateDocument);c.codeTiers;t.codeTiers;t.nomTiers;case when extract ( year from f.dateDocument) <= 2001 then  sum(f.netHtCalc/6.55957)
else sum(f.netHtCalc) end!having;case when extract ( year from f.dateDocument) <= 2001 then  sum(f.netTvaCalc/6.55957)
else sum(f.netTvaCalc) end!having;case when extract ( year from f.dateDocument) <= 2001 then  sum(f.netTtcCalc/6.55957 )
else sum(f.netTtcCalc) end!having'', ''Département;Année;commercial;Code tiers;Nom tiers;HT;TVA;TTC'', ''100;100;100;100;100;100;100;100'', ''tiers'', ''aa'',
 ''t.codeTiers'', ''fr.legrain.tiers.editor.EditorTiers'', ''Tiers'', NULL, ''group by substring(a.codepostalAdresse,1,2)
,extract(year from f.dateDocument),c.codeTiers,t.codeTiers,t.nomTiers'', NULL, 0, NULL, ''s;i;s;s;s;f;f;f'', ''5;6;7'', ''JPQL'', '''')';
    	EXECUTE STATEMENT :query;
    end
    
END
^
EXECUTE PROCEDURE INSERTION_VISUALISATION1
^
drop procedure INSERTION_VISUALISATION1
^
