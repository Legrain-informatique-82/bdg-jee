
CREATE or ALTER  PROCEDURE CREATION_GEN_ABON
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_ABONNEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_ABONNEMENT';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_ABONNEMENT TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_ABON
^
drop procedure CREATION_GEN_ABON
^

CREATE or ALTER  PROCEDURE CREATION_GEN_AVIS
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_AVIS_ECHEANCE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_AVIS_ECHEANCE';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_AVIS_ECHEANCE TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_AVIS
^
drop procedure CREATION_GEN_AVIS
^

CREATE or ALTER  PROCEDURE CREATION_GEN_INFOS_AVIS
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_INFOS_AVIS_ECHEANCE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_INFOS_AVIS_ECHEANCE';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_INFOS_AVIS_ECHEANCE TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_INFOS_AVIS
^
drop procedure CREATION_GEN_INFOS_AVIS
^

CREATE or ALTER  PROCEDURE CREATION_GEN_L_AVIS
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_L_AVIS_ECHEANCE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_L_AVIS_ECHEANCE';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_L_AVIS_ECHEANCE TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_L_AVIS
^
drop procedure CREATION_GEN_L_AVIS
^

CREATE or ALTER  PROCEDURE CREATION_GEN_L_ECHEA
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_L_ECHEANCE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_L_ECHEANCE';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_L_ECHEANCE TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_L_ECHEA
^
drop procedure CREATION_GEN_L_ECHEA
^

CREATE or ALTER  PROCEDURE CREATION_GEN_R_T_SUPP
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_R_T_SUPPORT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_R_T_SUPPORT';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_R_T_SUPPORT TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_R_T_SUPP
^
drop procedure CREATION_GEN_R_T_SUPP
^

CREATE or ALTER  PROCEDURE CREATION_GEN_T_ABON
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_ABONNEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_ABONNEMENT';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_ABONNEMENT TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_T_ABON
^
drop procedure CREATION_GEN_T_ABON
^

CREATE or ALTER  PROCEDURE CREATION_GEN_SUPPORT
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_SUPPORT_ABON')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_SUPPORT_ABON';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_SUPPORT_ABON TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_SUPPORT
^
drop procedure CREATION_GEN_SUPPORT
^

CREATE or ALTER  PROCEDURE CREATION_GEN_T_SUPP
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_SUPPORT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_SUPPORT';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_SUPPORT TO 0';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREATION_GEN_T_SUPP
^
drop procedure CREATION_GEN_T_SUPP
^
 
 
/******************************************/
 
CREATE or ALTER  PROCEDURE CREA_TA_T_ABONNEMENT
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_T_ABONNEMENT')) THEN
  begin
    query = 'CREATE TABLE TA_T_ABONNEMENT (
    ID_T_ABONNEMENT           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_T_ABONNEMENT         DLGR_LIBCODE /* DLGR_LIBCODE = VARCHAR(100) NOT NULL */,
    DUREE                     DID4 NOT NULL /* DID4 = INTEGER */,
    TYPES                     DLIB1 DEFAULT ''S'' /* DLIB1 = VARCHAR(1) NOT NULL */,
    LIBELLE_TYPE              DLIB100 /* DLIB100 = VARCHAR(100) */,
    QUI_CREE_T_ABONNEMENT     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_T_ABONNEMENT   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_T_ABONNEMENT    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_T_ABONNEMENT  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                 NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                  DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ               INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_ABONNEMENT ADD CONSTRAINT UNQ1_TA_T_ABONNEMENT UNIQUE (CODE_T_ABONNEMENT, TYPES)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_T_ABONNEMENT ADD PRIMARY KEY (ID_T_ABONNEMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_T_ABONNEMENT_CODE ON TA_T_ABONNEMENT (CODE_T_ABONNEMENT)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREA_TA_T_ABONNEMENT 
^
drop procedure CREA_TA_T_ABONNEMENT
^


CREATE or ALTER  PROCEDURE CREA_TA_T_SUPPORT
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_T_SUPPORT')) THEN
  begin
    query = 'CREATE TABLE TA_T_SUPPORT (
    ID_T_SUPPORT           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_T_SUPPORT         DLGR_LIBCODE /* DLGR_LIBCODE = VARCHAR(100) NOT NULL */,
    TYPES                  DLIB1 DEFAULT ''S'' /* DLIB1 = VARCHAR(1) NOT NULL */,
    QUI_CREE_T_SUPPORT     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_T_SUPPORT   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_T_SUPPORT    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_T_SUPPORT  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"              NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES               DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ            INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_SUPPORT ADD CONSTRAINT UNQ1_TA_T_SUPPORT UNIQUE (CODE_T_SUPPORT, TYPES);';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_T_SUPPORT ADD PRIMARY KEY (ID_T_SUPPORT);';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_T_SUPPORT_CODE ON TA_T_SUPPORT (CODE_T_SUPPORT);';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE CREA_TA_T_SUPPORT 
^
drop procedure CREA_TA_T_SUPPORT
^

CREATE or ALTER  PROCEDURE CREA_TA_R_T_SUPPORT
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_R_T_SUPPORT')) THEN
  begin
    query = 'CREATE TABLE TA_R_T_SUPPORT (
    ID_R_T_SUPPORT         DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_ARTICLE             DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_SUPPORT           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_ABONNEMENT        DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_ARTICLE_ABONNEMENT  DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    QUI_CREE               DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE             TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF              DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF            TIMESTAMP DEFAULT ''NOW'',
    "VERSION"              NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES               DLIB50NN /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ            INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_T_SUPPORT ADD CONSTRAINT UNQ1_TA_R_T_SUPPORT UNIQUE (ID_ARTICLE, ID_T_SUPPORT, ID_T_ABONNEMENT);';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_R_T_SUPPORT ADD PRIMARY KEY (ID_R_T_SUPPORT);';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_R_T_SUPPORT ADD CONSTRAINT FK_TA_R_T_SUPPORT_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_R_T_SUPPORT ADD CONSTRAINT FK_TA_R_T_SUPPORT_2 FOREIGN KEY (ID_T_SUPPORT) REFERENCES TA_T_SUPPORT (ID_T_SUPPORT)';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_R_T_SUPPORT ADD CONSTRAINT FK_TA_R_T_SUPPORT_3 FOREIGN KEY (ID_T_ABONNEMENT) REFERENCES TA_T_ABONNEMENT (ID_T_ABONNEMENT)';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_R_T_SUPPORT ADD CONSTRAINT FK_TA_R_T_SUPPORT_4 FOREIGN KEY (ID_ARTICLE_ABONNEMENT) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;

  end
END
^
EXECUTE PROCEDURE CREA_TA_R_T_SUPPORT 
^
drop procedure CREA_TA_R_T_SUPPORT
^

CREATE or ALTER  PROCEDURE CREA_TA_SUPPORT_ABON
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_SUPPORT_ABON')) THEN
  begin
    query = 'CREATE TABLE TA_SUPPORT_ABON (
    ID_SUPPORT_ABON           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_SUPPORT_ABON         DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    DATE_ACQUISITION          DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    ID_ARTICLE                DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_TIERS                  DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_SUPPORT              DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    COMMENTAIRE               DLIB_COMMENTAIRE /* DLIB_COMMENTAIRE = VARCHAR(2000) */,
    LIBELLE                   DLIB100 /* DLIB100 = VARCHAR(100) */,
    COMMERCIAL                DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_L_DOCUMENT             DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    INACTIF                   DBOOL /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    QUI_MODIF_SUPPORT_ABON    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_SUPPORT_ABON  TIMESTAMP DEFAULT ''NOW'',
    QUI_CREE_SUPPORT_ABON     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_SUPPORT_ABON   TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                 NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                  DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ               INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_SUPPORT_ABON ADD CONSTRAINT UNQ1_TA_SUPPORT_ABON UNIQUE (CODE_SUPPORT_ABON)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_SUPPORT_ABON ADD PRIMARY KEY (ID_SUPPORT_ABON)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_SUPPORT_ABON ADD CONSTRAINT FK_TA_SUPPORT_ABON_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_SUPPORT_ABON ADD CONSTRAINT FK_TA_SUPPORT_ABON_2 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_SUPPORT_ABON ADD CONSTRAINT FK_TA_SUPPORT_ABON_3 FOREIGN KEY (COMMERCIAL) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_SUPPORT_ABON ADD CONSTRAINT FK_TA_SUPPORT_ABON_4 FOREIGN KEY (ID_L_DOCUMENT) REFERENCES TA_L_FACTURE (ID_L_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
        query = 'ALTER TABLE TA_SUPPORT_ABON ADD CONSTRAINT FK_TA_SUPPORT_ABON_5 FOREIGN KEY (ID_T_SUPPORT) REFERENCES TA_T_SUPPORT (ID_T_SUPPORT)';
    EXECUTE STATEMENT :query;

        query = 'CREATE INDEX TA_SUPPORT_ABON_CODE ON TA_SUPPORT_ABON (CODE_SUPPORT_ABON)';
    EXECUTE STATEMENT :query;
        
  end
END
^
EXECUTE PROCEDURE CREA_TA_SUPPORT_ABON 
^
drop procedure CREA_TA_SUPPORT_ABON
^


CREATE or ALTER  PROCEDURE CREA_TA_ABONNEMENT
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_ABONNEMENT')) THEN
  begin
    query = 'CREATE TABLE TA_ABONNEMENT (
    ID_ABONNEMENT           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    DATE_DEBUT              DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DATE_FIN                DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    COMMENTAIRE             DLIB_COMMENTAIRE /* DLIB_COMMENTAIRE = VARCHAR(2000) */,
    ID_ARTICLE              DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_TIERS                DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_ABONNEMENT         DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_SUPPORT_ABON         DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_L_FACTURE            DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ETAT                    INTEGER DEFAULT 0,
    QUI_MODIF_ABONNEMENT    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_ABONNEMENT  TIMESTAMP DEFAULT ''NOW'',
    QUI_CREE_ABONNEMENT     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_ABONNEMENT   TIMESTAMP DEFAULT ''NOW'',
    "VERSION"               NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ             INTEGER DEFAULT 0
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ABONNEMENT ADD PRIMARY KEY (ID_ABONNEMENT)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_ABONNEMENT ADD CONSTRAINT FK_TA_ABONNEMENT_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ABONNEMENT ADD CONSTRAINT FK_TA_ABONNEMENT_2 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_ABONNEMENT ADD CONSTRAINT FK_TA_ABONNEMENT_3 FOREIGN KEY (ID_SUPPORT_ABON) REFERENCES TA_SUPPORT_ABON (ID_SUPPORT_ABON)';
    EXECUTE STATEMENT :query; 
       
    query = 'ALTER TABLE TA_ABONNEMENT ADD CONSTRAINT FK_TA_ABONNEMENT_4 FOREIGN KEY (ID_T_ABONNEMENT) REFERENCES TA_T_ABONNEMENT (ID_T_ABONNEMENT)';
    EXECUTE STATEMENT :query; 
       
    query = 'ALTER TABLE TA_ABONNEMENT ADD CONSTRAINT FK_TA_ABONNEMENT_5 FOREIGN KEY (ID_L_FACTURE) REFERENCES TA_L_FACTURE (ID_L_DOCUMENT)';
    EXECUTE STATEMENT :query; 
          
  end
END
^
EXECUTE PROCEDURE CREA_TA_ABONNEMENT 
^
drop procedure CREA_TA_ABONNEMENT
^


CREATE or ALTER  PROCEDURE CREA_TA_AVIS_ECHEANCE
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_AVIS_ECHEANCE')) THEN
  begin
    query = 'CREATE TABLE TA_AVIS_ECHEANCE (
    ID_DOCUMENT                  DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    CODE_DOCUMENT                DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
    DATE_DOCUMENT                DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DATE_ECH_DOCUMENT            DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DATE_LIV_DOCUMENT            DATE_LGR DEFAULT ''NOW'' /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    LIBELLE_DOCUMENT             DLIB255NN /* DLIB255NN = VARCHAR(255) NOT NULL */,
    ID_TIERS                     DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_PAIEMENT                DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    REGLE_DOCUMENT               DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    REM_HT_DOCUMENT              DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    TX_REM_HT_DOCUMENT           DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    REM_TTC_DOCUMENT             DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    TX_REM_TTC_DOCUMENT          DID9 DEFAULT 0 /* DID9 = NUMERIC(15,2) NOT NULL */,
    NB_E_DOCUMENT                DID_FACULTATIF DEFAULT 0 /* DID_FACULTATIF = INTEGER */,
    TTC                          DBOOL DEFAULT 0 /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    EXPORT                       DBOOL DEFAULT 0 /* DBOOL = SMALLINT DEFAULT 0 NOT NULL CHECK (VALUE BETWEEN 0 AND 1) */,
    COMMENTAIRE                  DLIB_COMMENTAIRE /* DLIB_COMMENTAIRE = VARCHAR(2000) */,
    MT_TTC_CALC                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_HT_CALC                   DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TVA_CALC                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_TTC_CALC                 DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_HT_CALC                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_TVA_CALC                 DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    NET_A_PAYER                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_AVT_REM_GLOBALE_CALC  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QUI_CREE_DOCUMENT            DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_DOCUMENT          TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_DOCUMENT           DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_DOCUMENT         TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                    NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                     DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ                  INTEGER,
    ACOMPTES                     DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    RESTE_A_REGLER               DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    LIBELLE_PAIEMENT             DLIB255 /* DLIB255 = VARCHAR(255) */,
    ID_ETAT                      DID_FACULTATIF /* DID_FACULTATIF = INTEGER */
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_AVIS_ECHEANCE ADD CONSTRAINT UNQ1_TA_AVIS_ECHEANCE UNIQUE (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_AVIS_ECHEANCE ADD PRIMARY KEY (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_AVIS_ECHEANCE ADD FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_AVIS_ECHEANCE ADD FOREIGN KEY (ID_T_PAIEMENT) REFERENCES TA_T_PAIEMENT (ID_T_PAIEMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_AVIS_ECHEANCE ADD FOREIGN KEY (ID_ETAT) REFERENCES TA_ETAT (ID_ETAT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_AVIS_ECHEANCE ADD FOREIGN KEY (ID_T_PAIEMENT) REFERENCES TA_T_PAIEMENT (ID_T_PAIEMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_AVIS_ECHEANCE ADD FOREIGN KEY (ID_ETAT) REFERENCES TA_ETAT (ID_ETAT)';
    EXECUTE STATEMENT :query;
    
    
    query = 'CREATE INDEX TA_AVIS_ECHEANCE_CODE ON TA_AVIS_ECHEANCE (CODE_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_AVIS_ECHEANCE_ID_TIERS ON TA_AVIS_ECHEANCE (ID_TIERS)';
    EXECUTE STATEMENT :query;
            
  end
END
^
EXECUTE PROCEDURE CREA_TA_AVIS_ECHEANCE 
^
drop procedure CREA_TA_AVIS_ECHEANCE
^


CREATE or ALTER  PROCEDURE CREA_TA_L_ECHEANCE
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_L_ECHEANCE')) THEN
  begin
    query = 'CREATE TABLE TA_L_ECHEANCE (
    ID_L_ECHEANCE           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_ABONNEMENT           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_ARTICLE              DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    LIB_L_DOCUMENT          DLIB100 /* DLIB100 = VARCHAR(100) */,
    DEBUT_PERIODE           DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    FIN_PERIODE             DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DATE_FIN_CALCUL         DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    DEB_ABON                DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    FIN_ABON                DATE_LGR /* DATE_LGR = DATE DEFAULT ''NOW'' */,
    POURC_INDICE            DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    POURC_PARTENAIRE        DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QTE_L_DOCUMENT          DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    U1_L_DOCUMENT           DLIB20 /* DLIB20 = VARCHAR(20) */,
    PRIX_U_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    TAUX_TVA_L_DOCUMENT     DLONG /* DLONG = NUMERIC(15,4) */,
    MT_HT_L_DOCUMENT        DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    REM_TX_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    REM_HT_L_DOCUMENT       DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_HT_APR_REM_GLOBALE   DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_APR_REM_GLOBALE  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QUI_CREE_L_DOCUMENT     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_L_DOCUMENT   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_L_DOCUMENT    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_L_DOCUMENT  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"               NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ             INTEGER
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_ECHEANCE ADD PRIMARY KEY (ID_L_ECHEANCE)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_L_ECHEANCE ADD CONSTRAINT FK_TA_L_ECHEANCE_1 FOREIGN KEY (ID_ABONNEMENT) REFERENCES TA_ABONNEMENT (ID_ABONNEMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_ECHEANCE ADD CONSTRAINT FK_TA_L_ECHEANCE_2 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;

    
  end
END
^
EXECUTE PROCEDURE CREA_TA_L_ECHEANCE 
^
drop procedure CREA_TA_L_ECHEANCE
^


CREATE or ALTER  PROCEDURE CREA_TA_INFOS_AVIS_ECHEANCE
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_INFOS_AVIS_ECHEANCE')) THEN
  begin
    query = 'CREATE TABLE TA_INFOS_AVIS_ECHEANCE (
    ID_INFOS_DOCUMENT           DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_DOCUMENT                 DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ADRESSE1                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE2                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE3                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    CODEPOSTAL                  DCODPOS /* DCODPOS = VARCHAR(25) */,
    VILLE                       DLIB100 /* DLIB100 = VARCHAR(100) */,
    PAYS                        DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE1_LIV                DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE2_LIV                DLIB100 /* DLIB100 = VARCHAR(100) */,
    ADRESSE3_LIV                DLIB100 /* DLIB100 = VARCHAR(100) */,
    CODEPOSTAL_LIV              DCODPOS /* DCODPOS = VARCHAR(25) */,
    VILLE_LIV                   DLIB100 /* DLIB100 = VARCHAR(100) */,
    PAYS_LIV                    DLIB100 /* DLIB100 = VARCHAR(100) */,
    CODE_COMPTA                 DLIB8NN /* DLIB8NN = VARCHAR(8) NOT NULL */,
    COMPTE                      DLIB8NN /* DLIB8NN = VARCHAR(8) NOT NULL */,
    NOM_TIERS                   DLIB100 /* DLIB100 = VARCHAR(100) */,
    PRENOM_TIERS                DLIB100 /* DLIB100 = VARCHAR(100) */,
    SURNOM_TIERS                DLIB20 /* DLIB20 = VARCHAR(20) */,
    CODE_T_CIVILITE             DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    CODE_T_ENTITE               DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    TVA_I_COM_COMPL             DLIB50 /* DLIB50 = VARCHAR(50) */,
    CODE_C_PAIEMENT             DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */,
    LIB_C_PAIEMENT              DLIB255 /* DLIB255 = VARCHAR(255) */,
    REPORT_C_PAIEMENT           DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    FIN_MOIS_C_PAIEMENT         DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    LIBL_ENTREPRISE             DLIB100 /* DLIB100 = VARCHAR(100) */,
    NOM_ENTREPRISE              DLIB100 /* DLIB100 = VARCHAR(100) */,
    QUI_CREE_INFOS_DOCUMENT     DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_INFOS_DOCUMENT   TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_INFOS_DOCUMENT    DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_INFOS_DOCUMENT  TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                   NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                    DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ                 INTEGER,
    CODE_T_TVA_DOC              DLGR_CODEL /* DLGR_CODEL = VARCHAR(20) */
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_INFOS_AVIS_ECHEANCE ADD CONSTRAINT UNQ1_TA_INFOS_AVIS_ECHEANCE UNIQUE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
        
    query = 'ALTER TABLE TA_INFOS_AVIS_ECHEANCE ADD PRIMARY KEY (ID_INFOS_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_INFOS_AVIS_ECHEANCE ADD CONSTRAINT FK_TA_INFOS_AVIS_ECHEANCE_1 FOREIGN KEY (ID_DOCUMENT) REFERENCES TA_AVIS_ECHEANCE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_INFOS_AVIS_ECH_ID_DOC ON TA_INFOS_AVIS_ECHEANCE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;    
    
  end
END
^
EXECUTE PROCEDURE CREA_TA_INFOS_AVIS_ECHEANCE 
^
drop procedure CREA_TA_INFOS_AVIS_ECHEANCE
^


CREATE or ALTER  PROCEDURE CREA_TA_L_AVIS_ECHEANCE
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_L_AVIS_ECHEANCE')) THEN
  begin
    query = 'CREATE TABLE TA_L_AVIS_ECHEANCE (
    ID_L_DOCUMENT                   DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
    ID_DOCUMENT                     DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_T_LIGNE                      DID3 /* DID3 = INTEGER NOT NULL */,
    ID_ARTICLE                      DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    ID_L_ECHEANCE                   DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
    NUM_LIGNE_L_DOCUMENT            DID3 /* DID3 = INTEGER NOT NULL */,
    LIB_L_DOCUMENT                  DLIB255 /* DLIB255 = VARCHAR(255) */,
    QTE_L_DOCUMENT                  DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QTE2_L_DOCUMENT                 DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    U1_L_DOCUMENT                   DLIB20 /* DLIB20 = VARCHAR(20) */,
    U2_L_DOCUMENT                   DLIB20 /* DLIB20 = VARCHAR(20) */,
    PRIX_U_L_DOCUMENT               DID9FACULT /* NUM4 = NUMERIC(15,4) */,
    TAUX_TVA_L_DOCUMENT             DLONG /* DLONG = NUMERIC(15,4) */,
    COMPTE_L_DOCUMENT               DLIB8 /* DLIB8 = VARCHAR(8) */,
    CODE_TVA_L_DOCUMENT             DLIB20 /* DLIB20 = VARCHAR(20) */,
    CODE_T_TVA_L_DOCUMENT           DLIB1L /* DLIB1L = VARCHAR(1) */,
    MT_HT_L_DOCUMENT                DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_L_DOCUMENT               DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    REM_TX_L_DOCUMENT               DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    REM_HT_L_DOCUMENT               DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_HT_APR_REM_GLOBALE           DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    MT_TTC_APR_REM_GLOBALE          DID9FACULT /* DID9FACULT = NUMERIC(15,2) */,
    QUI_CREE_L_DOCUMENT             DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_CREE_L_DOCUMENT           TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF_L_DOCUMENT            DLIB50 /* DLIB50 = VARCHAR(50) */,
    QUAND_MODIF_L_DOCUMENT          TIMESTAMP DEFAULT ''NOW'',
    "VERSION"                       NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
    IP_ACCES                        DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
    VERSION_OBJ                     INTEGER,
    QTE_TITRE_TRANSPORT_L_DOCUMENT  INTEGER,
    TITRE_TRANSPORT_L_DOCUMENT      DLIB50 /* DLIB50 = VARCHAR(50) */
)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_AVIS_ECHEANCE ADD PRIMARY KEY (ID_L_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_AVIS_ECHEANCE ADD CONSTRAINT FK_TA_L_AVIS_ECHEANCE_1 FOREIGN KEY (ID_DOCUMENT) REFERENCES TA_AVIS_ECHEANCE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_AVIS_ECHEANCE ADD CONSTRAINT FK_TA_L_AVIS_ECHEANCE_2 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_AVIS_ECHEANCE ADD CONSTRAINT FK_TA_L_AVIS_ECHEANCE_3 FOREIGN KEY (ID_L_ECHEANCE) REFERENCES TA_L_ECHEANCE (ID_L_ECHEANCE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_L_AVIS_ECHEANCE ADD FOREIGN KEY (ID_T_LIGNE) REFERENCES TA_T_LIGNE (ID_T_LIGNE)';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_L_AVIS_ECHEANCE_ID_FACTURE ON TA_L_AVIS_ECHEANCE (ID_DOCUMENT)';
    EXECUTE STATEMENT :query;
    
    query = 'CREATE INDEX TA_L_AVIS_ECHEANCE_ID_T_LIGNE ON TA_L_AVIS_ECHEANCE (ID_T_LIGNE)';
    EXECUTE STATEMENT :query;                    
  end
END
^
EXECUTE PROCEDURE CREA_TA_L_AVIS_ECHEANCE 
^
drop procedure CREA_TA_L_AVIS_ECHEANCE
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_R_DOCUMENT
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_R_DOCUMENT' and  a.RDB$FIELD_NAME ='ID_AVIS_ECHEANCE')) THEN
  begin
    query = 'ALTER TABLE TA_R_DOCUMENT ADD ID_AVIS_ECHEANCE DID_FACULTATIF';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_R_DOCUMENT ADD CONSTRAINT FK_TA_R_DOCUMENT_AVIS FOREIGN KEY (ID_AVIS_ECHEANCE) REFERENCES TA_AVIS_ECHEANCE (ID_DOCUMENT);';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TA_R_DOCUMENT
^
drop procedure GESTION_ALTER_TA_R_DOCUMENT
^



/***** Triggers******/

CREATE OR ALTER TRIGGER TBI_TA_T_SUPPORT FOR TA_T_SUPPORT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_T_SUPPORT is null) Then
      New.ID_T_SUPPORT = GEN_ID(NUM_ID_T_SUPPORT,1);
   New.QUI_CREE_T_SUPPORT = USER;
   new.QUAND_CREE_T_SUPPORT = 'NOW';
   new.QUI_MODIF_T_SUPPORT = USER;
   new.QUAND_MODIF_T_SUPPORT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



CREATE OR ALTER TRIGGER TBU_TA_T_SUPPORT FOR TA_T_SUPPORT
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   new.QUI_MODIF_T_SUPPORT = USER;
   new.QUAND_MODIF_T_SUPPORT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBID_ABONNEMENT */
CREATE OR ALTER TRIGGER TBID_ABONNEMENT FOR TA_ABONNEMENT
ACTIVE BEFORE INSERT POSITION 1
as
begin
   If (New.ID_ABONNEMENT  is null) Then
      New.ID_ABONNEMENT  = GEN_ID(NUM_ID_ABONNEMENT,1);
   New.QUI_CREE_ABONNEMENT  = USER;
   New.QUAND_CREE_ABONNEMENT = 'NOW';
   New.QUI_MODIF_ABONNEMENT = USER;
   New.QUAND_MODIF_ABONNEMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_ABONNEMENT */
CREATE OR ALTER TRIGGER TBU_ABONNEMENT FOR TA_ABONNEMENT
ACTIVE BEFORE UPDATE POSITION 1
as
begin

   new.QUI_MODIF_ABONNEMENT = USER;
   new.QUAND_MODIF_ABONNEMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBDID_AVIS_ECHEANCE_ETRANGER */
CREATE OR ALTER TRIGGER TBDID_AVIS_ECHEANCE_ETRANGER FOR TA_AVIS_ECHEANCE
ACTIVE AFTER DELETE POSITION 1
as
begin
  delete from ta_l_AVIS_ECHEANCE where id_DOCUMENT = old.id_DOCUMENT;
  delete from TA_COM_DOC where ID_DOCUMENT = old.ID_DOCUMENT;
  delete from ta_infos_AVIS_ECHEANCE where id_DOCUMENT = old.id_DOCUMENT;
  delete from ta_r_document where id_AVIS_ECHEANCE = old.id_DOCUMENT;
end
^


/* Trigger: TBI_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBI_AVIS_ECHEANCE FOR TA_AVIS_ECHEANCE
ACTIVE BEFORE INSERT POSITION 2
as
begin
   /*If (New.ID_DOCUMENT  is null) Then*/
      /*New.ID_DOCUMENT  = GEN_ID(NUM_ID_AVIS_ECHEANCE,1);*/
   New.CODE_DOCUMENT = Upper(New.CODE_DOCUMENT);
   New.QUI_CREE_DOCUMENT  = USER;
   New.QUAND_CREE_DOCUMENT = 'NOW';
   New.QUI_MODIF_DOCUMENT = USER;
   New.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBU_AVIS_ECHEANCE FOR TA_AVIS_ECHEANCE
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   New.CODE_DOCUMENT = Upper(New.CODE_DOCUMENT);
   new.QUI_MODIF_DOCUMENT = USER;
   new.QUAND_MODIF_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBI_TA_INFOS_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBI_TA_INFOS_AVIS_ECHEANCE FOR TA_INFOS_AVIS_ECHEANCE
ACTIVE BEFORE INSERT POSITION 0
as
begin
   /*If (New.ID_INFOS_DOCUMENT is null) Then
      New.ID_INFOS_DOCUMENT = GEN_ID(NUM_ID_INFOS_AVIS_ECHEANCE,1);*/
   New.QUI_CREE_INFOS_DOCUMENT = USER;
   new.QUAND_CREE_INFOS_DOCUMENT = 'NOW';
   new.QUI_MODIF_INFOS_DOCUMENT = USER;
   new.QUAND_MODIF_INFOS_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_TA_INFOS_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBU_TA_INFOS_AVIS_ECHEANCE FOR TA_INFOS_AVIS_ECHEANCE
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   new.QUI_MODIF_INFOS_DOCUMENT = USER;
   new.QUAND_MODIF_INFOS_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/* Trigger: TBIID_ARTICLE_L_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBIID_ARTICLE_L_AVIS_ECHEANCE FOR TA_L_AVIS_ECHEANCE
ACTIVE BEFORE INSERT POSITION 1
as
DECLARE variable numrows integer;
declare variable typeligneH integer;
declare variable typeligneC integer;
declare variable commentaire integer;
begin
  /* E_XAKID_ARTICLE */
  select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'H' into :typeligneh;
    select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'C' into :typelignec;
      select f.id_famille from ta_famille f where f.code_famille like ('&&&') into commentaire;
   if (NEW.ID_ARTICLE is not null and new.id_t_ligne =:typeligneh ) then
       begin
     select count(*) from TA_ARTICLE
     where ID_ARTICLE= NEW.ID_ARTICLE
     into :numrows;
     if (numrows = 0) then
        exception E_XAKID_ARTICLE;
       end
   else if (new.id_t_ligne=:typelignec or (exists(
    select id_article from ta_article where id_famille=:commentaire  and ta_article.id_article = new.id_article)) ) then
     begin
       /* new.id_article=null;*/
        new.qte_l_DOCUMENT=null;
        new.u1_l_DOCUMENT=null;
        new.u2_l_DOCUMENT=null;
        new.prix_u_l_DOCUMENT=null;
        new.taux_tva_l_DOCUMENT=null;
        new.compte_l_DOCUMENT=null;
        new.code_tva_l_DOCUMENT=null;
        new.code_t_tva_l_DOCUMENT=null;
        new.mt_ht_l_DOCUMENT=null;
        new.mt_ttc_l_DOCUMENT=null;
        new.rem_tx_l_DOCUMENT=null;
        new.rem_ht_l_DOCUMENT=null;
     end
end
^


/* Trigger: TBI_L_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBI_L_AVIS_ECHEANCE FOR TA_L_AVIS_ECHEANCE
ACTIVE BEFORE INSERT POSITION 2
as
begin
   /*If (New.ID_L_DOCUMENT  is null) Then
      New.ID_L_DOCUMENT  = GEN_ID(NUM_ID_L_AVIS_ECHEANCE,1);*/
   New.QUI_CREE_L_DOCUMENT  = USER;
   New.QUAND_CREE_L_DOCUMENT = 'NOW';
   New.QUI_MODIF_L_DOCUMENT = USER;
   New.QUAND_MODIF_L_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBUID_ARTICLE_L_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBUID_ARTICLE_L_AVIS_ECHEANCE FOR TA_L_AVIS_ECHEANCE
ACTIVE BEFORE UPDATE POSITION 1
as
DECLARE variable numrows integer;
declare variable typeligneH integer;
declare variable typeligneC integer;
declare variable commentaire integer;
begin
  /* E_XAKID_ARTICLE */
  select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'H' into :typeligneh;
    select typeL.id_t_ligne from ta_t_ligne typeL where typeL.code_t_ligne = 'C' into :typelignec;
      select f.id_famille from ta_famille f where f.code_famille like ('&&&') into commentaire;
   if (NEW.ID_ARTICLE is not null and new.id_t_ligne =:typeligneh ) then
       begin
     select count(*) from TA_ARTICLE
     where ID_ARTICLE= NEW.ID_ARTICLE
     into :numrows;
     if (numrows = 0) then
        exception E_XAKID_ARTICLE;
       end
   else if (new.id_t_ligne=:typelignec or (exists(
    select id_article from ta_article where id_famille=:commentaire  and ta_article.id_article = new.id_article)) ) then
     begin
       /* new.id_article=null;*/
        new.qte_l_DOCUMENT=null;
        new.u1_l_DOCUMENT=null;
        new.u2_l_DOCUMENT=null;
        new.prix_u_l_DOCUMENT=null;
        new.taux_tva_l_DOCUMENT=null;
        new.compte_l_DOCUMENT=null;
        new.code_tva_l_DOCUMENT=null;
        new.code_t_tva_l_DOCUMENT=null;
        new.mt_ht_l_DOCUMENT=null;
        new.mt_ttc_l_DOCUMENT=null;
        new.rem_tx_l_DOCUMENT=null;
        new.rem_ht_l_DOCUMENT=null;
     end
end
^


/* Trigger: TBU_L_AVIS_ECHEANCE */
CREATE OR ALTER TRIGGER TBU_L_AVIS_ECHEANCE FOR TA_L_AVIS_ECHEANCE
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.QUI_MODIF_L_DOCUMENT = USER;
   new.QUAND_MODIF_L_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBI_L_ECHEANCE */
CREATE OR ALTER TRIGGER TBI_L_ECHEANCE FOR TA_L_ECHEANCE
ACTIVE BEFORE INSERT POSITION 2
as
begin
   If (New.id_l_echeance  is null) Then
      New.id_l_echeance  = GEN_ID(num_id_l_echeance,1);
   New.QUI_CREE_L_DOCUMENT  = USER;
   New.QUAND_CREE_L_DOCUMENT = 'NOW';
   New.QUI_MODIF_L_DOCUMENT = USER;
   New.QUAND_MODIF_L_DOCUMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_L_ECHEANCE */
CREATE OR ALTER TRIGGER TBU_L_ECHEANCE FOR TA_L_ECHEANCE
ACTIVE BEFORE UPDATE POSITION 2
as
begin
   new.qui_modif_l_document = USER;
   new.quand_modif_l_document = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBI_TA_R_T_SUPPORT */
CREATE OR ALTER TRIGGER TBI_TA_R_T_SUPPORT FOR TA_R_T_SUPPORT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_R_T_SUPPORT is null) Then
      New.ID_R_T_SUPPORT = GEN_ID(NUM_ID_R_T_SUPPORT,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_TA_R_T_SUPPORT */
CREATE OR ALTER TRIGGER TBU_TA_R_T_SUPPORT FOR TA_R_T_SUPPORT
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBI_TA_T_ABONNEMENT */
CREATE OR ALTER TRIGGER TBI_TA_T_ABONNEMENT FOR TA_T_ABONNEMENT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_T_ABONNEMENT is null) Then
      New.ID_T_ABONNEMENT = GEN_ID(NUM_ID_T_ABONNEMENT,1);
   New.QUI_CREE_T_ABONNEMENT = USER;
   new.QUAND_CREE_T_ABONNEMENT = 'NOW';
   new.QUI_MODIF_T_ABONNEMENT = USER;
   new.QUAND_MODIF_T_ABONNEMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBU_TA_T_ABONNEMENT */
CREATE OR ALTER TRIGGER TBU_TA_T_ABONNEMENT FOR TA_T_ABONNEMENT
ACTIVE BEFORE UPDATE POSITION 0
as
begin
   new.QUI_MODIF_T_ABONNEMENT = USER;
   new.QUAND_MODIF_T_ABONNEMENT = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^



/* Trigger: TBID_SUPPORT_ABON */
CREATE OR ALTER TRIGGER TBID_SUPPORT_ABON FOR TA_SUPPORT_ABON
ACTIVE BEFORE INSERT POSITION 1
as
begin
   If (New.ID_SUPPORT_ABON  is null) Then
      New.ID_SUPPORT_ABON  = GEN_ID(NUM_ID_SUPPORT_ABON,1);
   New.CODE_SUPPORT_ABON = Upper(New.CODE_SUPPORT_ABON);
   New.QUI_CREE_SUPPORT_ABON  = USER;
   New.QUAND_CREE_SUPPORT_ABON = 'NOW';
   New.QUI_MODIF_SUPPORT_ABON = USER;
   New.QUAND_MODIF_SUPPORT_ABON = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^


/* Trigger: TBI_XAKCODE_SUPPORT_ABON */
CREATE OR ALTER TRIGGER TBI_XAKCODE_SUPPORT_ABON FOR TA_SUPPORT_ABON
ACTIVE BEFORE INSERT POSITION 0
as
DECLARE variable numrows integer;
begin
  /* XAKCODE_SUPPORT_ABON */
   select count(*) from TA_SUPPORT_ABON
   where CODE_SUPPORT_ABON = NEW.CODE_SUPPORT_ABON
   into :numrows;
   if (numrows > 0) then
      exception E_XAKCODE_ARTICLE;
end
^


