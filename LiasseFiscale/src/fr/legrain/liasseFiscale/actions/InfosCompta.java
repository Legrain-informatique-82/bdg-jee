package fr.legrain.liasseFiscale.actions;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;

import org.apache.log4j.Logger;
import org.eclipse.core.runtime.FileLocator;
import org.eclipse.core.runtime.Path;
import org.exolab.castor.mapping.Mapping;
import org.exolab.castor.mapping.MappingException;
import org.exolab.castor.xml.MarshalException;
import org.exolab.castor.xml.Marshaller;
import org.exolab.castor.xml.Unmarshaller;
import org.exolab.castor.xml.ValidationException;

import fr.legrain.liasseFiscale.LiasseFiscalePlugin;

//  Generated by StarUML(tm) Java Add-In
//  @ Project : Untitled
//  @ File Name : InfosCompta.java
//  @ Date : 29/09/2006
//  @ Author : 

public class InfosCompta {
	
	static Logger logger = Logger.getLogger(InfosCompta.class.getName());
	
	private ArrayList<Compte> listeCompte = new ArrayList<Compte>();
	private HashMap<Cle,InfoComplement> listeSaisieComplement = new HashMap<Cle,InfoComplement>();
	
	private ArrayList<InfoComplement> listeInfosDossier = new ArrayList<InfoComplement>();
	
	private String C_MAPPING_FILE = "/mapping/mapping.xml";
	private Mapping mapping = null;
	
	public InfosCompta() {}
	
	/**
	 * Création et initialisation des informations de mapping si celles ci n'existe pas
	 * @throws IOException
	 * @throws MappingException
	 */
	protected void initMapping() throws IOException, MappingException {
		if ( mapping == null ) {
			URL mappingURL = FileLocator.find(LiasseFiscalePlugin.getDefault().getBundle(),new Path(C_MAPPING_FILE),null);
			//URL mappingURL = LiasseFiscalePlugin.getDefault().find(new Path(C_MAPPING_FILE));
			mapping = new Mapping();
			mapping.loadMapping(mappingURL);
		}
	}
	
	/**
	 * Recherche un infoComplement et retourne sa position
	 * @param cle
	 * @return - position de l'infoComplement ou -1 si non trouvé
	 */
	public int posInfoComplement(String cle) {
		int i = 0;
		boolean trouve = false;
		while(!trouve && i<listeSaisieComplement.size()-1) {
			if(listeSaisieComplement.get(i).getCle().equals(cle)){
				trouve = true;
			}
			i++;
		}
		if(trouve) {
			return i;
		} else {
			return -1;
		}
	}
	
	/**
	 * 
	 * @param xmlFile - fichier destination
	 */
	public void sortieXML(String xmlFile) {
		//binding de this avec Castor XML
		try {
			initMapping();
			//Create a File to marshal to
			FileWriter writer = new FileWriter(xmlFile);
			//Marshal the person object
			Marshaller m = new Marshaller(writer); 
			m.setMapping(mapping); 
			m.marshal(this);
			writer.close();
		} catch (IOException e) {
			logger.error("",e);
		} catch (MappingException e) {
			logger.error("",e);
		} catch (MarshalException e) {
			logger.error("",e);
		} catch (ValidationException e) {
			logger.error("",e);
		}
	}
	
	/**
	 * Non implémenté dans cette classe.
	 */
	public void readTxt() {
		logger.error("Non implémenté dans cette classe");
	}
	
	/**
	 * 
	 * @param xmlFile - fichier source
	 * @return InfosCompta
	 */
	public InfosCompta lectureXML(String xmlFile) {
		//binding de this avec Castor XML
		try {
			initMapping();
			FileReader reader = new FileReader(xmlFile);
			//Create a new Unmarshaller
			Unmarshaller unmarshaller = new Unmarshaller(InfosCompta.class);
			unmarshaller.setMapping(mapping);
			//Unmarshal the object
			InfosCompta info = (InfosCompta)unmarshaller.unmarshal(reader);
			reader.close();
			return info;
		} catch (IOException e) {
			logger.error("",e);
		} catch (MappingException e) {
			logger.error("",e);
		} catch (MarshalException e) {
			logger.error("",e);
		} catch (ValidationException e) {
			logger.error("",e);
		}
		return null;
	}

	public ArrayList<Compte> getListeCompte() {
		return listeCompte;
	}

	public void setListeCompte(ArrayList<Compte> listeCompte) {
		this.listeCompte = listeCompte;
	}

	public HashMap<Cle,InfoComplement> getListeSaisieComplement() {
		return listeSaisieComplement;
	}

	public void setListeSaisieComplement(
			HashMap<Cle,InfoComplement> listeSaisieComplement) {
		this.listeSaisieComplement = listeSaisieComplement;
	}

	public ArrayList<InfoComplement> getListeInfosDossier() {
		return listeInfosDossier;
	}

	public void setListeInfosDossier(ArrayList<InfoComplement> listeInfosDossier) {
		this.listeInfosDossier = listeInfosDossier;
	}

}
