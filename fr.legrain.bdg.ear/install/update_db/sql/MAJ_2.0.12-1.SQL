--
--CREATE or ALTER  PROCEDURE CREATION_GEN_ENDTOEND
--as    
--DECLARE VARIABLE QUERY VARCHAR(255);
--BEGIN
--query = '';
--IF (not exists( SELECT a.RDB$GENERATOR_NAME
--FROM RDB$GENERATORS a
--where a.RDB$GENERATOR_NAME='NUM_ID_END_TO_END')) THEN
--  begin
--    query = 'CREATE GENERATOR NUM_ID_END_TO_END';
--    EXECUTE STATEMENT :query;
--    
--    query = 'SET GENERATOR NUM_ID_END_TO_END TO 0';
--    EXECUTE STATEMENT :query;
--  end
--END
--^
--EXECUTE PROCEDURE CREATION_GEN_ENDTOEND
--^
--drop procedure CREATION_GEN_ENDTOEND
--^
--
--CREATE or ALTER  PROCEDURE CREATION_GEN_MANDAT
--as    
--DECLARE VARIABLE QUERY VARCHAR(255);
--BEGIN
--query = '';
--IF (not exists( SELECT a.RDB$GENERATOR_NAME
--FROM RDB$GENERATORS a
--where a.RDB$GENERATOR_NAME='NUM_ID_MANDAT')) THEN
--  begin
--    query = 'CREATE GENERATOR NUM_ID_MANDAT';
--    EXECUTE STATEMENT :query;
--    
--    query = 'SET GENERATOR NUM_ID_MANDAT TO 0';
--    EXECUTE STATEMENT :query;
--  end
--END
--^
--EXECUTE PROCEDURE CREATION_GEN_MANDAT
--^
--drop procedure CREATION_GEN_MANDAT
--^
--
--
-- 
--/******************************************/
-- 
--CREATE or ALTER  PROCEDURE CREA_TA_MANDAT
--as    
--DECLARE VARIABLE QUERY VARCHAR(5000);
--BEGIN
--query = '';
--IF (not exists( SELECT  a.RDB$RELATION_NAME
--FROM RDB$RELATIONS a
--where a.RDB$RELATION_NAME='TA_MANDAT')) THEN
--  begin
--    query = 'CREATE TABLE TA_MANDAT (
--    ID_MANDAT    DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
--    CODE_MANDAT  DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
--    ID_TIERS     DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
--    QUI_CREE     DLIB50 /* DLIB50 = VARCHAR(50) */,
--    QUAND_CREE   TIMESTAMP DEFAULT ''NOW'',
--    QUI_MODIF    DLIB50 /* DLIB50 = VARCHAR(50) */,
--    QUAND_MODIF  TIMESTAMP DEFAULT ''NOW'',
--    "VERSION"    NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
--    IP_ACCES     DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
--    VERSION_OBJ  INTEGER
--)';
--    EXECUTE STATEMENT :query;
--    
--    query = 'ALTER TABLE TA_MANDAT ADD CONSTRAINT UNQ1_TA_MANDAT UNIQUE (CODE_MANDAT)';
--    EXECUTE STATEMENT :query;
--        
--    query = 'ALTER TABLE TA_MANDAT ADD PRIMARY KEY (ID_MANDAT)';
--    EXECUTE STATEMENT :query;
--    
--    query = 'ALTER TABLE TA_MANDAT ADD CONSTRAINT FK_TA_MANDAT_1 FOREIGN KEY (ID_TIERS) REFERENCES TA_TIERS (ID_TIERS)';
--    EXECUTE STATEMENT :query;
--  end
--END
--^
--EXECUTE PROCEDURE CREA_TA_MANDAT 
--^
--drop procedure CREA_TA_MANDAT
--^
--
--
--CREATE or ALTER  PROCEDURE CREA_TA_END_TO_END
--as    
--DECLARE VARIABLE QUERY VARCHAR(5000);
--BEGIN
--query = '';
--IF (not exists( SELECT  a.RDB$RELATION_NAME
--FROM RDB$RELATIONS a
--where a.RDB$RELATION_NAME='TA_END_TO_END')) THEN
--  begin
--    query = 'CREATE TABLE TA_END_TO_END (
--    ID_END_TO_END    DID3 NOT NULL /* DID3 = INTEGER NOT NULL */,
--    CODE_END_TO_END  DLGR_CODE /* DLGR_CODE = VARCHAR(20) NOT NULL */,
--    ID_MANDAT        DID_FACULTATIF /* DID_FACULTATIF = INTEGER */,
--    QUI_CREE         DLIB50 /* DLIB50 = VARCHAR(50) */,
--    QUAND_CREE       TIMESTAMP DEFAULT ''NOW'',
--    QUI_MODIF        DLIB50 /* DLIB50 = VARCHAR(50) */,
--    QUAND_MODIF      TIMESTAMP DEFAULT ''NOW'',
--    "VERSION"        NUM_VERSION /* NUM_VERSION = VARCHAR(20) */,
--    IP_ACCES         DLIB50NN DEFAULT 0 /* DLIB50NN = VARCHAR(50) NOT NULL */,
--    VERSION_OBJ      INTEGER
--)';
--    EXECUTE STATEMENT :query;
--    
--    query = 'ALTER TABLE TA_END_TO_END ADD CONSTRAINT UNQ1_TA_END_TO_END UNIQUE (CODE_END_TO_END)';
--    EXECUTE STATEMENT :query;
--        
--    query = 'ALTER TABLE TA_END_TO_END ADD PRIMARY KEY (ID_END_TO_END)';
--    EXECUTE STATEMENT :query;
--    
--    query = 'ALTER TABLE TA_END_TO_END ADD CONSTRAINT FK_TA_END_TO_END_1 FOREIGN KEY (ID_MANDAT) REFERENCES TA_MANDAT (ID_MANDAT)';
--    EXECUTE STATEMENT :query;
--  end
--END
--^
--EXECUTE PROCEDURE CREA_TA_END_TO_END 
--^
--drop procedure CREA_TA_END_TO_END
--^
--
--/****** alter des tables******/
--
--CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_PRELEVEMENT
--as    
--DECLARE VARIABLE QUERY VARCHAR(500);
--BEGIN
--query ='';
--IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
--where a.RDB$RELATION_NAME = 'TA_PRELEVEMENT' and  a.RDB$FIELD_NAME ='EXPORT_BANQUE')) THEN
--  begin
--    query = 'ALTER TABLE TA_PRELEVEMENT ADD EXPORT_BANQUE DBOOL';
--    EXECUTE STATEMENT :query;   
--  end
--END
--^
--EXECUTE PROCEDURE GESTION_ALTER_TA_PRELEVEMENT
--^
--drop procedure GESTION_ALTER_TA_PRELEVEMENT
--^
--
--CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_COMPTE_BANQUE
--as    
--DECLARE VARIABLE QUERY VARCHAR(500);
--BEGIN
--query ='';
--IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
--where a.RDB$RELATION_NAME = 'TA_COMPTE_BANQUE' and  a.RDB$FIELD_NAME ='NOM_COMPTE')) THEN
--  begin
--    query = 'ALTER TABLE TA_COMPTE_BANQUE ADD NOM_COMPTE DLIB50';
--    EXECUTE STATEMENT :query; 
--
--  end
--END
--^
--EXECUTE PROCEDURE GESTION_ALTER_TA_COMPTE_BANQUE
--^
--drop procedure GESTION_ALTER_TA_COMPTE_BANQUE
--^
--
--
--
--
--
--CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_COMPL
--as    
--DECLARE VARIABLE QUERY VARCHAR(500);
--BEGIN
--query ='';
--IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
--where a.RDB$RELATION_NAME = 'TA_COMPL' and  a.RDB$FIELD_NAME ='ICS')) THEN
--  begin
--    query = 'ALTER TABLE TA_COMPL ADD ICS varchar(28)';
--    EXECUTE STATEMENT :query; 
--
--  end
--END
--^
--EXECUTE PROCEDURE GESTION_ALTER_TA_COMPL
--^
--drop procedure GESTION_ALTER_TA_COMPL
--^
--
--
--
--
--CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_R_DOCUMENT
--as    
--DECLARE VARIABLE QUERY VARCHAR(500);
--BEGIN
--query ='';
--IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
--where a.RDB$RELATION_NAME = 'TA_R_DOCUMENT' and  a.RDB$FIELD_NAME ='ID_DOC_GENERE')) THEN
--  begin
--    query = 'ALTER TABLE TA_R_DOCUMENT ADD ID_DOC_GENERE DID_FACULTATIF';
--    EXECUTE STATEMENT :query;
--    
--    query='ALTER TABLE TA_R_DOCUMENT ADD CONSTRAINT FK_TA_R_DOC_GENERE FOREIGN KEY (ID_DOC_GENERE) REFERENCES TA_R_DOCUMENT (ID_R_DOCUMENT)';
--    EXECUTE STATEMENT :query;
--    
--  end
--END
--^
--EXECUTE PROCEDURE GESTION_ALTER_TA_R_DOCUMENT
--^
--drop procedure GESTION_ALTER_TA_R_DOCUMENT
--^
--
--
--CREATE or ALTER  PROCEDURE GESTION_ALTER_TA_R_DOCUMENT2
--as    
--DECLARE VARIABLE QUERY VARCHAR(5000);
--BEGIN
--query ='';
--IF (not exists( SELECT
--    detail_index_segments.rdb$field_name AS field_name
--FROM
--    rdb$relation_constraints detail_relation_constraints
--    JOIN rdb$index_segments detail_index_segments ON detail_relation_constraints.rdb$index_name = detail_index_segments.rdb$index_name 
--    JOIN rdb$ref_constraints ON detail_relation_constraints.rdb$constraint_name = rdb$ref_constraints.rdb$constraint_name
--WHERE
--    detail_relation_constraints.rdb$constraint_type = 'FOREIGN KEY'
--    AND detail_relation_constraints.rdb$relation_name = 'TA_R_DOCUMENT'
--    and detail_index_segments.rdb$field_name='ID_AVIS_ECHEANCE')) THEN
--  begin
--    
--    query='ALTER TABLE TA_R_DOCUMENT ADD CONSTRAINT FK_TA_R_DOC_AVIS FOREIGN KEY (ID_AVIS_ECHEANCE) REFERENCES TA_R_DOCUMENT (ID_R_DOCUMENT)';
--    EXECUTE STATEMENT :query;
--    
--  end
--END
--^
--EXECUTE PROCEDURE GESTION_ALTER_TA_R_DOCUMENT2
--^
--drop procedure GESTION_ALTER_TA_R_DOCUMENT2
--^
--
--/***** Triggers******/
--
--/* Trigger: TBI_TA_MANDAT */
--CREATE OR ALTER TRIGGER TBI_TA_MANDAT FOR TA_MANDAT
--ACTIVE BEFORE INSERT POSITION 0
--as
--begin
--   If (New.ID_MANDAT is null) Then
--      New.ID_MANDAT = GEN_ID(NUM_ID_MANDAT,1);
--   New.QUI_CREE = USER;
--   new.QUAND_CREE = 'NOW';
--   new.QUI_MODIF = USER;
--   new.QUAND_MODIF = 'NOW';
--   new.IP_ACCES = current_connection;
--   select num_version from ta_version into new."VERSION";
--end
--^
--
--
--/* Trigger: TBU_TA_MANDAT */
--CREATE OR ALTER TRIGGER TBU_TA_MANDAT FOR TA_MANDAT
--ACTIVE BEFORE UPDATE POSITION 1
--as
--begin
--   new.QUI_MODIF = USER;
--   new.QUAND_MODIF = 'NOW';
--   new.IP_ACCES = current_connection;
--   select num_version from ta_version into new."VERSION";
--end
--^
--/* Trigger: TBI_TA_END_TO_END */
--CREATE OR ALTER TRIGGER TBI_TA_END_TO_END FOR TA_END_TO_END
--ACTIVE BEFORE INSERT POSITION 0
--as
--begin
--   If (New.ID_END_TO_END is null) Then
--      New.ID_END_TO_END = GEN_ID(NUM_ID_END_TO_END,1);
--   New.QUI_CREE = USER;
--   new.QUAND_CREE = 'NOW';
--   new.QUI_MODIF = USER;
--   new.QUAND_MODIF = 'NOW';
--   new.IP_ACCES = current_connection;
--   select num_version from ta_version into new."VERSION";
--end
--^
--
--
--/* Trigger: TBU_TA_END_TO_END */
--CREATE OR ALTER TRIGGER TBU_TA_END_TO_END FOR TA_END_TO_END
--ACTIVE BEFORE UPDATE POSITION 1
--as
--begin
--   new.QUI_MODIF = USER;
--   new.QUAND_MODIF = 'NOW';
--   new.IP_ACCES = current_connection;
--   select num_version from ta_version into new."VERSION";
--end
--^
--
--
--
