CREATE TABLE TA_T_CONDITIONNEMENT (
    ID							DID3 NOT NULL,
    CODE_T_CONDITIONNEMENT      DLGR_CODE,
	LIBELLE_T_CONDITIONNEMENT   DLIB255NN,
	LONGUEUR_T_CONDITIONNEMENT	DID9FACULT,
	HAUTEUR_T_CONDITIONNEMENT	DID9FACULT,
	LARGEUR_T_CONDITIONNEMENT 	DID9FACULT,
    POIDS						DID9FACULT, -- poids du paquet vide
    QUI_CREE     				DLIB50,
    QUAND_CREE  				TIMESTAMP DEFAULT 'NOW',
    QUI_MODIF    				DLIB50,
    QUAND_MODIF  				TIMESTAMP DEFAULT 'NOW',
    "VERSION"            		NUM_VERSION,
    IP_ACCES             		DLIB50NN DEFAULT 0,
    VERSION_OBJ          		INTEGER
);

CREATE GENERATOR NUM_ID_T_CONDITIONNEMENT;
SET GENERATOR NUM_ID_T_CONDITIONNEMENT TO 0;

ALTER TABLE TA_T_CONDITIONNEMENT ADD CONSTRAINT UNQ1_TA_T_CONDITIONNEMENT UNIQUE (CODE_T_CONDITIONNEMENT);
ALTER TABLE TA_T_CONDITIONNEMENT ADD PRIMARY KEY (ID);

CREATE TABLE TA_CONDITIONNEMENT_ARTICLE (
    ID							DID3 NOT NULL,
    ID_ARTICLE      			DID3,
	ID_T_CONDITIONNEMENT     	DID_FACULTATIF,
 	CODE					    DLGR_CODE,
	LIBELLE						DLIB255NN,
	NB_UNITE  					DID9FACULT,
	POIDS						DID9FACULT, -- calculé
	PRIX						DID9FACULT, -- calculé
	REDUCTION				 	DID9FACULT,
	LONGUEUR					DID9FACULT, -- saisi ou récupéré à partir du type de conditionnement
	HAUTEUR						DID9FACULT, -- saisi ou récupéré à partir du type de conditionnement
	LARGEUR 					DID9FACULT, -- saisi ou récupéré à partir du type de conditionnement
    QUI_CREE     				DLIB50,
    QUAND_CREE  				TIMESTAMP DEFAULT 'NOW',
    QUI_MODIF    				DLIB50,
    QUAND_MODIF  				TIMESTAMP DEFAULT 'NOW',
    "VERSION"            		NUM_VERSION,
    IP_ACCES             		DLIB50NN DEFAULT 0,
    VERSION_OBJ          		INTEGER
);

CREATE GENERATOR NUM_ID_CONDITIONNEMENT_ARTICLE;
SET GENERATOR NUM_ID_CONDITIONNEMENT_ARTICLE TO 0;

ALTER TABLE TA_CONDITIONNEMENT_ARTICLE ADD PRIMARY KEY (ID);
ALTER TABLE TA_CONDITIONNEMENT_ARTICLE ADD CONSTRAINT FK_TA_CONDITIONNEMENT_ARTICLE_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE(ID_ARTICLE);
ALTER TABLE TA_CONDITIONNEMENT_ARTICLE ADD CONSTRAINT FK_TA_CONDITIONNEMENT_ARTICLE_2 FOREIGN KEY (ID_T_CONDITIONNEMENT) REFERENCES TA_T_CONDITIONNEMENT (ID);

CREATE TABLE TA_ARTICLE ( -- modif
	ID_CONDITIONNEMENT_ARTICLE 	DID_FACULTATIF, -- id conditionnement par défaut
	LONGUEUR					DID9FACULT,
	HAUTEUR						DID9FACULT,
	LARGEUR 					DID9FACULT,
	POIDS						DID9FACULT,
);
ALTER TABLE TA_ARTICLE ADD CONSTRAINT FK_TA_ARTICLE_COND FOREIGN KEY (ID_CONDITIONNEMENT_ARTICLE) REFERENCES TA_CONDITIONNEMENT_ARTICLE(ID);

-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------


CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR1
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_T_CONDITIONNEMENT')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_T_CONDITIONNEMENT;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_T_CONDITIONNEMENT TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR1 
^
drop procedure GESTION_CREATION_GENERATOR1
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE1
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_T_CONDITIONNEMENT')) THEN
  begin
    query = 'CREATE TABLE TA_T_CONDITIONNEMENT(
    ID							DID3 NOT NULL,
    CODE_T_CONDITIONNEMENT      DLGR_CODE,
	LIBELLE_T_CONDITIONNEMENT   DLIB255NN,
	LONGUEUR_T_CONDITIONNEMENT	DID9FACULT,
	HAUTEUR_T_CONDITIONNEMENT	DID9FACULT,
	LARGEUR_T_CONDITIONNEMENT 	DID9FACULT,
    POIDS						DID9FACULT, 
    QUI_CREE     				DLIB50,
    QUAND_CREE  				TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF    				DLIB50,
    QUAND_MODIF  				TIMESTAMP DEFAULT ''NOW'',
    "VERSION"            		NUM_VERSION,
    IP_ACCES             		DLIB50NN DEFAULT 0,
    VERSION_OBJ          		INTEGER
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_T_CONDITIONNEMENT ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_T_CONDITIONNEMENT ADD CONSTRAINT UNQ1_TA_T_CONDITIONNEMENT UNIQUE (CODE_T_CONDITIONNEMENT)';
    EXECUTE STATEMENT :query;
    
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE1
^
drop procedure GESTION_CREATION_TABLE1
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_GENERATOR2
as    
DECLARE VARIABLE QUERY VARCHAR(255);
BEGIN
query = '';
IF (not exists( SELECT a.RDB$GENERATOR_NAME
FROM RDB$GENERATORS a
where a.RDB$GENERATOR_NAME='NUM_ID_CONDITIONNEMENT_ARTICLE')) THEN
  begin
    query = 'CREATE GENERATOR NUM_ID_CONDITIONNEMENT_ARTICLE;';
    EXECUTE STATEMENT :query;
    
    query = 'SET GENERATOR NUM_ID_CONDITIONNEMENT_ARTICLE TO 0;';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_GENERATOR2
^
drop procedure GESTION_CREATION_GENERATOR2
^

CREATE or ALTER  PROCEDURE GESTION_CREATION_TABLE2
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query = '';
IF (not exists( SELECT  a.RDB$RELATION_NAME
FROM RDB$RELATIONS a
where a.RDB$RELATION_NAME='TA_CONDITIONNEMENT_ARTICLE')) THEN
  begin
    query = 'CREATE TABLE TA_CONDITIONNEMENT_ARTICLE (
    ID							DID3 NOT NULL,
    ID_ARTICLE      			DID3,
	ID_T_CONDITIONNEMENT     	DID_FACULTATIF,
 	CODE					    DLGR_CODE,
	LIBELLE						DLIB255NN,
	NB_UNITE  					DID9FACULT,
	POIDS						DID9FACULT, 
	PRIX						DID9FACULT,
	REDUCTION				 	DID9FACULT,
	LONGUEUR					DID9FACULT,
	HAUTEUR						DID9FACULT,
	LARGEUR 					DID9FACULT,
    QUI_CREE     				DLIB50,
    QUAND_CREE  				TIMESTAMP DEFAULT ''NOW'',
    QUI_MODIF    				DLIB50,
    QUAND_MODIF  				TIMESTAMP DEFAULT ''NOW'',
    "VERSION"            		NUM_VERSION,
    IP_ACCES             		DLIB50NN DEFAULT 0,
    VERSION_OBJ          		INTEGER
    )';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_CONDITIONNEMENT_ARTICLE ADD PRIMARY KEY (ID)';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_CONDITIONNEMENT_ARTICLE ADD CONSTRAINT FK_TA_CONDITIONNEMENT_ARTICLE_1 FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE(ID_ARTICLE)';
    EXECUTE STATEMENT :query;
    
    query = 'ALTER TABLE TA_CONDITIONNEMENT_ARTICLE ADD CONSTRAINT FK_TA_CONDITIONNEMENT_ARTICLE_2 FOREIGN KEY (ID_T_CONDITIONNEMENT) REFERENCES TA_T_CONDITIONNEMENT (ID)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_CREATION_TABLE2
^
drop procedure GESTION_CREATION_TABLE2
^

CREATE or ALTER  PROCEDURE GESTION_ALTER_TABLE1
as    
DECLARE VARIABLE QUERY VARCHAR(500);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='ID_CONDITIONNEMENT_ARTICLE')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD ID_CONDITIONNEMENT_ARTICLE DID_FACULTATIF';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_ARTICLE ADD LONGUEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_ARTICLE ADD HAUTEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_ARTICLE ADD LARGEUR DID9FACULT';
    EXECUTE STATEMENT :query;

    query = 'ALTER TABLE TA_ARTICLE ADD POIDS DID9FACULT';
    EXECUTE STATEMENT :query;
    
    query='ALTER TABLE TA_ARTICLE ADD CONSTRAINT FK_TA_ARTICLE_COND FOREIGN KEY (ID_CONDITIONNEMENT_ARTICLE) REFERENCES TA_CONDITIONNEMENT_ARTICLE(ID)';
    EXECUTE STATEMENT :query;
  end
END
^
EXECUTE PROCEDURE GESTION_ALTER_TABLE1
^
drop procedure GESTION_ALTER_TABLE1
^

create or alter TRIGGER TBI_CONDITIONNEMENT_ARTICLE FOR TA_CONDITIONNEMENT_ARTICLE ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(NUM_ID_CONDITIONNEMENT_ARTICLE,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_CONDITIONNEMENT_ARTICLE FOR TA_CONDITIONNEMENT_ARTICLE ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBI_T_CONDITIONNEMENT FOR TA_T_CONDITIONNEMENT ACTIVE
BEFORE INSERT POSITION 1
as
begin
   If (New.ID  is null) Then
      New.ID  = GEN_ID(NUM_ID_T_CONDITIONNEMENT,1);
   New.QUI_CREE  = USER;
   New.QUAND_CREE = 'NOW';
   New.QUI_MODIF = USER;
   New.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

create or alter TRIGGER TBU_T_CONDITIONNEMENT FOR TA_T_CONDITIONNEMENT ACTIVE
BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

