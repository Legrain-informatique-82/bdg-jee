package fr.legrain.articles.dao;

// Generated Sep 1, 2008 3:06:27 PM by Hibernate Tools 3.2.0.CR1

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;

import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaUnite generated by hbm2java
 */
@Entity
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "TA_UNITE")
@SequenceGenerator(name = "GEN_UNITE", sequenceName = "NUM_ID_UNITE", allocationSize = 1)
@NamedQueries(value = { 
		//@NamedQuery(name=TaUnite.QN.FIND_BY_ARTICLE, query="select a from TaUnite a where (a.taArticle is null) or (a.taArticle.codeArticle = ?)")
		@NamedQuery(name=TaUnite.QN.FIND_BY_ARTICLE, 
				query="select a from TaUnite a left join a.taArticle ar where a.taArticle is null or ar.codeArticle = ?")
		})
public class TaUnite implements java.io.Serializable {
	
	public static class QN {
		public static final String FIND_BY_ARTICLE = "TaUnite.findByArticle";
	}

	private int idUnite;
	private String version;
	private String codeUnite;
	private String liblUnite;
	
	/*----------------------------------------------------------------------------------------------------------*/
	private Integer nbUnite;
	private BigDecimal hauteur;
	private BigDecimal longueur;
	private BigDecimal largeur;
	private BigDecimal poids;
	private TaArticle taArticle;
	/*----------------------------------------------------------------------------------------------------------*/
	
	private TaFamilleUnite taFamilleUnite;
	private String quiCreeUnite;
	private Date quandCreeUnite;
	private String quiModifUnite;
	private Date quandModifUnite;
	private String ipAcces;
	private Set<TaPrix> taPrixes = new HashSet<TaPrix>(0);
	private Integer versionObj;

	public TaUnite() {
	}

	public TaUnite(int idUnite) {
		this.idUnite = idUnite;
	}

	public TaUnite(int idUnite, String codeUnite, String liblUnite,
			String quiCreeUnite, Date quandCreeUnite, String quiModifUnite,
			Date quandModifUnite, String ipAcces, Set<TaPrix> taPrixes) {
		this.idUnite = idUnite;
		this.codeUnite = codeUnite;
		this.liblUnite = liblUnite;
		this.quiCreeUnite = quiCreeUnite;
		this.quandCreeUnite = quandCreeUnite;
		this.quiModifUnite = quiModifUnite;
		this.quandModifUnite = quandModifUnite;
		this.ipAcces = ipAcces;
		this.taPrixes = taPrixes;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_UNITE")
	@Column(name = "ID_UNITE", unique = true, nullable = false)
	@LgrHibernateValidated(champEntite = "", champBd = "ID_UNITE",table = "TA_UNITE",clazz = TaUnite.class)
	public int getIdUnite() {
		return this.idUnite;
	}

	public void setIdUnite(int idUnite) {
		this.idUnite = idUnite;
	}

	//@Version
	@Column(name = "VERSION", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}
	
	@Version
	@Column(name = "VERSION_OBJ", precision = 15)
	public Integer getVersionObj() {
		return this.versionObj;
	}

	public void setVersionObj(Integer versionObj) {
		this.versionObj = versionObj;
	}

	@Column(name = "CODE_UNITE", length = 20)
	//@Length(max=5)
	@LgrHibernateValidated(champEntite = "", champBd = "CODE_UNITE",table = "TA_UNITE",clazz = TaUnite.class)
	public String getCodeUnite() {
		return this.codeUnite;
	}

	public void setCodeUnite(String codeUnite) {
		this.codeUnite = codeUnite;
	}

	@Column(name = "LIBL_UNITE")
	@LgrHibernateValidated(champEntite = "", champBd = "LIBL_UNITE",table = "TA_UNITE",clazz = TaUnite.class)
	public String getLiblUnite() {
		return this.liblUnite;
	}

	public void setLiblUnite(String liblUnite) {
		this.liblUnite = liblUnite;
	}
	
	/*----------------------------------------------------------------------------------------------------------*/

	@Column(name = "NB_UNITE")
	@LgrHibernateValidated(champEntite = "", champBd = "NB_UNITE",table = "TA_UNITE",clazz = TaUnite.class)
	public Integer getNbUnite() {
		return nbUnite;
	}

	public void setNbUnite(Integer nbUnite) {
		this.nbUnite = nbUnite;
	}

	@Column(name = "HAUTEUR")
	@LgrHibernateValidated(champEntite = "", champBd = "HAUTEUR",table = "TA_UNITE",clazz = TaUnite.class)
	public BigDecimal getHauteur() {
		return hauteur;
	}

	public void setHauteur(BigDecimal hauteur) {
		this.hauteur = hauteur;
	}

	@Column(name = "LONGUEUR")
	@LgrHibernateValidated(champEntite = "", champBd = "LONGUEUR",table = "TA_UNITE",clazz = TaUnite.class)
	public BigDecimal getLongueur() {
		return longueur;
	}

	public void setLongueur(BigDecimal longueur) {
		this.longueur = longueur;
	}

	@Column(name = "LARGEUR")
	@LgrHibernateValidated(champEntite = "", champBd = "LARGEUR",table = "TA_UNITE",clazz = TaUnite.class)
	public BigDecimal getLargeur() {
		return largeur;
	}

	public void setLargeur(BigDecimal largeur) {
		this.largeur = largeur;
	}

	@Column(name = "POIDS")
	@LgrHibernateValidated(champEntite = "", champBd = "POIDS",table = "TA_UNITE",clazz = TaUnite.class)
	public BigDecimal getPoids() {
		return poids;
	}

	public void setPoids(BigDecimal poids) {
		this.poids = poids;
	}
	
	@ManyToOne(fetch = FetchType.LAZY, cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@JoinColumn(name = "ID_ARTICLE")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_ARTICLE",table = "TA_UNITE",clazz = TaArticle.class)
	public TaArticle getTaArticle() {
		return taArticle;
	}

	public void setTaArticle(TaArticle taArticle) {
		this.taArticle = taArticle;
	}
	/*----------------------------------------------------------------------------------------------------------*/
	
	@ManyToOne(fetch = FetchType.LAZY, cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@JoinColumn(name = "ID_FAMILLE")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_FAMILLE",table = "TA_UNITE",clazz = TaFamilleUnite.class)
	public TaFamilleUnite getTaFamilleUnite() {
		return taFamilleUnite;
	}

	public void setTaFamilleUnite(TaFamilleUnite taFamilleUnite) {
		this.taFamilleUnite = taFamilleUnite;
	}
	
	@Column(name = "QUI_CREE_UNITE", length = 50)
	public String getQuiCreeUnite() {
		return this.quiCreeUnite;
	}

	public void setQuiCreeUnite(String quiCreeUnite) {
		this.quiCreeUnite = quiCreeUnite;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_CREE_UNITE", length = 19)
	public Date getQuandCreeUnite() {
		return this.quandCreeUnite;
	}

	public void setQuandCreeUnite(Date quandCreeUnite) {
		this.quandCreeUnite = quandCreeUnite;
	}

	@Column(name = "QUI_MODIF_UNITE", length = 50)
	public String getQuiModifUnite() {
		return this.quiModifUnite;
	}

	public void setQuiModifUnite(String quiModifUnite) {
		this.quiModifUnite = quiModifUnite;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_MODIF_UNITE", length = 19)
	public Date getQuandModifUnite() {
		return this.quandModifUnite;
	}

	public void setQuandModifUnite(Date quandModifUnite) {
		this.quandModifUnite = quandModifUnite;
	}

	@Column(name = "IP_ACCES", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}

	@OneToMany(cascade ={CascadeType.MERGE,CascadeType.PERSIST} , fetch = FetchType.LAZY, mappedBy = "taUnite")
	public Set<TaPrix> getTaPrixes() {
		return this.taPrixes;
	}

	public void setTaPrixes(Set<TaPrix> taPrixes) {
		this.taPrixes = taPrixes;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codeUnite == null) ? 0 : codeUnite.hashCode());
		return result;
	}

//	@PrePersist
//	@PreUpdate
	public void beforePost ()throws Exception{
		this.setCodeUnite(codeUnite.toUpperCase());
	}
}
