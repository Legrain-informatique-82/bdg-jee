package fr.legrain.documents.dao;

//Generated Apr 9, 2009 12:40:07 PM by Hibernate Tools 3.2.0.CR1

import java.beans.PropertyChangeEvent;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityManager;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.PostPersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.apache.log4j.Logger;
import org.eclipse.jface.dialogs.MessageDialog;
import org.eclipse.ui.PlatformUI;

import fr.legrain.articles.dao.TaTvaDAO;
import fr.legrain.documents.events.SWTModificationDocumentEvent;
import fr.legrain.gestCom.Appli.Const;
import fr.legrain.gestCom.Module_Document.ChangeModeEvent;
import fr.legrain.gestCom.Module_Document.ChangeModeListener;
import fr.legrain.gestCom.Module_Document.IDocumentTiers;
import fr.legrain.gestCom.Module_Document.IDocumentTiersComplet;
import fr.legrain.gestCom.Module_Document.IHMEtat;
import fr.legrain.gestCom.Module_Document.ILigneDocumentTiers;
import fr.legrain.gestCom.Module_Document.SWTDocument;
import fr.legrain.gestCom.Module_Document.SWTLigneDocument;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.lib.data.LibCalcul;
import fr.legrain.lib.data.EnumModeObjet;
import fr.legrain.tiers.dao.TaCPaiement;
import fr.legrain.tiers.dao.TaCompteBanqueDAO;
import fr.legrain.tiers.dao.TaTCPaiement;
import fr.legrain.tiers.dao.TaTCPaiementDAO;
import fr.legrain.tiers.dao.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaFacture generated by hbm2java
 */
@Entity
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "TA_FACTURE", uniqueConstraints = @UniqueConstraint(columnNames = "CODE_DOCUMENT"))
//@SequenceGenerator(name = "GEN_FACTURE", sequenceName = "NUM_ID_FACTURE", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaFacture.QN.FIND_BY_DATE, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_DATE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.export,f.netHtCalc,f.netTtcCalc from TaFacture f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like ? and f.dateDocument between ? and ? order by f.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_TIERS_AND_CODE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.export,f.netHtCalc,f.netTtcCalc from TaFacture f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like ? and f.codeDocument like ? order by f.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_TIERS_AND_CODE, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_DATE_PARDATE, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ? order by a.dateDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_CODE, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_DATE_NON_EXPORT, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ?  and a.export<>1 order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_CODE_NON_EXPORT, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? and a.export<>1 order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_DATE_NON_EXPORT_PARDATE, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ?  and a.export<>1 order by a.dateDocument"), 
		@NamedQuery(name=TaFacture.QN.FIND_BY_DATE_EXPORT, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ?  and a.export=1 order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_CODE_EXPORT, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? and a.export=1 order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_TIERS, query="select a from TaFacture a where a.taTiers.codeTiers like ?"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_TIERS_AND_DATE, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_ETAT_DATE, query="select a from TaFacture a where a.dateDocument between ? and ? and a.taEtat.codeEtat = ? order by a.codeDocument"),
		@NamedQuery(name=TaFacture.QN.FIND_BY_ETAT_TIERS_DATE, query="select a from TaFacture a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ? and a.taEtat.codeEtat = ? order by a.codeDocument")
		})
public class TaFacture extends SWTDocument implements ChangeModeListener, java.io.Serializable,
Cloneable,IDocumentTiers,IDocumentTiersComplet{
	
	public static final String TYPE_DOC = "Facture";
	public static class QN {
		public static final String FIND_BY_DATE = "TaFacture.findEntre2Date";
		public static final String FIND_BY_DATE_LIGHT = "TaFacture.findEntre2DateLight";
		public static final String FIND_BY_DATE_PARDATE = "TaFacture.findEntre2DateParDate";
		public static final String FIND_BY_TIERS_AND_CODE = "TaFacture.findEntre2CodeParCode";
		public static final String FIND_BY_TIERS_AND_CODE_LIGHT = "TaFacture.findEntre2CodeParCodeLight";
		public static final String FIND_BY_CODE = "TaFacture.findEntre2Code";
		public static final String FIND_BY_DATE_NON_EXPORT = "TaFacture.findEntre2DateNonExporte";
		public static final String FIND_BY_CODE_NON_EXPORT = "TaFacture.findEntre2CodeNonExporte";
		public static final String FIND_BY_DATE_NON_EXPORT_PARDATE="TaFacture.findEntre2DateNonExporteParDate";
		public static final String FIND_BY_DATE_EXPORT = "TaFacture.findEntre2DateExporte";
		public static final String FIND_BY_CODE_EXPORT = "TaFacture.findEntre2CodeExporte";
		public static final String FIND_BY_TIERS = "TaFacture.findTiers";
		public static final String FIND_BY_TIERS_AND_DATE = "TaFacture.findTiersEntre2Date";
		public static final String FIND_BY_ETAT_DATE = "TaFacture.findEtatDate";
		public static final String FIND_BY_ETAT_TIERS_DATE = "TaFacture.findTiersEtat";
	}

//	private int idDocument;
	private String version;
	@Transient
	private TaRReglement taRReglement;
//	@Transient
//	private TaTPaiement taTPaiement;
	private TaTiers taTiers;
	//private TaCPaiement taCPaiement;
	private String codeDocument;
	private Date dateDocument;
	private Date dateEchDocument;
	private Date dateLivDocument;
	private String libelleDocument;
	@Transient
	private BigDecimal regleDocument = new BigDecimal(0);
	
	private BigDecimal remHtDocument = new BigDecimal(0);
	private BigDecimal txRemHtDocument = new BigDecimal(0);
	private BigDecimal remTtcDocument = new BigDecimal(0);
	private BigDecimal txRemTtcDocument = new BigDecimal(0);
	private Integer nbEDocument = 0;
	private Integer ttc = 0;
	private Integer export = 0;
	private String commentaire;
	private String quiCreeDocument;
	private Date quandCreeDocument;
	private String quiModifDocument;
	private Date quandModifDocument;
	private String ipAcces;
//	private Integer versionObj;
	
	private TaEtat taEtat;
	private TaInfosFacture taInfosDocument;
	private Set<TaRDocument> taRDocuments = new HashSet<TaRDocument>(0);
	private Set<TaRAcompte> taRAcomptes = new HashSet<TaRAcompte>(0);
	private Set<TaRAvoir> taRAvoirs = new HashSet<TaRAvoir>(0);
	private Set<TaRReglement> taRReglements = new HashSet<TaRReglement>(0);
	@Transient
	private ArrayList<LigneTva> lignesTVA = null; //ensemble des lignes de tva du document
	@Transient
	private boolean gestionTVA = true;
	@Transient
	static Logger logger = Logger.getLogger(TaFacture.class.getName());


	private BigDecimal mtTtcCalc = new BigDecimal(0);//après remise ht

	private BigDecimal mtTtcAvantRemiseGlobaleCalc = new BigDecimal(0);

	private BigDecimal mtHtCalc = new BigDecimal(0);//avant remise

	private BigDecimal mtTvaCalc = new BigDecimal(0);//avant remise (champ non rempli actuellement)

	private BigDecimal netTtcCalc = new BigDecimal(0);//après escompte mais 
	                                           //devra prendre valeur avant escompte 

	private BigDecimal netHtCalc = new BigDecimal(0); //après remise ht

	private BigDecimal netTvaCalc = new BigDecimal(0);//après remise ht

	private BigDecimal netAPayer = new BigDecimal(0); //remplace le netTTcCalc après escompte
	
	@Transient
	private BigDecimal remTtcIntermediaireDocument = new BigDecimal(0);
	


	@Transient
	private BigDecimal resteARegler = new BigDecimal(0);

	
	private BigDecimal acomptes = new BigDecimal(0);

	@Transient
	private BigDecimal avoirs = new BigDecimal(0);
	@Transient
	private String libellePaiement ;
	
	@Transient
	private boolean legrain = false;
	
	@Transient
	private BigDecimal regleCompletDocument = new BigDecimal(0);
	@Transient
	private BigDecimal resteAReglerComplet = new BigDecimal(0);
	@Transient
	private String typeDocument;
	
	public TaFacture(boolean legrain) {
		this.legrain = legrain;
		lignes = new ArrayList<TaLFacture>(0);
		lignesTVA = new ArrayList<LigneTva>();
		setTaRReglement(new TaRReglement());
		getTaRReglement().setTaFacture(this);
	}

	public TaFacture() {
		lignes = new ArrayList<TaLFacture>(0);
		lignesTVA = new ArrayList<LigneTva>();
		setTaRReglement(new TaRReglement());
		getTaRReglement().setTaFacture(this);
	}

	public TaFacture(int idFacture) {
		this.idDocument = idFacture;
		lignes = new ArrayList<TaLFacture>(0);
		lignesTVA = new ArrayList<LigneTva>();
		setTaRReglement(new TaRReglement());
		getTaRReglement().setTaFacture(this);
	}

	public TaFacture(String oldCodeFacture) {
		super(oldCodeFacture);
		legrain = true;
		lignes = new ArrayList<TaLFacture>(0);
		this.lignesTVA = new ArrayList<LigneTva>();
		this.modeDocument = EnumModeObjet.C_MO_INSERTION;
		setTaRReglement(new TaRReglement());
		getTaRReglement().setTaFacture(this);
	}

	public TaFacture(int idFacture, TaTPaiement taTPaiement, TaTiers taTiers,
			TaCPaiement taCPaiement,  String codeFacture,
			Date dateFacture, Date dateEchFacture, Date dateLivFacture,
			String libelleFacture, BigDecimal regleFacture,
			BigDecimal remHtFacture, BigDecimal txRemHtFacture,
			BigDecimal remTtcFacture, BigDecimal txRemTtcFacture,
			Integer nbEFacture, Integer ttc, Integer export, String commentaire,
			String quiCreeFacture, Date quandCreeFacture,
			String quiModifFacture, Date quandModifFacture, String ipAcces,
			Integer versionObj, List<TaLFacture> taLFactures,
			TaInfosFacture taInfosFactures, Set<TaRDocument> taRDocuments, Set<TaRAcompte> taRAcomptes) {
		this.idDocument = idFacture;
//		this.taTPaiement = taTPaiement;
		this.taTiers = taTiers;
		//this.taCPaiement = taCPaiement;
		this.codeDocument = codeFacture;
		this.dateDocument = dateFacture;
		this.dateEchDocument = dateEchFacture;
		this.dateLivDocument = dateLivFacture;
		this.libelleDocument = libelleFacture;
		this.regleDocument = regleFacture;
		this.remHtDocument = remHtFacture;
		this.txRemHtDocument = txRemHtFacture;
		this.remTtcDocument = remTtcFacture;
		this.txRemTtcDocument = txRemTtcFacture;
		this.nbEDocument = nbEFacture;
		this.ttc = ttc;
		this.export = export;
		this.commentaire = commentaire;
		this.quiCreeDocument = quiCreeFacture;
		this.quandCreeDocument = quandCreeFacture;
		this.quiModifDocument = quiModifFacture;
		this.quandModifDocument = quandModifFacture;
		this.ipAcces = ipAcces;
		this.versionObj = versionObj;
		this.lignes = taLFactures;
		this.taInfosDocument = taInfosFactures;
		this.taRDocuments = taRDocuments;
		this.taRAcomptes = taRAcomptes;
		setTaRReglement(new TaRReglement());
		getTaRReglement().setTaFacture(this);
	}

//	@Id
//	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_FACTURE")
//	@Column(name = "ID_DOCUMENT", unique = true, nullable = false)
//	@LgrHibernateValidated(champEntite = "", champ = "ID_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
//	public int getIdDocument() {
//		return this.idDocument;
//	}
//
//	public void setIdDocument(int idFacture) {
//		this.idDocument = idFacture;
//	}

	@Column(name = "VERSION", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

////	@ManyToOne(fetch = FetchType.LAZY)
////	@JoinColumn(name = "ID_T_PAIEMENT")
//	@LgrHibernateValidated(champEntite = "", champ = "ID_T_PAIEMENT",table = "TA_T_PAIEMENT",clazz = TaTPaiement.class)
//	@Transient
//	public TaTPaiement getTaTPaiement() {
//		return this.taTPaiement;
//	}
//
//	public void setTaTPaiement(TaTPaiement taTPaiement) {
//		if(this.taTPaiement==null||taTPaiement==null ||
//				!this.taTPaiement.equals(taTPaiement)){
//			this.taTPaiement = taTPaiement;
//		}
//	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_TIERS")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_TIERS",table = "TA_TIERS",clazz = TaTiers.class)
	public TaTiers getTaTiers() {
		return this.taTiers;
	}

	public void setTaTiers(TaTiers taTiers) {
		if(taRAcomptes.size()==0 || rechercheSiMemeTiers(taTiers))
			this.taTiers = taTiers;
	}

	public boolean rechercheSiMemeTiers(TaTiers taTiers){
		for (TaRAcompte acompte : taRAcomptes) {
			if(acompte.getTaAcompte()!=null && acompte.getTaAcompte().getTaTiers()!=null)
				if (!acompte.getTaAcompte().getTaTiers().equals(taTiers))
					return false;
		}
		return true;
	}
//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "ID_C_PAIEMENT")
//	@LgrHibernateValidated(champEntite = "", champ = "ID_C_PAIEMENT",table = "TA_C_PAIEMENT",clazz = TaCPaiement.class)
//	public TaCPaiement getTaCPaiement() {
//		return this.taCPaiement;
//	}
//
//	public void setTaCPaiement(TaCPaiement taCPaiement) {
//		this.taCPaiement = taCPaiement;
//	}


	@Column(name = "CODE_DOCUMENT", unique = true, length = 20)
	@LgrHibernateValidated(champEntite = "", champBd = "CODE_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public String getCodeDocument() {
		return this.codeDocument;
	}

	public void setCodeDocument(String codeFacture) {
		this.codeDocument = codeFacture;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public Date getDateDocument() {
		return this.dateDocument;
	}

	public void setDateDocument(Date dateFacture) {
		if(this.oldDate==null)this.oldDate=dateFacture;
		else
		if(this.dateDocument==null||
				this.dateDocument.compareTo(dateFacture)!=0)
			this.oldDate=this.dateDocument;
		this.dateDocument = dateFacture;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_ECH_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_ECH_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public Date getDateEchDocument() {
		return this.dateEchDocument;
	}

	public void setDateEchDocument(Date dateEchFacture) {
		this.dateEchDocument = dateEchFacture;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_LIV_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_LIV_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public Date getDateLivDocument() {
		return this.dateLivDocument;
	}

	public void setDateLivDocument(Date dateLivFacture) {
		this.dateLivDocument = dateLivFacture;
	}

	@Column(name = "LIBELLE_DOCUMENT")
	@LgrHibernateValidated(champEntite = "", champBd = "LIBELLE_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public String getLibelleDocument() {
		return this.libelleDocument;
	}

	public void setLibelleDocument(String libelleFacture) {
		this.libelleDocument = libelleFacture;
	}

	//@Column(name = "REGLE_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "REGLE_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	@Transient
	public BigDecimal getRegleDocument() {
		if(getTaRReglement()!=null)
		return this.getTaRReglement().getAffectation();
		else
			//return BigDecimal.valueOf(0);
		return this.regleDocument;
	}

	public void setRegleDocument(BigDecimal regleFacture) {
		//if(regleFacture!=null && this.regleDocument.compareTo(regleFacture)!=0){
		this.regleDocument=calculSommeReglementsIntegresEcran();		
		if(getTaRReglement()!=null)
			getTaRReglement().setAffectation(this.regleDocument);
//		else
//			this.regleDocument = calculSommeReglementsNonIntegres();		
			if(legrain) {
				calculTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
//		}
	}

	@Column(name = "REM_HT_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "REM_HT_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getRemHtDocument() {
		return this.remHtDocument;
	}

	public void setRemHtDocument(BigDecimal remHtFacture) {
//		if(this.remHtDocument.compareTo(remHtFacture)!=0){
			this.remHtDocument = remHtFacture;
//		}
	}

	@Column(name = "TX_REM_HT_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "TX_REM_HT_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getTxRemHtDocument() {
		return this.txRemHtDocument;
	}

	public void setTxRemHtDocument(BigDecimal txRemHtFacture) {
		if(txRemHtFacture==null)txRemHtFacture=new BigDecimal(0);
		if(this.txRemHtDocument!=null && this.txRemHtDocument.compareTo(txRemHtFacture)!=0){
			this.txRemHtDocument = txRemHtFacture;
			if(legrain) {
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

//	@AccessType(value="field")
	@Column(name = "REM_TTC_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "REM_TTC_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getRemTtcDocument() {
		return this.remTtcDocument;
	}

	public void setRemTtcDocument(BigDecimal remTtcFacture) {
//		if(this.remTtcDocument.compareTo(remTtcFacture)!=0){	
			this.remTtcDocument = remTtcFacture;
//		}
	}

//	@AccessType(value="field")
	@Column(name = "TX_REM_TTC_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "TX_REM_TTC_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getTxRemTtcDocument() {
		return this.txRemTtcDocument;
	}

	public void setTxRemTtcDocument(BigDecimal txRemTtcFacture) {
		if(txRemTtcFacture==null)txRemTtcFacture=new BigDecimal(0);
		if(this.txRemTtcDocument!=null && this.txRemTtcDocument.compareTo(txRemTtcFacture)!=0){		
			this.txRemTtcDocument = txRemTtcFacture;
			if(legrain) {
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this,"txRemTtcDocument"));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "NB_E_DOCUMENT")
	@LgrHibernateValidated(champEntite = "", champBd = "NB_E_DOCUMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	public Integer getNbEDocument() {
		return this.nbEDocument;
	}

	public void setNbEDocument(Integer nbEFacture) {
		this.nbEDocument = nbEFacture;
	}

	@Column(name = "TTC")
	@LgrHibernateValidated(champEntite = "", champBd = "TTC",table = "TA_FACTURE",clazz = TaFacture.class)
	public Integer getTtc() {
		return this.ttc;
	}

	public void setTtc(Integer ttc) {
		this.ttc = ttc;
	}

	@Column(name = "EXPORT")
	@LgrHibernateValidated(champEntite = "", champBd = "EXPORT",table = "TA_FACTURE",clazz = TaFacture.class)
	public Integer getExport() {
		return this.export;
	}

	public void setExport(Integer export) {
		this.export = export;
	}

	@Column(name = "COMMENTAIRE", length = 2000)
	@LgrHibernateValidated(champEntite = "", champBd = "COMMENTAIRE",table = "TA_FACTURE",clazz = TaFacture.class)
	public String getCommentaire() {
		return this.commentaire;
	}

	public void setCommentaire(String commentaire) {
		if(this.commentaire==null||
				this.commentaire.compareTo(commentaire)!=0){
			this.commentaire = commentaire;		
			if(legrain) {
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_ETAT")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_ETAT",table = "TA_ETAT",clazz = TaEtat.class)
	public TaEtat getTaEtat() {
		return this.taEtat;
	}

	public void setTaEtat(TaEtat taEtat) {
		this.taEtat = taEtat;
	}

	@Column(name = "QUI_CREE_DOCUMENT", length = 50)
	public String getQuiCreeDocument() {
		return this.quiCreeDocument;
	}

	public void setQuiCreeDocument(String quiCreeFacture) {
		this.quiCreeDocument = quiCreeFacture;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_CREE_DOCUMENT", length = 19)
	public Date getQuandCreeDocument() {
		return this.quandCreeDocument;
	}

	public void setQuandCreeDocument(Date quandCreeFacture) {
		this.quandCreeDocument = quandCreeFacture;
	}

	@Column(name = "QUI_MODIF_DOCUMENT", length = 50)
	public String getQuiModifDocument() {
		return this.quiModifDocument;
	}

	public void setQuiModifDocument(String quiModifFacture) {
		this.quiModifDocument = quiModifFacture;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_MODIF_DOCUMENT", length = 19)
	public Date getQuandModifDocument() {
		return this.quandModifDocument;
	}

	public void setQuandModifDocument(Date quandModifFacture) {
		this.quandModifDocument = quandModifFacture;
	}

	@Column(name = "IP_ACCES", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}

//	@Version
//	@Column(name = "VERSION_OBJ")
//	public Integer getVersionObj() {
//		return this.versionObj;
//	}
//
//	public void setVersionObj(Integer versionObj) {
//		this.versionObj = versionObj;
//	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taDocument")
	@OrderBy("numLigneLDocument")
	public List<TaLFacture> getLignes() {
		return this.lignes;
	}

	public void setLignes(List<TaLFacture> taLFactures) {
		this.lignes = taLFactures;
	}

	@javax.persistence.OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taDocument")
	public TaInfosFacture getTaInfosDocument() {
		return this.taInfosDocument;
	}

	public void setTaInfosDocument(TaInfosFacture taInfosFactures) {
		this.taInfosDocument = taInfosFactures;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taFacture")
	public Set<TaRDocument> getTaRDocuments() {
		return this.taRDocuments;
	}

	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		this.taRDocuments = taRDocuments;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taFacture")
	public Set<TaRAvoir> getTaRAvoirs() {
		return taRAvoirs;
	}

	public void setTaRAvoirs(Set<TaRAvoir> taRAvoirs) {
		this.taRAvoirs = taRAvoirs;
	}
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taFacture")
	public Set<TaRAcompte> getTaRAcomptes(){
		return this.taRAcomptes;
	}

	public void setTaRAcomptes(Set<TaRAcompte> taRAcomptes) {
		this.taRAcomptes = taRAcomptes;
	}
	

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taFacture")
	public Set<TaRReglement> getTaRReglements() {
		return taRReglements;
	}

	public void setTaRReglements(Set<TaRReglement> taRReglements) {
		this.taRReglements = taRReglements;
	}
	
	
	/**
	 * Initialisation des propriétés de la facture en fonction du tiers
	 */
	public void changementDeTiers() {
//		if(this.taTiers!=null && this.taTiers.getTaTTvaDoc()!=null && 
//				this.taTiers.getTaTTvaDoc().getCodeTTvaDoc()!=null){
//			if(!this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("F")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("UE")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("HUE")
//			)
//				setGestionTVA(false);
//			else setGestionTVA(true);
//		}else
//			setGestionTVA(true);
	}

	

	
	/*
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 */
//	public Integer typeLigne(String CodeTypeLigne) throws SQLException{		
//		Integer idTLigne;
//		return  idTLigne =LibConversion.stringToInteger(ibApplication.selectCleEtrangere(Const.C_NOM_TA_T_LIGNE,
//				Const.C_ID_T_LIGNE, Variant.STRING, Const.C_CODE_T_LIGNE, CodeTypeLigne));		
//	}

	@Override
	protected boolean beforeAjoutLigne(SWTLigneDocument ligne) {
		// TODO Raccord de méthode auto-généré
		return true;
	}

	@Override
	protected void afterAjoutLigne(SWTLigneDocument ligne) throws ExceptLgr {
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
	}

	@Override
	protected boolean beforeRemoveLigne(SWTLigneDocument ligne) {
		// TODO Raccord de méthode auto-généré
		return true;
	}

	@Override
	protected void afterRemoveLigne(SWTLigneDocument ligne) throws ExceptLgr {
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
	}

	@Transient
	public boolean isGestionTVA() {
		return gestionTVA;
	}

	public void setGestionTVA(boolean gestionTVA) {
		this.gestionTVA = gestionTVA;
	}

	@Transient
	public ArrayList<LigneTva> getLignesTVA() {
		return lignesTVA;
	}

	public void setLignesTVA(ArrayList<LigneTva> lignesTVA) {
		this.lignesTVA = lignesTVA;
	}

	@Override
	protected boolean beforeEnregistrerEntete() {
		// TODO Raccord de méthode auto-généré
		return false;
	}

	@Override
	protected void afterEnregistrerEntete() throws ExceptLgr {
		// TODO Raccord de méthode auto-généré

	}

	@Override
	protected boolean beforeModifierEntete() {
		// TODO Raccord de méthode auto-généré
		return false;
	}

	@Override
	protected void afterModifierEntete() throws ExceptLgr {
		// TODO Raccord de méthode auto-généré

	}

	@Override
	protected boolean beforeSupprimerEntete() {
		// TODO Raccord de méthode auto-généré
		return false;
	}

	@Override
	protected void afterSupprimerEntete() throws ExceptLgr {
		// TODO Raccord de méthode auto-généré

	}



	public void changementMode(ChangeModeEvent evt) {
		// TODO Raccord de méthode auto-généré
		switch (evt.getNouveauMode()) {
		case C_MO_CONSULTATION:
			break;
		case C_MO_EDITION:
			//S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_INSERTION:
//			S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_SUPPRESSION:
			break;
		}

	}
	
	//@Transient
	@Column(name = "MT_TTC_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_TTC_CALC",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getMtTtcCalc() {
		return mtTtcCalc;
	}

	public void setMtTtcCalc(BigDecimal mtTtcCalc) {
		this.mtTtcCalc = LibCalcul.arrondi(mtTtcCalc);
	}
	
	//@Transient
	@Column(name = "MT_HT_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_HT_CALC",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getMtHtCalc() {
		return mtHtCalc;
	}

	public void setMtHtCalc(BigDecimal mtHtCalc) {
		this.mtHtCalc = LibCalcul.arrondi(mtHtCalc);
	}
	
	//@Transient
	@Column(name = "MT_TVA_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_TVA_CALC",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getMtTvaCalc() {
		return mtTvaCalc;
	}

	public void setMtTvaCalc(BigDecimal mtTvaCalc) {
		this.mtTvaCalc = LibCalcul.arrondi(mtTvaCalc);
	}
	
	//@Transient
	@Column(name = "NET_TTC_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_TTC_CALC",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getNetTtcCalc() {
		return netTtcCalc;
	}

	public void setNetTtcCalc(BigDecimal netTtcCalc) {
		this.netTtcCalc = LibCalcul.arrondi(netTtcCalc);
	}
	
	//@Transient
	@Column(name = "NET_HT_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_HT_CALC",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getNetHtCalc() {
		return netHtCalc;
	}

	public void setNetHtCalc(BigDecimal netHtCalc) {
		this.netHtCalc = LibCalcul.arrondi(netHtCalc);
	}
	
	//@Transient
	@Column(name = "NET_TVA_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_TVA_CALC",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getNetTvaCalc() {
		return netTvaCalc;
	}

	public void setNetTvaCalc(BigDecimal netTvaCalc) {
		this.netTvaCalc = LibCalcul.arrondi(netTvaCalc);
	}
	
	//@Transient
	@Column(name = "NET_A_PAYER", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_A_PAYER",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getNetAPayer() {
		return netTtcCalc;
		//return netAPayer;
	}

	public void setNetAPayer(BigDecimal netAPayer) {
		this.netAPayer = LibCalcul.arrondi(netAPayer);
	}
	
	//@Transient
	@Column(name = "MT_TTC_AVT_REM_GLOBALE_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_TTC_AVT_REM_GLOBALE_CALC",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getMtTtcAvantRemiseGlobaleCalc() {
		return mtTtcAvantRemiseGlobaleCalc;
	}

	public void setMtTtcAvantRemiseGlobaleCalc(
			BigDecimal mtTtcAvantRemiseGlobaleCalc) {
		this.mtTtcAvantRemiseGlobaleCalc = mtTtcAvantRemiseGlobaleCalc;
	}



	//@Column(name = "RESTE_A_REGLER", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "RESTE_A_REGLER",table = "TA_FACTURE",clazz = TaFacture.class)
	@Transient
	public BigDecimal getResteAReglerEcran() {
		this.resteARegler= netTtcCalc.subtract(getAcomptes().add(getAvoirs()).add(calculSommeReglementsIntegresEcran()));
		
		return resteARegler;
	}

	@Transient
	public BigDecimal getResteARegler() {
		this.resteARegler= netTtcCalc.subtract(getAcomptes().add(getAvoirs()).add(calculSommeReglementsIntegres()));
		
		return resteARegler;
	}

	public void setResteARegler(BigDecimal resteARegler) {
		this.resteARegler = resteARegler;
	}

	@Column(name = "ACOMPTES", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "ACOMPTES",table = "TA_FACTURE",clazz = TaFacture.class)
	public BigDecimal getAcomptes() {
		calculSommeAcomptes();
		if(acomptes==null)return new BigDecimal(0);
		else return acomptes;
	}
	
	
	public void setAcomptes(BigDecimal acomptes) {
		//Correction bug #1259
		if(acomptes==null || this.acomptes==null || this.acomptes.compareTo(acomptes)!=0){
//		if(this.acomptes.compareTo(acomptes)!=0){
			this.acomptes = acomptes;
			if(legrain) {
				calculTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}


//	@Column(name = "AVOIRS", precision = 15)
//	@LgrHibernateValidated(champEntite = "", champ = "AVOIRS",table = "TA_FACTURE",clazz = TaFacture.class)
	@Transient
	public BigDecimal getAvoirs() {
		return calculSommeAvoirIntegres();
		 //return this.avoirs;
	}
	


	public void setAvoirs(BigDecimal avoirs) {
		//Correction bug #1259
		if(avoirs==null || this.avoirs==null || this.avoirs.compareTo(avoirs)!=0){
//		if(this.acomptes.compareTo(acomptes)!=0){
			this.avoirs = avoirs;
			if(legrain) {
				calculTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	
//	@Column(name = "LIBELLE_PAIEMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "LIBELLE_PAIEMENT",table = "TA_FACTURE",clazz = TaFacture.class)
	@Transient
	public String getLibellePaiement() {
		if(getTaRReglement()!=null&& getTaRReglement().getTaReglement()!=null)
			return getTaRReglement().getTaReglement().getLibelleDocument();
		else
		return "";
	}

	public void setLibellePaiement(String libellePaiement) {
		if(getLibellePaiement()==null||libellePaiement==null ||
				getLibellePaiement().compareTo(libellePaiement)!=0){
			getTaRReglement().getTaReglement().setLibelleDocument(libellePaiement);
			//this.libellePaiement = libellePaiement;		
			if(legrain) {
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}		

	@Transient
	public TaRReglement getTaRReglement() {
		return taRReglement;
	}

	public void setTaRReglement(TaRReglement taRReglement) {
		this.taRReglement = taRReglement;
	}
	
	/**
	 * Repartir le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
	 */
	public void dispatcherTva() {
		
		BigDecimal tvaLigne = new BigDecimal(0); //Montant de TVA de la ligne du document courante
		BigDecimal totalTemp = new BigDecimal(0); //Somme des montants HT des lignes du document (mis à jour au fil des iterations)

		boolean derniereLignePourTVA = false;

		for (Object ligne : lignes) {
			if(((TaLFacture)ligne).getMtHtLDocument()!=null)
				totalTemp = totalTemp.add(((TaLFacture)ligne).getMtHtLDocument());
		}
		if(totalTemp!=null && txRemHtDocument!=null)
			setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));	
		
		for (TaLFacture ligne : getLignes()) {
			if(txRemHtDocument!=null && txRemHtDocument.signum()>0 && ligne.getMtHtLDocument()!=null  && ligne.getMtTtcLDocument()!=null) {
				if(ttc==1){
					((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(((TaLFacture)ligne).getMtTtcLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLApresRemiseGlobaleDocument());
					
				}else{
					((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtHtLDocument().subtract(((TaLFacture)ligne).getMtHtLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtHtLApresRemiseGlobaleDocument());	
				}
			}
		}
		
		
		//pour chaque ligne/code TVA
		for (LigneTva ligneTva : lignesTVA) { 

			if (ligneTva.getMtTva()!=null) {
				int lignepasse=1;
				BigDecimal tvaTmp = ligneTva.getMtTva(); //montant total de la TVA pour cette ligne/code TVA décrémenter du montant de TVA des lignes du documents deja traite
				BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
				BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());
				BigDecimal tvaCalcule = new BigDecimal(0);
				
				//TaLFacture derniereLigneFactureAvecMontantDifferentDeZero = null;
				derniereLignePourTVA = false;

				//pour chaque ligne du document
				for (Object ligne : lignes) {
					//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
					if(((TaLFacture)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
						//si le code TVA de la ligne correspond à celui traite (boucle superieure)
						if(((TaLFacture)ligne).getCodeTvaLDocument()!=null&&((TaLFacture)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
							tvaLigne = prorataMontantTVALigne((TaLFacture)ligne, ligneTva);
							
							tvaTmp =  tvaTmp.subtract(tvaLigne);
							if(tvaTmp.compareTo(resteTVA(ligneTva))==0 && !derniereLignePourTVA) {
								//Le reste de TVA a traiter correspond a la difference d'arrondi,
								//les lignes de documents suivantes (s'il en reste) ont un montant HT nul
								//c'est donc la derniere ligne sur laquelle on peut mettre de la TVA => on ajoute le reliquat
								tvaLigne = tvaLigne.add(tvaTmp);
								derniereLignePourTVA = true;
							}
							totalTemp = totalTemp.add(((TaLFacture)ligne).getMtHtLDocument());

							//===Correction des totaux après remise de la ligne du document
							if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
								if  (lignepasse>= ligneTva.getNbLigneDocument()) {
									((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
								} else {
									if(ttc==1){
										((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(((TaLFacture)ligne).getMtTtcLDocument()
												.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
										((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLApresRemiseGlobaleDocument().divide(BigDecimal.valueOf(1).add(
												 (((TaLFacture)ligne).getTauxTvaLDocument().divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(3,BigDecimal.ROUND_HALF_UP)
											)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP));
										
									}else{
										((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtHtLDocument().subtract(((TaLFacture)ligne).getMtHtLDocument()
												.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
										tvaCalcule = (((TaLFacture)ligne).getMtHtLApresRemiseGlobaleDocument().
										multiply(((TaLFacture)ligne).getTauxTvaLDocument().divide(new BigDecimal(100),MathContext.DECIMAL128))).setScale(2,BigDecimal.ROUND_HALF_UP);
										((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtHtLApresRemiseGlobaleDocument().add(tvaCalcule));	
									}
//									((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(((TaLFacture)ligne).getMtTtcLDocument()
//											.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
								}

							} else {
								if(ttc==1)
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									}else{
										((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(tvaLigne));
									}
								else
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
									}else {
										((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtHtLDocument().add(tvaLigne));
									}

							}
							ttcTmp =  ttcTmp.subtract(((TaLFacture)ligne).getMtTtcLApresRemiseGlobaleDocument());
							htTmp =  htTmp.subtract(((TaLFacture)ligne).getMtHtLApresRemiseGlobaleDocument());

							lignepasse++;
						}
					}
					setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));						

////					setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						

				}
			}

		}


	}
	
	/**
	 * Calcule le montant de TVA d'une ligne du document par rapport au montant total de TVA pour un code TVA donnee
	 * @param ligne - 
	 * @param ligneTva
	 * @return
	 */
	public BigDecimal prorataMontantTVALigne(TaLFacture ligne, LigneTva ligneTva) {
		BigDecimal tvaLigne = new BigDecimal(0);
		
		if (ligneTva.getMontantTotalHt().signum()==0) 
			tvaLigne = ((TaLFacture)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
		else {
//			if  (lignepasse>= ligneTva.getNbLigneDocument()) //si c'est la deniere ligne, on prend tout ce qui reste
//				tvaLigne = tvaTmp;
//			else {
				if(ttc==1){ //si saisie TTC
					if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
						tvaLigne=BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTva().multiply(((TaLFacture)ligne).getMtTtcLDocument())).divide(LibCalcul.
								arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
				else{
					if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
						tvaLigne =BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTva().multiply(((TaLFacture)ligne).getMtHtLDocument())).divide(LibCalcul.
								arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
//			}
		}
		return tvaLigne;
	}
	
	/**
	 * Calcule le montant de TVA d'une ligne du document par rapport au montant total de TVA pour un code TVA donnee <b>avant remise</b>
	 * @param ligne
	 * @param ligneTva
	 * @return
	 */
	public BigDecimal prorataMontantTVALigneAvantRemise(TaLFacture ligne, LigneTva ligneTva) {
		BigDecimal tvaLigne = new BigDecimal(0);
		
		if (ligneTva.getMontantTotalHt().signum()==0) 
			tvaLigne = ((TaLFacture)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
		else {
//			if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//				tvaLigne = tvaAvantRemiseTmp;
//			else {
				if(ttc==1){
					if(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()).signum()<=0)
						tvaLigne=BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
				else{
					if(LibCalcul.arrondi(ligneTva.getMontantTotalHt()).signum()<=0)
						tvaLigne =BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHt()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
//			}
		}
		return tvaLigne;
	}
	
	/**
	 * Calcule le montant de TVA qui reste après répartion de la TVA sur les lignes au prorata du monant HT.
	 * Ce montant de TVA restant de 1 ou 2 centimes provient des arrondis successifs.
	 * @param ligneTva
	 * @return
	 */
	public BigDecimal resteTVAAvantRemise(LigneTva ligneTva) {
		BigDecimal resteTVA = ligneTva.getMtTva();
		for (Object ligne : lignes) {
			//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
			if(((TaLFacture)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
				//si le code TVA de la ligne correspond à celui traite (boucle superieure)
				if(((TaLFacture)ligne).getCodeTvaLDocument()!=null&&((TaLFacture)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
					resteTVA = resteTVA.subtract(prorataMontantTVALigneAvantRemise(((TaLFacture)ligne),ligneTva));
				}
			}
		}
		return resteTVA;
	}
	
	/**
	 * Calcule le montant de TVA qui reste après répartion de la TVA sur les lignes au prorata du monant HT.
	 * Ce montant de TVA restant de 1 ou 2 centimes provient des arrondis successifs.
	 * @param ligneTva
	 * @return
	 */
	public BigDecimal resteTVA(LigneTva ligneTva) {
		BigDecimal resteTVA = ligneTva.getMtTva();
		for (Object ligne : lignes) {
			//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
			if(((TaLFacture)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
				//si le code TVA de la ligne correspond à celui traite (boucle superieure)
				if(((TaLFacture)ligne).getCodeTvaLDocument()!=null&&((TaLFacture)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
					resteTVA = resteTVA.subtract(prorataMontantTVALigne(((TaLFacture)ligne),ligneTva));
				}
			}
		}
		return resteTVA;
	}

//	/**
//	 * Repartir le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
//	 */
//	public void dispatcherTva() {
//
//		BigDecimal tvaLigne = new BigDecimal(0);
//		BigDecimal totalTemp = new BigDecimal(0);
//
//		for (LigneTva ligneTva : lignesTVA) {
//
//			if (ligneTva.getMtTva()!=null) {
//				int lignepasse=1;
//				BigDecimal tvaTmp = ligneTva.getMtTva();
//				BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
//				BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());
//				
//
//				for (Object ligne : lignes) {
//					if(((TaLFacture)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
//						if(((TaLFacture)ligne).getCodeTvaLDocument()!=null&&((TaLFacture)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//							if (ligneTva.getMontantTotalHt().signum()==0) 
//								tvaLigne = ((TaLFacture)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
//							else {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//									tvaLigne = tvaTmp;
//								else {
//									if(ttc==1){
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
//											tvaLigne=BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTva().multiply(((TaLFacture)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//									else{
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
//											tvaLigne =BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTva().multiply(((TaLFacture)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//								}
//							}
//							tvaTmp =  tvaTmp.subtract(tvaLigne);
//							totalTemp = totalTemp.add(((TaLFacture)ligne).getMtHtLDocument());
//
//							if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//									((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
//									((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
//								} else {
//									((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtHtLDocument().subtract(((TaLFacture)ligne).getMtHtLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//									((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(((TaLFacture)ligne).getMtTtcLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//								}
////								ttcTmp =  ttcTmp.subtract(((TaLFacture)ligne).getMtTtcLFacture());
////								htTmp =  htTmp.subtract(((TaLFacture)ligne).getMtHtLFacture());
//							} else {
//								if(ttc==1)
//									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//										((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
//									}else{
//										((TaLFacture)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(tvaLigne));
//									}
//								else
//									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//										((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
//									}else {
//										((TaLFacture)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLFacture)ligne).getMtHtLDocument().add(tvaLigne));
//									}
//
//							}
//							ttcTmp =  ttcTmp.subtract(((TaLFacture)ligne).getMtTtcLApresRemiseGlobaleDocument());
//							htTmp =  htTmp.subtract(((TaLFacture)ligne).getMtHtLApresRemiseGlobaleDocument());
//
//							lignepasse++;
//						}
//					}
//					setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));						
//
////					setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						
//
//				}
//			}
//		}
////		}
//
//	}
	
	public void dispatcherTvaAvantRemise() {
		BigDecimal tvaLigne = new BigDecimal(0);
		
		boolean derniereLignePourTVA = false;

		for (LigneTva ligneTva : lignesTVA) {
			if (ligneTva.getMtTvaAvantRemise()!=null) {
				int lignepasse=1;
				BigDecimal tvaAvantRemiseTmp = ligneTva.getMtTvaAvantRemise();
				
				derniereLignePourTVA = false;

				for (Object ligne : lignes) {
					if(((TaLFacture)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
						if(((TaLFacture)ligne).getCodeTvaLDocument()!=null&&((TaLFacture)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//							if (ligneTva.getMontantTotalHt().signum()==0) 
//								tvaLigne = ((TaLFacture)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
//							else {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//									tvaLigne = tvaAvantRemiseTmp;
//								else {
//									if(ttc==1){
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()).signum()<=0)
//											tvaLigne=BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//									else{
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalHt()).signum()<=0)
//											tvaLigne =BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHt()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//								}
//							}
							tvaLigne = prorataMontantTVALigneAvantRemise((TaLFacture)ligne, ligneTva);
							
							tvaAvantRemiseTmp =  tvaAvantRemiseTmp.subtract(tvaLigne);
							
							if(tvaAvantRemiseTmp.compareTo(resteTVA(ligneTva))==0) {
								//Le reste de TVA a traiter correspond a la difference d'arrondi,
								//les lignes de documents suivantes (s'il en reste) ont un montant HT nul
								//c'est donc la derniere ligne sur laquelle on peut mettre de la TVA => on ajoute le reliquat
								tvaLigne = tvaLigne.add(tvaAvantRemiseTmp);
								derniereLignePourTVA = true;
							}

							if(ttc==1)
								((TaLFacture)ligne).setMtHtLDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(tvaLigne));
							else
								((TaLFacture)ligne).setMtTtcLDocument(((TaLFacture)ligne).getMtHtLDocument().add(tvaLigne));

							lignepasse++;
						}
					}

				}
			}
		}
	}
	
//	public void dispatcherTvaAvantRemise() {
//		BigDecimal tvaLigne = new BigDecimal(0);
//
//		for (LigneTva ligneTva : lignesTVA) {
//			if (ligneTva.getMtTvaAvantRemise()!=null) {
//				int lignepasse=1;
//				BigDecimal tvaAvantRemiseTmp = ligneTva.getMtTvaAvantRemise();
//
//				for (Object ligne : lignes) {
//					if(((TaLFacture)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
//						if(((TaLFacture)ligne).getCodeTvaLDocument()!=null&&((TaLFacture)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//							if (ligneTva.getMontantTotalHt().signum()==0) 
//								tvaLigne = ((TaLFacture)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
//							else {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//									tvaLigne = tvaAvantRemiseTmp;
//								else {
//									if(ttc==1){
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()).signum()<=0)
//											tvaLigne=BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//									else{
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalHt()).signum()<=0)
//											tvaLigne =BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHt()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//								}
//							}
//							tvaAvantRemiseTmp =  tvaAvantRemiseTmp.subtract(tvaLigne);
//
//							if(ttc==1)
//								((TaLFacture)ligne).setMtHtLDocument(((TaLFacture)ligne).getMtTtcLDocument().subtract(tvaLigne));
//							else
//								((TaLFacture)ligne).setMtTtcLDocument(((TaLFacture)ligne).getMtHtLDocument().add(tvaLigne));
//
//							lignepasse++;
//						}
//					}
//
//				}
//			}
//		}
//	}

	/**
	 * Lance la fonction de calcul du montant sur chacunes des lignes du document.
	 */
	public void calculMontantLigneDocument() {
		for (Object ligne : lignes) {
			((TaLFacture)ligne).calculMontant();
		}
	}
	
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 * et mise à jour du montant de la TVA dans les lignes du document
	 */
	public void calculTvaTotal() {
		calculMontantLigneDocument();
		calculLignesTva();
		dispatcherTvaAvantRemise();
		dispatcherTva();
	}

	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 */
	public void calculLignesTva() {
		Map<String,BigDecimal> montantTotalHt = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtc = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalHtAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtcAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVA = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVAAvantRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> tauxTVA = new HashMap<String,BigDecimal>();
		Map<String,Integer> nbLigne = new HashMap<String,Integer>();
		String codeTVA = null;
		TaTvaDAO taTvaDAO = new TaTvaDAO();
		
		/*
		 * calcul de la TVA different en fonction de la propriete TTC
		 */
		BigDecimal ttcLigne = null;
		BigDecimal htLigne = null;
		for (Object ligne : lignes) {
			//en commentaire pour ne pas refaire les calculs pendants les editions, 
			//((TaLFacture)ligne).calculMontant();
			codeTVA = ((TaLFacture)ligne).getCodeTvaLDocument();
			if(codeTVA!=null && !codeTVA.equals("")) {
				ttcLigne = ((TaLFacture)ligne).getMtTtcLDocument();
				htLigne = ((TaLFacture)ligne).getMtHtLDocument();
				if(montantTotalHt.containsKey(codeTVA)) {
					montantTotalTtc.put(codeTVA,montantTotalTtc.get(codeTVA).add(ttcLigne));
					montantTotalHt.put(codeTVA,montantTotalHt.get(codeTVA).add(htLigne));
					montantTotalTtcAvecRemise.put(codeTVA,montantTotalTtcAvecRemise.get(codeTVA).add(ttcLigne));
					montantTotalHtAvecRemise.put(codeTVA,montantTotalHtAvecRemise.get(codeTVA).add(htLigne));
					nbLigne.put(codeTVA,nbLigne.get(codeTVA)+1);
				} else {
					montantTotalTtc.put(codeTVA,ttcLigne);
					montantTotalHt.put(codeTVA,htLigne);
					montantTotalTtcAvecRemise.put(codeTVA,ttcLigne);
					montantTotalHtAvecRemise.put(codeTVA,htLigne);
					tauxTVA.put(codeTVA,((TaLFacture)ligne).getTauxTvaLDocument());
					nbLigne.put(codeTVA,1);
				}
			}
		}

		for (String codeTva : montantTotalTtc.keySet()) {
			//les 2 maps ont les meme cles
			BigDecimal mtTtcTotal = montantTotalTtc.get(codeTva);
			BigDecimal mtHtTotal = montantTotalHt.get(codeTva);
			BigDecimal tva =null;
			//traitement tva avant remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVAAvantRemise.put(codeTva, tva);
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVAAvantRemise.put(codeTva, tva );
			}
			//traitement remise
			if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(     mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100))  )       ));
//				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract(    mtHtTotal.multiply( (txRemHtDocument.divide(new BigDecimal(100))))     ) ) ;
				BigDecimal valeurInterTTC=mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(valeurInterTTC )) ;
				BigDecimal valeurInterHT=mtHtTotal.multiply( txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract( valeurInterHT )) ;
				montantTotalTtcAvecRemise.put(codeTva, mtTtcTotal);
				montantTotalHtAvecRemise.put(codeTva, mtHtTotal);
			} 
			//traitement tva après remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVA.put(codeTva, tva);
				montantTotalHtAvecRemise.put(codeTva, mtTtcTotal.subtract(tva));
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVA.put(codeTva, tva );
				montantTotalTtcAvecRemise.put(codeTva, mtHtTotal.add(tva));
			}
		}

		lignesTVA.clear();
		for (String codeTva : mtTVA.keySet()) {
			LigneTva ligneTva = new LigneTva();
			ligneTva.setCodeTva(codeTva);
			ligneTva.setTauxTva(tauxTVA.get(codeTva));
			ligneTva.setMtTva(mtTVA.get(codeTva));
			ligneTva.setMtTvaAvantRemise(mtTVAAvantRemise.get(codeTva));
			ligneTva.setMontantTotalHt(montantTotalHt.get(codeTva));
			ligneTva.setMontantTotalTtc(montantTotalTtc.get(codeTva));
			ligneTva.setMontantTotalHtAvecRemise(montantTotalHtAvecRemise.get(codeTva));
			ligneTva.setMontantTotalTtcAvecRemise(montantTotalTtcAvecRemise.get(codeTva));
			ligneTva.setLibelle(taTvaDAO.findByCode(codeTva).getLibelleTva());
			ligneTva.setNbLigneDocument(nbLigne.get(codeTva));
			lignesTVA.add(ligneTva);
		}
		
		//dispatcherTva();
	}
	public BigDecimal calculSommeAvoirIntegres(){
		BigDecimal sommeAvoir = new BigDecimal(0);
		for (TaRAvoir taRAvoir : getTaRAvoirs()) {
			if(taRAvoir.getTaAvoir()!=null && (taRAvoir.getEtat()&IHMEtat.integre)!=0 && 
					(taRAvoir.getEtat()&IHMEtat.suppression)==0)
				sommeAvoir=sommeAvoir.add(taRAvoir.getAffectation());
		}
		//setAvoirs(sommeAvoir);
		return sommeAvoir;
	}
	public BigDecimal calculSommeAvoir(){
		BigDecimal sommeAvoir = new BigDecimal(0);
		for (TaRAvoir taRAvoir : getTaRAvoirs()) {
			if(taRAvoir.getTaAvoir()!=null && (taRAvoir.getEtat()&IHMEtat.suppression)==0)
				sommeAvoir=sommeAvoir.add(taRAvoir.getAffectation());
		}
		//setAvoirs(sommeAvoir);
		return sommeAvoir;
	}
	public BigDecimal calculSommeAvoir(TaRAvoir avoirEnCours){
		BigDecimal sommeAvoir = new BigDecimal(0);
		for (TaRAvoir taRAvoir : getTaRAvoirs()) {
			if(taRAvoir.getTaAvoir()!=null && taRAvoir.getId()!=avoirEnCours.getId() && (taRAvoir.getEtat()&IHMEtat.suppression)==0)
				sommeAvoir=sommeAvoir.add(taRAvoir.getAffectation());
		}
		return sommeAvoir;
	}
	public BigDecimal calculSommeAcomptes(TaRAcompte acompteEnCours){
		BigDecimal sommeAcompte = new BigDecimal(0);
		for (TaRAcompte taRAcompte : getTaRAcomptes()) {
			if(taRAcompte.getTaAcompte()!=null && taRAcompte.getId()!=acompteEnCours.getId() && !taRAcompte.isEtatDeSuppression())
				sommeAcompte=sommeAcompte.add(taRAcompte.getAffectation());
		}
		return sommeAcompte;
	}
	
	public void calculSommeAcomptes(){
		BigDecimal sommeAcompte = new BigDecimal(0);
		for (TaRAcompte taRAcompte : getTaRAcomptes()) {
			if(taRAcompte.getTaAcompte()!=null && !taRAcompte.isEtatDeSuppression())
				sommeAcompte=sommeAcompte.add(taRAcompte.getAffectation());
		}
		setAcomptes(sommeAcompte);
	}
	public BigDecimal calculSommeReglementsIntegresEcran(){
		Integer nbReglement=0;
		BigDecimal sommeReglements = new BigDecimal(0);
		for (TaRReglement taReglement : getTaRReglements()) {
			if(taReglement.getTaFacture()!=null && (taReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0 
					&& ((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0))
				sommeReglements=sommeReglements.add(taReglement.getAffectation());
			nbReglement++;
		}
		if(taRReglement!=null && !getTaRReglements().contains(taRReglement)&& 
				!multiReglement())//((taRReglement.getEtatDeSuppression()&IHMEtat.multiple)==0)
			if(taRReglement.getAffectation()!=null){
				sommeReglements=sommeReglements.add(taRReglement.getAffectation());
				nbReglement++;
			}
		logger.debug(sommeReglements);
		logger.debug(nbReglement);	
		return sommeReglements;
}
	
	public BigDecimal calculSommeReglementsIntegres(){
		Integer nbReglement=0;
		BigDecimal sommeReglements = new BigDecimal(0);
		for (TaRReglement taReglement : getTaRReglements()) {
			if(taReglement.getTaFacture()!=null && (taReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0 
					&& ((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0))
				sommeReglements=sommeReglements.add(taReglement.getAffectation());
			nbReglement++;
		}
		logger.debug(sommeReglements);
		logger.debug(nbReglement);
		return sommeReglements;
	}
	public Boolean aDesReglementsIndirects(){
		for (TaRReglement taReglement : getTaRReglements()) {
			if(taReglement.getTaFacture()!=null 
					&& (taReglement.getTaReglement().getEtat()&IHMEtat.integre)==0 
					&& ((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0))
				return true;
		}
		return false;
	}
	
	public Boolean aDesAvoirsIndirects(){
		for (TaRAvoir taRavoir : getTaRAvoirs()) {
			if(taRavoir.getTaFacture()!=null 
					&& (taRavoir.getEtat()&IHMEtat.integre)==0 
					&& ((taRavoir.getEtat()&IHMEtat.suppression)==0))
				return true;
		}
		return false;
	}
	
	public BigDecimal calculSommeReglementsComplet(){
		BigDecimal sommeReglements = new BigDecimal(0);
		for (TaRReglement taReglement : getTaRReglements()) {
			if(taReglement.getTaFacture()!=null 
//					&& (taReglement.getTaReglement().getEtat()&IHMEtat.integre)==0 
					&& ((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0))
				//if(taReglement.getAffectation()!=null)
					sommeReglements=sommeReglements.add(taReglement.getAffectation());
		}
		return sommeReglements;
	}
	
	public BigDecimal calculSommeReglementsComplet(TaRReglement taRReglementEnCours){
		BigDecimal sommeReglements = new BigDecimal(0);
		for (TaRReglement taReglement : getTaRReglements()) {
			if(taReglement.getTaFacture()!=null 
//					&& (taReglement.getTaReglement().getEtat()&IHMEtat.integre)==0 
					&& ((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0) 
					&& taRReglementEnCours.getId()!=taReglement.getId())
				//if(taReglement.getAffectation()!=null)
					sommeReglements=sommeReglements.add(taReglement.getAffectation());
		}
		return sommeReglements;
	}
	
	public BigDecimal calculRegleDocumentComplet(){
//		setRegleDocument(calculSommeReglementsIntegres().add(calculSommeReglementsNonIntegres()));
		regleCompletDocument=calculSommeReglementsComplet().add(getAcomptes().add(calculSommeAvoir()));
		setResteAReglerComplet(getNetTtcCalc().subtract(regleCompletDocument));
		return this.regleCompletDocument;
	}
	
	public void calculRegleDocument(){
		setRegleDocument(calculSommeReglementsIntegresEcran().add(getAcomptes().add(getAvoirs())));
		setResteARegler(getNetTtcCalc().subtract(getRegleDocument()));
	}
	public BigDecimal calculResteAReglerComplet(){
//		setRegleCompletDocument(calculSommeReglementsComplet());
		resteAReglerComplet=getNetTtcCalc().subtract(calculSommeReglementsComplet().add(getAcomptes().add(calculSommeAvoir())));
		return resteAReglerComplet;
	}
	public boolean multiReglement(){
		int nb=0;
		for (TaRReglement taReglement : getTaRReglements()) {
			if (((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0)
					&& (taReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0)
			{
				nb++;
			}
		}		
		return nb>1;
	}
	
	@Transient
	public BigDecimal getRegleCompletDocument() {
		regleCompletDocument=calculSommeReglementsComplet().add(getAcomptes().add(calculSommeAvoir()));
		setResteAReglerComplet(getNetTtcCalc().subtract(regleCompletDocument).subtract(getAcomptes()).subtract(calculSommeAvoir()));		
		return regleCompletDocument;
	}

	@Transient
	public BigDecimal getRegleCompletDocument(TaRReglement taRReglementEnCours) {
		regleCompletDocument=calculSommeReglementsComplet(taRReglementEnCours).add(getAcomptes().add(calculSommeAvoir()));
		setResteAReglerComplet(getNetTtcCalc().subtract(regleCompletDocument).subtract(getAcomptes()).subtract(calculSommeAvoir()));		
		return regleCompletDocument;
	}
	
	public void setRegleCompletDocument(BigDecimal regleCompletDocument) {
		this.regleCompletDocument = regleCompletDocument;
	}
	
	
	@Transient
	public BigDecimal getResteAReglerComplet() {
		resteAReglerComplet=getNetTtcCalc().subtract(calculSommeReglementsComplet().add(getAcomptes().add(calculSommeAvoir())));
		return resteAReglerComplet;
	}

	public void setResteAReglerComplet(BigDecimal resteAReglerComplet) {
		this.resteAReglerComplet = resteAReglerComplet;
	}
	
	public void affecteReglementFacture(String typePaiementDefaut) throws Exception{
		setTaRReglement(creeReglement(null,null,true,typePaiementDefaut));
		getTaRReglement().setEtatDeSuppression(IHMEtat.insertion);
//		getTaRReglement().setEtat(IHMEtat.integre);
		if(!multiReglement()){
			for (TaRReglement taReglement : getTaRReglements()) {
				if (((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0)
						&& (taReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0)
					setTaRReglement(taReglement);				
			}			
		}else{
			setTaRReglement(creeReglement(null,null,false,typePaiementDefaut));
			taRReglement.getTaReglement().setTaTPaiement(null);
			taRReglement.setAffectation(calculSommeReglementsIntegresEcran());
			taRReglement.getTaReglement().setLibelleDocument("Réglements multiples");
			taRReglement.setEtatDeSuppression(IHMEtat.multiple);
			taRReglement.getTaReglement().setEtat(0);
		}
//		mettreAJourDateEcheanceReglement(taRReglement.getTaReglement());
		taRReglement.getTaReglement().setTaTiers(this.taTiers);
		taRReglement.setTaFacture(this);
		
	}
	
	public void modifieLibellePaiementMultiple(){
		String libelleValide="";
		for (TaRReglement taReglement : getTaRReglements()) {
			if (((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0)&& (taReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0)
			{
				if(!multiReglement()&& (taReglement.getTaReglement().getLibelleDocument()!=null&&
						taReglement.getTaReglement().getLibelleDocument().equals("Multiples réglements")))
					libelleValide="";
				else if(!multiReglement())libelleValide=taReglement.getTaReglement().getLibelleDocument();
				else libelleValide="Multiples réglements";
			}
		}
		if(getTaRReglement()!=null && getTaRReglement().getTaReglement()!=null) 
			getTaRReglement().getTaReglement().setLibelleDocument(libelleValide);		
	}
	
	public void modifieTypePaiementMultiple(){
		TaTPaiement taTPaiement=null;
		for (TaRReglement taReglement : getTaRReglements()) {
			if (((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0)
					&& (taReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0)
			{
				if(!multiReglement()) taTPaiement=taReglement.getTaReglement().getTaTPaiement();
			}
		}
		if(getTaRReglement()!=null && getTaRReglement().getTaReglement()!=null) 
			getTaRReglement().getTaReglement().setTaTPaiement(taTPaiement);
	}
	/**
	 * Calcul des totaux de la facture
	 */
	public void calculTotaux() {
		
//			    MT_TVA Numeric(15,2),
			setMtHtCalc(new BigDecimal(0));
			setNetHtCalc(new BigDecimal(0));
			setMtTtcCalc(new BigDecimal(0));
			setMtTtcAvantRemiseGlobaleCalc(new BigDecimal(0));
			for (Object ligne : lignes) {
				if(((TaLFacture)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
					if(((TaLFacture)ligne).getMtHtLApresRemiseGlobaleDocument()!=null) {
						setNetHtCalc(getNetHtCalc().add(((TaLFacture)ligne).getMtHtLApresRemiseGlobaleDocument()));
					}if(((TaLFacture)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
						setMtTtcCalc(getMtTtcCalc().add(((TaLFacture)ligne).getMtTtcLApresRemiseGlobaleDocument()));
					if(((TaLFacture)ligne).getMtHtLDocument()!=null)
						setMtHtCalc(getMtHtCalc().add(((TaLFacture)ligne).getMtHtLDocument()));
					if(((TaLFacture)ligne).getMtTtcLDocument()!=null)
						setMtTtcAvantRemiseGlobaleCalc(getMtTtcAvantRemiseGlobaleCalc().add(((TaLFacture)ligne).getMtTtcLDocument()));
				}
				
			}
//			setRemHtDocument(getMtHtCalc().subtract(getNetHtCalc()));
			setNetTvaCalc(getMtTtcCalc().subtract(getNetHtCalc()));
			BigDecimal tva = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tva = tva.add(ligneTva.getMtTva());
			}
			if(tva.compareTo(getNetTvaCalc())!=0) {
				logger.error("Montant de la TVA incorrect : "+getNetTvaCalc()+" ** "+tva);
			}
			BigDecimal tvaAvantRemise = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tvaAvantRemise = tvaAvantRemise.add(ligneTva.getMtTvaAvantRemise());
			}
			setMtTvaCalc(tvaAvantRemise);
			//setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getRemTtcFacture().divide(new BigDecimal(100)))));
			setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP)));
//			setNetTtcCalc(getMtTtcAvantRemiseGlobaleCalc().subtract(getMtTtcAvantRemiseGlobaleCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100)))));
			
			/*
			 * remise HT déjà calculée dans dispatcherTva()
			 */
			setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()).setScale(2,BigDecimal.ROUND_HALF_UP));
			calculSommeAcomptes();
			//calculSommeAvoirIntegres();
			//modifié suite à changement écran le 23/04/2010 par isa
			//setNetAPayer(getNetTtcCalc().subtract(getRegleDocument()));
			setResteARegler(getNetTtcCalc().subtract(getRegleDocument()).subtract(getAcomptes()).subtract(calculSommeAvoirIntegres()));
			
	}
	
	public void calculeTvaEtTotaux(){
		calculTvaTotal();
		calculTotaux();
	}
	
	public void propertyChange(PropertyChangeEvent evt) {
		if(evt.getPropertyName().equals("qteLFacture")
				|| evt.getPropertyName().equals("qte2LFacture")
				|| evt.getPropertyName().equals("prixULFacture")
				|| evt.getPropertyName().equals("remTxLFacture")
				){
			calculeTvaEtTotaux();
			try {
				fireModificationDocument(new SWTModificationDocumentEvent(this));
			} catch (Exception e) {
				logger.error("",e);
			}
		}
	}
	

	public void setLegrain(boolean legrain) {
		this.legrain = legrain;
		for (TaLFacture ligne : getLignes()) {
			ligne.setLegrain(legrain);
		}		
	}

	@Override
	protected void reinitialiseNumLignes() {
//		for (Object ligne : lignes) {
//			((TaLFacture)ligne).setNumLigneLDocument(
//					((TaLFacture) ligne).getNUM_LIGNE());
//		}
		
	}

	
//	public TaFacture clone() {
//		TaFacture doc = new TaFacture(true);
//		try {
//			//doc = (TaFacture)super.clone();
//			doc.setIdDocument(0);
//			doc.setVersion(version);
//			doc.setTaTPaiement(taTPaiement);
//			doc.setTaTiers(taTiers);
////			doc.setTaCPaiement(taCPaiement);
//			doc.setCodeDocument("");
//			doc.setDateDocument(dateDocument);
//			doc.setDateEchDocument(dateEchDocument);
//			doc.setDateLivDocument(dateLivDocument);
//			doc.setLibelleDocument("");
//			doc.setRegleDocument(regleDocument);
//			doc.setRemHtDocument(remHtDocument);
//			doc.setTxRemHtDocument(txRemHtDocument);
//			doc.setRemTtcDocument(remTtcDocument);
//			doc.setTxRemTtcDocument(txRemTtcDocument);
//			doc.setNbEDocument(nbEDocument);
//			doc.setTtc(ttc);
//			doc.setExport(export);
//			doc.setCommentaire(commentaire);
//			doc.setQuiCreeDocument(quiCreeDocument);
//			doc.setQuandCreeDocument(quandCreeDocument);
//			doc.setQuiModifDocument(quiModifDocument);
//			doc.setQuandModifDocument(quandModifDocument);
//			doc.setIpAcces(ipAcces);
//			doc.setVersionObj(versionObj);
//			
//			for (TaLFacture ligne : getLignes()) {
//				TaLFacture temp =ligne.clone(); 
//				temp.setTaDocument(doc);
//				doc.addLigne(temp);
//			}
//			TaInfosFacture infos = getTaInfosDocument().clone();
//			infos.setTaDocument(doc);
//			doc.setTaInfosDocument(infos);
//		} catch(Exception cnse) {
//			logger.error("",cnse);
//		}
//		// on renvoie le clone
//		return doc;
//	}


	public void addRReglement(TaRReglement taReglement){
		if(!this.getTaRReglements().contains(taReglement)){
			taReglement.setTaFacture(this);
			this.getTaRReglements().add(taReglement);	
		}
		//calculSommeAcomptes();
	}
	public void removeReglement(TaRReglement taRReglement){
		this.getTaRReglements().remove(taRReglement);
		
//		calculSommeAcomptes();
	}

	public void removeTousRReglements(EntityManager em) throws Exception{
		List<TaRReglement> listeTemp=new LinkedList<TaRReglement>();
		for (TaRReglement element : getTaRReglements()) {
			listeTemp.add(element);
//			removeReglement(element);
			element.getTaReglement().removeReglement(element);
			if(element.getTaReglement().getTaRReglements().size()==0)
			{
				//passage ejb new TaReglementDAO().supprimer(element.getTaReglement());
			}
		} 

		for (TaRReglement element : listeTemp) {
			removeReglement(element);
		}
//		calculSommeAcomptes();
	}
	

	public void removeTousRAcomptes(EntityManager em) throws Exception{
		List<TaRAcompte> listeTemp=new LinkedList<TaRAcompte>();
		for (TaRAcompte element : getTaRAcomptes()) {
			listeTemp.add(element);
			element.getTaAcompte().removeRAcompte(element);
		} 

		for (TaRAcompte element : listeTemp) {
			removeRAcompte(element);
		}
	}
	public void removeTousRAvoirs(EntityManager em) throws Exception{
		List<TaRAvoir> listeTemp=new LinkedList<TaRAvoir>();
		for (TaRAvoir element : getTaRAvoirs()) {
			listeTemp.add(element);
			element.getTaAvoir().removeRAvoir(element);
		} 

		for (TaRAvoir element : listeTemp) {
			removeRAvoir(element);
		}
	}
	
	public void gestionReglement(TaRReglement taReglement){
		if(taReglement.getAffectation()==null
				//||taReglement.getAffectation().compareTo(BigDecimal.valueOf(0))==0
				||(taReglement.getTaReglement().getEtat()&IHMEtat.integre)==0){
			removeReglement(taReglement);
		}else
			if((taReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0)
				addRReglement(taReglement);
	}

	public void addRAcompte(TaRAcompte taRAcompte){
		if(!this.getTaRAcomptes().contains(taRAcompte))
			this.getTaRAcomptes().add(taRAcompte);	
		calculSommeAcomptes();
	}
	public void removeRAvoir(TaRAvoir taRAvoir){
		this.getTaRAvoirs().remove(taRAvoir);
		calculSommeAvoir();
	}

	public void addRAvoir(TaRAvoir taRAvoir){
		if(!this.getTaRAvoirs().contains(taRAvoir))
			this.getTaRAvoirs().add(taRAvoir);	
		setAvoirs(calculSommeAvoir());
		
	}
	public void removeRAcompte(TaRAcompte taRAcompte){
		this.getTaRAcomptes().remove(taRAcompte);
		calculSommeAcomptes();
	}

	@Transient
	public String getTypeDocument() {
		return TYPE_DOC;
	}


	public void setTypeDocument(String typeDocument) {
		this.typeDocument=typeDocument;
	}

//
//	@Override
//	public int hashCode() {
//		final int prime = 31;
//		int result = 1;
//		result = prime * result
//				+ ((codeDocument == null) ? 0 : codeDocument.hashCode());
//		return result;
//	}



	public TaRReglement creeReglement(EntityManager Em,TaRReglement taRReglement,Boolean integrer,String typePaiementDefaut) throws Exception{
		if(Em==null)new TaRReglementDAO().getEntityManager();
//		EntityManager Em=new TaRReglementDAO().getEntityManager();
		if(taRReglement!=null){
			taRReglement.setTaFacture(this);
			taRReglement.getTaReglement().setDateDocument(this.getDateDocument());
			taRReglement.getTaReglement().setDateLivDocument(this.getDateEchDocument());
			taRReglement.getTaReglement().setTaCompteBanque(new TaCompteBanqueDAO().findByTiersEntreprise(taRReglement.getTaReglement().getTaTPaiement()));
//			taReglement.setEtat(IHMEtat.integre);
		}else{
			Boolean devientMultiReglement=reglementExiste() &&
				getTaRReglement().getTaReglement().getTaRReglements().size()>0 && integrer;
			Integer report=0;
			Integer finDeMois=0;
			TaTPaiement typePaiement=null;
			TaRReglement taRReglementTmp = new TaRReglement();
			TaReglement taReglement = new TaReglement();
			taRReglementTmp.setTaFacture(this);
			taRReglementTmp.setTaReglement(taReglement);		
			taRReglementTmp.getTaReglement().setDateDocument(this.getDateDocument());
			taRReglementTmp.getTaReglement().setDateLivDocument(this.getDateEchDocument());
			if(!devientMultiReglement && getTaRReglement()!=null && getTaRReglement().getTaReglement()!=null && 
					getTaRReglement().getTaReglement().getTaTPaiement()!=null){
				typePaiement=getTaRReglement().getTaReglement().getTaTPaiement();
				report=getTaRReglement().getTaReglement().getTaTPaiement().getReportTPaiement();
				finDeMois=getTaRReglement().getTaReglement().getTaTPaiement().getFinMoisTPaiement();
			}				
			else
			if(this.taTiers!=null && this.taTiers.getTaTPaiement()!=null ){
				typePaiement=this.taTiers.getTaTPaiement();
					report=this.taTiers.getTaTPaiement().getReportTPaiement();
					finDeMois=this.taTiers.getTaTPaiement().getFinMoisTPaiement();
			}
			
			else {
				TaTPaiementDAO taTPaiementDAO = new TaTPaiementDAO();
				if (typePaiementDefaut == null || typePaiementDefaut=="")
					typePaiementDefaut="C";
				try {
					typePaiement = taTPaiementDAO
							.findByCode(typePaiementDefaut);

				} catch (Exception e) {
				}
				//typePaiement=new TaTPaiementDAO(Em).findByCode("C");
			}
			if(taRReglementTmp.getTaReglement().getNetTtcCalc().signum()>0){	
			taRReglementTmp.getTaReglement().setTaTPaiement(typePaiement);
			if(taRReglementTmp.getTaReglement().getLibelleDocument()==null || 
					taRReglementTmp.getTaReglement().getLibelleDocument().equals(""))
			taRReglementTmp.getTaReglement().setLibelleDocument(typePaiement.getLibTPaiement());
			}
			//taRReglementTmp.getTaReglement().setDateLivDocument(this.getDateEchDocument());
			//taRReglementTmp.getTaReglement().setDateLivDocument(calculDateEcheance(report,finDeMois,typePaiement));
			
			
			taRReglementTmp.getTaReglement().setTaCompteBanque(new TaCompteBanqueDAO().findByTiersEntreprise(typePaiement));
			taRReglementTmp.getTaReglement().setTaTiers(this.taTiers);
			taRReglementTmp.setEtatDeSuppression(IHMEtat.insertion);
			taRReglement=taRReglementTmp;
		}
		taRReglement.getTaReglement().addRReglement(taRReglement);
		if((taRReglement.getTaReglement().getEtat()&IHMEtat.multiple)==0 && integrer)	
			taRReglement.getTaReglement().setEtat(IHMEtat.integre);
		else 
			taRReglement.getTaReglement().setEtat(0);
			List<String> listeCodes = new LinkedList<String>();
			for (TaRReglement reglement : this.getTaRReglements()) {
				listeCodes.add(reglement.getTaReglement().getCodeDocument());
			}
			if(taRReglement.getTaReglement().getCodeDocument()==null ||taRReglement.getTaReglement().getCodeDocument().equals(""))
				//passage ejb taRReglement.getTaReglement().setCodeDocument(new TaReglementDAO().genereCode(listeCodes));
		return taRReglement;
			return taRReglement;
	}

	@Transient
	public BigDecimal getRemTtcIntermediaireDocument() {
		return mtTtcAvantRemiseGlobaleCalc.subtract(mtTtcCalc);
	}

//	@Transient
//	public List<ILigneDocumentTiers> calculNbReelLigneImpression(int coupure,ArrayList<ILigneDocumentTiers>ligneInitiales){
//		int nbLigne=0;
//		int rangImpression=0;
//		LinkedList<ILigneDocumentTiers> listeFinale=new LinkedList<ILigneDocumentTiers>();
//		LinkedList<ILigneDocumentTiers> liste2=new LinkedList<ILigneDocumentTiers>();
//		for (Object ligne : ligneInitiales) {
//			liste2.clear();
//			liste2=((SWTLigneDocument)ligne).creeLigneImpression_indirect(coupure,rangImpression);
//			for (ILigneDocumentTiers ligneFinale : liste2) {
//				listeFinale.add(ligneFinale);
//			}
//			rangImpression++;
//			
//			//nbLigne=nbLigne+((TaLFacture)ligne).calculNbLigneLibelle(coupure);
//		}
//		return listeFinale;
//	}
	
	

	@Override
	public Object clone() throws CloneNotSupportedException {
		TaFacture doc = new TaFacture(true);
		try {
			doc.setIdDocument(0);
			doc.setVersion(version);
			//doc.setTaTPaiement(taTPaiement);
			doc.setTaTiers(taTiers);
			//doc.setTaCPaiement(taCPaiement);
			doc.setCodeDocument("");
			doc.setDateDocument(dateDocument);
			doc.setDateEchDocument(dateEchDocument);
			doc.setDateLivDocument(dateLivDocument);
			doc.setLibelleDocument("");

			doc.setRemHtDocument(remHtDocument);
			doc.setTxRemHtDocument(txRemHtDocument);
			doc.setRemTtcDocument(remTtcDocument);
			doc.setTxRemTtcDocument(txRemTtcDocument);
			doc.setNbEDocument(nbEDocument);
			doc.setTtc(ttc);
			doc.setExport(export);
			doc.setCommentaire(commentaire);
			doc.setQuiCreeDocument(quiCreeDocument);
			doc.setQuandCreeDocument(quandCreeDocument);
			doc.setQuiModifDocument(quiModifDocument);
			doc.setQuandModifDocument(quandModifDocument);
			doc.setIpAcces(ipAcces);
			doc.setVersionObj(versionObj);
			
			for (TaLFacture ligne : getLignes()) {
				TaLFacture temp =ligne.clone(); 
				temp.setTaDocument(doc);
				doc.addLigne(temp);
			}
			TaInfosFacture infos = getTaInfosDocument().clone();
			infos.setTaDocument(doc);
			doc.setTaInfosDocument(infos);
		} catch(Exception cnse) {
			logger.error("",cnse);
		}
		// on renvoie le clone
		return doc;
	}
	

	@Override
	public void calculDateEcheanceAbstract(Integer report, Integer finDeMois) {
		// TODO Auto-generated method stub
		calculDateEcheanceAbstract(report,finDeMois,null);
	}
	public Date calculDateEcheanceAbstract(Integer report, Integer finDeMois,TaTPaiement taTPaiement) {

		return calculDateEcheance(report,finDeMois,taTPaiement);
	}
	public Date calculDateEcheance(Integer report, Integer finDeMois,TaTPaiement taTPaiement) {
		TaTCPaiementDAO taTCPaiementDAO = new TaTCPaiementDAO();
		TaTCPaiement typeCP = taTCPaiementDAO.findByCode(TaTCPaiement.C_CODE_TYPE_FACTURE);
		TaCPaiement conditionDoc = null;
		TaCPaiement conditionTiers = null;
		TaCPaiement conditionSaisie = null;
		TaCPaiement conditionTPaiement = null;
		
		if(typeCP!=null) conditionDoc = typeCP.getTaCPaiement();
		if(getTaTiers()!=null) conditionTiers = getTaTiers().getTaCPaiement();
		if(taTPaiement!=null){
			conditionTPaiement=new TaCPaiement();
			conditionTPaiement.setReportCPaiement(taTPaiement.getReportTPaiement());
			conditionTPaiement.setFinMoisCPaiement(taTPaiement.getFinMoisTPaiement());
		}
		if(report!=null || finDeMois!=null) { 
			conditionSaisie = new TaCPaiement();
			if(report!=null)
				conditionSaisie.setReportCPaiement(report);
			if(finDeMois!=null)
				conditionSaisie.setFinMoisCPaiement(finDeMois);
		}
		
		//on applique toute les conditions par ordre décroissant de priorité, la derniere valide est conservée
		Date nouvelleDate = getDateDocument();
		if(conditionDoc!=null) {
			nouvelleDate = conditionDoc.calculeNouvelleDate(getDateDocument());
		}
		if(conditionTPaiement!=null){
			nouvelleDate = conditionTPaiement.calculeNouvelleDate(getDateDocument());
		}
		if(conditionTiers!=null) {
			nouvelleDate = conditionTiers.calculeNouvelleDate(getDateDocument());
		}
		if(conditionSaisie!=null) {
			nouvelleDate = conditionSaisie.calculeNouvelleDate(getDateDocument());
		}
		setDateEchDocument(nouvelleDate);
		return nouvelleDate;
	}


	public LinkedList<TaRReglement> rechercheSiDocumentContientTraite(String typeTraite){
		LinkedList<TaRReglement> listeTraite =new LinkedList<TaRReglement>();
		for (TaRReglement rReglement : getTaRReglements()) {
			if(rReglement.getTaReglement().getTaTPaiement()!=null){
				if(rReglement.getTaReglement().getTaTPaiement().getCodeTPaiement().equals(typeTraite)
						&& (rReglement.getTaReglement().getEtat()&IHMEtat.integre)!=0 )
					listeTraite.add(rReglement);				
			}
		}
		return listeTraite;
	}

	public boolean reglementExiste(){
		return taRReglement!=null && taRReglement.getTaReglement()!=null ;
	}

	public boolean reglementRempli(){
		for (TaRReglement elem : getTaRReglements()) {
			if(elem.getAffectation().signum()!=0)
				return true;
		}
		return false;
	}
	
	public void mettreAJourDateEcheanceReglements(){
		if(!multiReglement()){
		for (TaRReglement rReglement : getTaRReglements()) {
			if(rReglement.getTaReglement()!=null){
				if(  !rReglement.getTaReglement().affectationMultiple(this))
					rReglement.getTaReglement().setDateLivDocument(this.getDateEchDocument());
				}
			}
		}
	}
	

	public boolean contientReglementAffectationMultiple(){
		for (TaRReglement rReglement : getTaRReglements()) {
			if(rReglement.getTaReglement()!=null && !rReglement.getTaReglement().affectationMultiple(this)){
				if(  rReglement.getTaReglement().affectationMultiple(this))
					return true;
				}
			}
		return false;
	}
	public void mettreAJourDateEcheanceReglement(TaReglement reglement){
		if(!multiReglement() && !reglement.affectationMultiple(this))
			reglement.setDateLivDocument(this.getDateEchDocument());
	}


	
	
	@Transient
	public List<ILigneDocumentTiers> getLignesGeneral(){
		return this.lignes;
	}
	
	@Transient
	public boolean isLegrain() {
		// TODO Auto-generated method stub
		return legrain;
	}

	
	@PostPersist
	public void verifPostPersist() throws Exception{
		if(this.taInfosDocument==null ){
			MessageDialog.openError(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), "", "le document n° "+this.codeDocument+" a une infos facture nulle, appelez le service maintenace");
				throw new Exception("Le document n° "+this.codeDocument+" a une infos facture nulle, appelez le service maintenance");
			}
		}
	
	@PreUpdate
	public void verifUpdate() throws Exception{
		if(this.getTaInfosDocument()==null ){
			MessageDialog.openError(PlatformUI.getWorkbench().getActiveWorkbenchWindow().getShell(), "",  "le document n° "+this.codeDocument+" a une infos facture nulle, appelez le service maintenance");
			throw new Exception("Le document n° "+this.codeDocument+" a une infos facture nulle, appelez le service maintenance");
		}
	}
}
