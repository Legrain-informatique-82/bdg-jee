package fr.legrain.documents.dao;

// Generated Apr 7, 2009 3:27:23 PM by Hibernate Tools 3.2.0.CR1

import java.math.BigDecimal;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import fr.legrain.gestCom.Module_Document.ChangeModeEvent;
import fr.legrain.gestCom.Module_Document.ChangeModeListener;
import fr.legrain.gestCom.Module_Document.IDocumentTiers;
import fr.legrain.gestCom.Module_Document.IDocumentTiersComplet;
import fr.legrain.gestCom.Module_Document.IInfosDocumentTiers;
import fr.legrain.gestCom.Module_Document.ILigneDocumentTiers;
import fr.legrain.gestCom.Module_Document.SWTDocument;
import fr.legrain.gestCom.Module_Document.SWTLigneDocument;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.tiers.dao.TaCompteBanque;
import fr.legrain.tiers.dao.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaRDocument generated by hbm2java
 */
@Entity
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "TA_REGLEMENT")
//@SequenceGenerator(name = "GEN_TA_REGLEMENT", sequenceName = "NUM_ID_REGLEMENT", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaReglement.QN.FIND_BY_DATE, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ? order by a.codeDocument"), 
		@NamedQuery(name=TaReglement.QN.FIND_BY_TIERS_AND_CODE, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaReglement.QN.FIND_BY_CODE, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaReglement.QN.FIND_BY_DATE_PARDATE, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ?  and a.export<>1 order by a.dateDocument"),
		@NamedQuery(name=TaReglement.QN.FIND_BY_DATE_NON_EXPORT, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ?  and a.export<>1 order by a.codeDocument"), 
		@NamedQuery(name=TaReglement.QN.FIND_BY_CODE_NON_EXPORT, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? and a.export<>1 order by a.codeDocument"),		
		@NamedQuery(name=TaReglement.QN.FIND_BY_DATE_EXPORT, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ?  and a.export=1 order by a.codeDocument"), 
		@NamedQuery(name=TaReglement.QN.FIND_BY_CODE_EXPORT, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? and a.export=1 order by a.codeDocument"),		
		@NamedQuery(name=TaReglement.QN.FIND_BY_TIERS_AND_DATE, query="select a from TaReglement a where a.taTiers.codeTiers like ? and a.dateDocument between ? and ? order by a.codeDocument")
		})
public class TaReglement extends SWTDocument implements ChangeModeListener,IDocumentTiers,IDocumentTiersComplet, java.io.Serializable,
Cloneable{
	public static final String TYPE_DOC = "Reglement";
	public static class QN {
		public static final String FIND_BY_DATE = "TaReglement.findEntre2Date";
		public static final String FIND_BY_TIERS_AND_CODE = "TaReglement.findEntre2CodeParCode";
		public static final String FIND_BY_DATE_PARDATE = "TaReglement.findEntre2DateParDate";
		public static final String FIND_BY_CODE = "TaReglement.findEntre2Code";
		public static final String FIND_BY_DATE_NON_EXPORT = "TaReglement.findEntre2DateNonExporte";
		public static final String FIND_BY_CODE_NON_EXPORT = "TaReglement.findEntre2CodeNonExporte";
		public static final String FIND_BY_DATE_EXPORT = "TaReglement.findEntre2DateExporte";
		public static final String FIND_BY_CODE_EXPORT = "TaReglement.findEntre2CodeExporte";
		public static final String FIND_BY_TIERS_AND_DATE = "TaReglement.findTiersEntre2Date";
	}

//	private int id;
	private String version;
	private String codeDocument = "";
	private TaTiers taTiers;
	private Date dateDocument;
	private Date dateLivDocument; //dateEncaissement
	private TaTPaiement taTPaiement;
	private String libelleDocument;
	private TaCompteBanque taCompteBanque;
	private Integer etat = 0;
	private Integer export = 0;
	private BigDecimal netTtcCalc = new BigDecimal(0); //montantReglement
	private String quiCreeDocument;
	private Date quandCreeDocument;
	private String quiModifDocument;
	private Date quandModifDocument;
	private String ipAcces;
	
	private Set<TaFacture> taFactures = new HashSet<TaFacture>(0);
	private Set<TaRReglement> taRReglements = new HashSet<TaRReglement>(0);
	@Transient	
	private BigDecimal resteAAffecter = new BigDecimal(0);
	
//	private Set<TaRDocument> taRDocuments = new HashSet<TaRDocument>(0);
    
//    @Transient
//    private List<TaReglement> taRReglements = new LinkedList<TaReglement>();
    
    @Transient
	private int etatDeSuppression = 0;
    
    
	public TaReglement() {
	}

//	public TaReglement(int idRAcompte) {
//		this.id = idRAcompte;
//	}
//
//
//	@Id
//	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_TA_REGLEMENT")
//	@Column(name = "ID_REGLEMENT", unique = true, nullable = false)
//	@LgrHibernateValidated(champEntite = "", champ = "ID_REGLEMENT",table = "TA_REGLEMENT",clazz = TaReglement.class)
//	public int getId() {
//		return this.id;
//	}
//
//	public void setId(int idReglement) {
//		this.id = idReglement;
//	}

	@Column(name = "VERSION", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}


	@Column(name = "CODE_DOCUMENT", unique = true, length = 20)
	@LgrHibernateValidated(champEntite = "", champBd = "CODE_DOCUMENT",table = "TA_REGLEMENT",clazz = TaReglement.class)
	public String getCodeDocument() {
		return codeDocument;
	}

	public void setCodeDocument(String codeReglement) {
		this.codeDocument = codeReglement;
	}
	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_TIERS")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_TIERS",table = "TA_TIERS",clazz = TaTiers.class)
	public TaTiers getTaTiers() {
		return this.taTiers;
	}

	public void setTaTiers(TaTiers taTiers) {
		this.taTiers = taTiers;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_DOCUMENT",table = "TA_REGLEMENT",clazz = TaReglement.class)
	public Date getDateDocument() {
		return dateDocument;
	}

	public void setDateDocument(Date dateReglement) {
		this.dateDocument = dateReglement;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_LIV_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_LIV_DOCUMENT",table = "TA_REGLEMENT",clazz = TaReglement.class)
	public Date getDateLivDocument() {
		return dateLivDocument;
	}

	public void setDateLivDocument(Date dateEncaissement) {
		this.dateLivDocument = dateEncaissement;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_T_PAIEMENT")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_T_PAIEMENT",table = "TA_T_PAIEMENT",clazz = TaTPaiement.class)
	public TaTPaiement getTaTPaiement() {
		return taTPaiement;
	}

	public void setTaTPaiement(TaTPaiement taTPaiement) {
		this.taTPaiement = taTPaiement;
	}

	@Column(name = "LIBELLE_DOCUMENT", unique = true, length = 20)
	@LgrHibernateValidated(champEntite = "", champBd = "LIBELLE_DOCUMENT",table = "TA_REGLEMENT",clazz = TaReglement.class)
	public String getLibelleDocument() {
		return libelleDocument;
	}

	public void setLibelleDocument(String libellePaiement) {
		this.libelleDocument = libellePaiement;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_COMPTE_BANQUE")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_COMPTE_BANQUE",table = "TA_COMPTE_BANQUE",clazz = TaCompteBanque.class)
	public TaCompteBanque getTaCompteBanque() {
		return taCompteBanque;
	}

	public void setTaCompteBanque(TaCompteBanque taCompteBanque) {
		this.taCompteBanque = taCompteBanque;
	}

	@Column(name = "ETAT")
	@LgrHibernateValidated(champEntite = "", champBd = "ETAT",table = "TA_REGLEMENT",clazz = TaReglement.class)
	public Integer getEtat() {
		return etat;
	}

	public void setEtat(Integer etat) {
		this.etat = etat;
	}

	@Column(name = "EXPORT")
	@LgrHibernateValidated(champEntite = "", champBd = "EXPORT",table = "TA_REGLEMENT",clazz = TaReglement.class)
	public Integer getExport() {
		return export;
	}

	public void setExport(Integer export) {
		this.export = export;
	}
	
//	@Column(name = "AFFECTATION", precision = 15)
//	@LgrHibernateValidated(champEntite = "", champ = "AFFECTATION",table = "TA_REGLEMENT",clazz = TaReglement.class)
//	public BigDecimal getAffectation() {
//		return affectation ;
//	}
//
//	public void setAffectation(BigDecimal affectation) {
//		this.affectation = affectation;
//	}

	@Column(name = "NET_TTC_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_TTC_CALC",table = "TA_REGLEMENT",clazz = TaReglement.class)
	public BigDecimal getNetTtcCalc() {
		return netTtcCalc;
	}

	public void setNetTtcCalc(BigDecimal montantReglement) {
		this.netTtcCalc = montantReglement;
	}
//	
	@OneToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH}, fetch = FetchType.LAZY, mappedBy = "taReglement")
	public Set<TaRReglement> getTaRReglements() {
		return taRReglements;
	}

	public void setTaRReglements(Set<TaRReglement> taRReglements) {
		this.taRReglements = taRReglements;
	}
	

	@Column(name = "QUI_CREE_DOCUMENT", length = 50)
	public String getQuiCreeDocument() {
		return this.quiCreeDocument;
	}

	public void setQuiCreeDocument(String quiCreeRDocument) {
		this.quiCreeDocument = quiCreeRDocument;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_CREE_DOCUMENT", length = 19)
	public Date getQuandCreeDocument() {
		return this.quandCreeDocument;
	}

	public void setQuandCreeDocument(Date quandCreeRDocument) {
		this.quandCreeDocument = quandCreeRDocument;
	}

	@Column(name = "QUI_MODIF_DOCUMENT", length = 50)
	public String getQuiModifDocument() {
		return this.quiModifDocument;
	}

	public void setQuiModifDocument(String quiModifRDocument) {
		this.quiModifDocument = quiModifRDocument;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_MODIF_DOCUMENT", length = 19)
	public Date getQuandModifDocument() {
		return this.quandModifDocument;
	}

	public void setQuandModifDocument(Date quandModifRDocument) {
		this.quandModifDocument = quandModifRDocument;
	}

	@Column(name = "IP_ACCES", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}
	
	public void addRReglement(TaRReglement taReglement){
		if(!this.getTaRReglements().contains(taReglement)){
			this.getTaRReglements().add(taReglement);	
		}
	}
	public void removeReglement(TaRReglement taReglement){
		this.getTaRReglements().remove(taReglement);
	}
	
	public BigDecimal calculAffectationEnCours(TaFacture taDocument){
		BigDecimal retour = BigDecimal.valueOf(0);
		if(this.getIdDocument()==0) {
			//return getAffectation();
			Iterator<TaRReglement> ite = taRReglements.iterator();
			boolean trouve = false;
			TaRReglement taRReglement = null;
			while(ite.hasNext() && !trouve) {
				taRReglement = ite.next();
				if(taRReglement!=null && taRReglement.getTaFacture().getCodeDocument().equals(taDocument.getCodeDocument())) {
					retour = taRReglement.getAffectation();
					trouve = true;
				}
			}
		} else
			return BigDecimal.valueOf(0);
		return retour;
	}
	
	
	public BigDecimal calculAffectationTotale(TaRReglement taRReglement){
		BigDecimal retour = BigDecimal.valueOf(0);
		for (TaRReglement taRReglementTmp : taRReglements) {
			if(taRReglement==null || taRReglement.getId()!=taRReglementTmp.getId())
				retour=retour.add(taRReglementTmp.getAffectation());
		}
		return retour;
	}
	public BigDecimal calculAffectationTotale(){
		BigDecimal retour = BigDecimal.valueOf(0);
		for (TaRReglement taRReglementTmp : taRReglements) {
			retour=retour.add(taRReglementTmp.getAffectation());
		}
		return retour;
	}

	@Transient
	public int getEtatDeSuppression() {
		return etatDeSuppression;
	}
	
	@Transient
	public void setEtatDeSuppression(int etatDeSuppression) {
		etatDeSuppression = etatDeSuppression;
	}
	
	@Transient
	public BigDecimal getResteAAffecter() {
		return getNetTtcCalc().subtract(calculAffectationTotale());
	}

	public void setResteAAffecter(BigDecimal resteAAffecter) {
		this.resteAAffecter = resteAAffecter;
	}

	@Override
	protected void afterAjoutLigne(SWTLigneDocument ligne) throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterEnregistrerEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterModifierEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterRemoveLigne(SWTLigneDocument ligne) throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterSupprimerEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected boolean beforeAjoutLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeEnregistrerEntete() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeModifierEntete() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeRemoveLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeSupprimerEntete() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected void reinitialiseNumLignes() {
		// TODO Auto-generated method stub
	}

	@Override
	public void changementMode(ChangeModeEvent evt) {
		// TODO Auto-generated method stub
	}
	
	
	
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taReglement")
//	public Set<TaRDocument> getTaRDocuments() {
//		return this.taRDocuments;
//	}
//
//	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
//		this.taRDocuments = taRDocuments;
//	}

	@Override
	public void calculeTvaEtTotaux() {
		// TODO Auto-generated method stub
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codeDocument == null) ? 0 : codeDocument.hashCode());
		return result;
	}

	@Override
	 @Transient
	public Set<TaRDocument> getTaRDocuments() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	 @Transient
	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		// TODO Auto-generated method stub
		
	}

	@Override
	@Transient
	public BigDecimal getTxRemHtDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transient
	public BigDecimal getTxRemTtcDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transient
	public void setTxRemHtDocument(BigDecimal txRemHtDocument) {
		// TODO Auto-generated method stub
		
	}

	@Override
	@Transient
	public void setTxRemTtcDocument(BigDecimal txRemTtcDocument) {
		// TODO Auto-generated method stub
		
	}

	@Override
	@Transient
	public Integer getTtc() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transient
	public void setTtc(Integer accepte) {
		// TODO Auto-generated method stub
		
	}
	@Override
	@Transient
	public String getTypeDocument() {
		// TODO Auto-generated method stub
		return TYPE_DOC;
	}

	@Transient
	public Date getDateEchDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public BigDecimal getRegleCompletDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public BigDecimal getResteAReglerComplet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public void setDateEchDocument(Date dateEchDocument) {
		// TODO Auto-generated method stub
		
	}

	@Transient
	public void setRegleCompletDocument(BigDecimal regleCompletDocument) {
		// TODO Auto-generated method stub
		
	}

	@Transient
	public void setResteAReglerComplet(BigDecimal resteAReglerComplet) {
		// TODO Auto-generated method stub
		
	}

	@Transient
	public void setTypeDocument(String typeDocument) {
		// TODO Auto-generated method stub
		
	}
	
	public boolean affectationMultiple(TaFacture taDocument){
		for (TaRReglement rReglement : getTaRReglements()) {
			if(rReglement.getTaFacture()!=null &&
					!rReglement.getTaFacture().equals(taDocument))
				return true;
		}
		return false;
	}

	public void calculDateEcheanceAbstract(Integer report, Integer finDeMois){
//		calculDateEcheance(report,finDeMois);
	}

	@Transient
	public String getCommentaire() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public void setCommentaire(String commentaire) {
		// TODO Auto-generated method stub
		
	}



	
	
	@Transient
	public List<ILigneDocumentTiers> getLignesGeneral(){
		return this.lignes;
	}


	@Transient
	public boolean isLegrain() {
		// TODO Auto-generated method stub
		return false;
	}

	@Transient
	public BigDecimal getNetHtCalc() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public IInfosDocumentTiers getTaInfosDocument() {
		// TODO Auto-generated method stub
		return null;
	}


}
