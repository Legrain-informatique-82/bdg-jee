package fr.legrain.documents.dao;
// Generated Apr 9, 2009 2:12:06 PM by Hibernate Tools 3.2.0.CR1

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;

import org.apache.log4j.Logger;

import fr.legrain.articles.dao.TaTvaDAO;
import fr.legrain.documents.events.SWTModificationDocumentEvent;
import fr.legrain.gestCom.Appli.Const;
import fr.legrain.gestCom.Module_Document.ChangeModeEvent;
import fr.legrain.gestCom.Module_Document.ChangeModeListener;
import fr.legrain.gestCom.Module_Document.IDocumentTiers;
import fr.legrain.gestCom.Module_Document.ILigneDocumentTiers;
import fr.legrain.gestCom.Module_Document.SWTDocument;
import fr.legrain.gestCom.Module_Document.SWTLigneDocument;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.lib.data.LibCalcul;
import fr.legrain.lib.data.EnumModeObjet;
import fr.legrain.tiers.dao.TaAdresse;
import fr.legrain.tiers.dao.TaCPaiement;
import fr.legrain.tiers.dao.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaBonliv generated by hbm2java
 */
@Entity
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "TA_BONLIV", uniqueConstraints = @UniqueConstraint(columnNames = "CODE_DOCUMENT"))
//@SequenceGenerator(name = "GEN_BONLIV", sequenceName = "NUM_ID_BONLIV", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaBonliv.QN.FIND_BY_DATE, query="select a from TaBonliv a where a.taTiers.codeTiers like ? and  a.dateDocument between ? and ? order by a.codeDocument"), 
		@NamedQuery(name=TaBonliv.QN.FIND_BY_DATE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,0,0,f.netHtCalc,f.netTtcCalc from TaBonliv f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like ? and f.dateDocument between ? and ? order by f.codeDocument"),
		@NamedQuery(name=TaBonliv.QN.FIND_BY_TIERS_AND_CODE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,0,0,f.netHtCalc,f.netTtcCalc from TaBonliv f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like ? and f.codeDocument like ? order by f.codeDocument"),
		@NamedQuery(name=TaBonliv.QN.FIND_BY_TIERS_AND_CODE, query="select a from TaBonliv a where a.taTiers.codeTiers like ? and a.codeDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaBonliv.QN.FIND_BY_CODE, query="select a from TaBonliv a where a.taTiers.codeTiers like ? and  a.codeDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaBonliv.QN.FIND_BY_DATE_PARDATE, query="select a from TaBonliv a where a.taTiers.codeTiers like ? and  a.dateDocument between ? and ? order by a.dateDocument"),
		@NamedQuery(name=TaBonliv.QN.FIND_BY_TIERS_AND_DATE, query="select a from TaBonliv a join a.taTiers t where t.codeTiers like ? and a.dateDocument between ? and ? order by t.codeTiers,a.codeDocument")
		})
public class TaBonliv extends SWTDocument implements ChangeModeListener, java.io.Serializable , IDocumentTiers {
	public static final String TYPE_DOC = "Bonliv";
	public static class QN {
		public static final String FIND_BY_DATE = "TaBonliv.findEntre2Date";
		public static final String FIND_BY_TIERS_AND_CODE_LIGHT = "TaBonliv.findEntre2CodeParCodeLight";
		public static final String FIND_BY_DATE_LIGHT = "TaBonliv.findEntre2DateLight";
		public static final String FIND_BY_TIERS_AND_CODE = "TaBonliv.findEntre2CodeParCode";
		public static final String FIND_BY_DATE_PARDATE = "TaBonliv.findEntre2DateParDate";
		public static final String FIND_BY_CODE = "TaBonliv.findEntre2Code";
		public static final String FIND_BY_TIERS_AND_DATE = "TaBonliv.findTiersEntre2Date";
	}
	
//	private int idDocument;
	private String version;
	private TaTPaiement taTPaiement;
	private TaTiers taTiers;
	//private TaCPaiement taCPaiement;
	private String codeDocument;
	private Date dateDocument;
	private Date dateLivDocument;
	private String libelleDocument;
	private BigDecimal remHtDocument= new BigDecimal(0);
	private BigDecimal txRemHtDocument= new BigDecimal(0);
	private BigDecimal remTtcDocument= new BigDecimal(0);
	private BigDecimal txRemTtcDocument= new BigDecimal(0);
	private Integer nbEDocument= 0;
	private Integer ttc= 0;
	private String commentaire;
	private String quiCreeDocument;
	private Date quandCreeDocument;
	private String quiModifDocument;
	private Date quandModifDocument;
	private String ipAcces;

//	private Integer versionObj;

	private TaInfosBonliv taInfosDocument;
	private Set<TaRDocument> taRDocuments = new HashSet<TaRDocument>(0);
	private Set<TaRAcompte> taRAcomptes = new HashSet<TaRAcompte>(0);
	
	@Transient
	private ArrayList<LigneTva> lignesTVA = null; //ensemble des lignes de tva du document
	@Transient
	private BigDecimal mtTtcAvantRemiseGlobaleCalc = new BigDecimal(0);


	@Transient
	private boolean gestionTVA = true;
	@Transient
	static Logger logger = Logger.getLogger(TaBonliv.class.getName());

//	@Transient
	private BigDecimal mtTtcCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal mtHtCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal mtTvaCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netTtcCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netHtCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netTvaCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netAPayer = new BigDecimal(0);
	
	@Transient
	private BigDecimal remTtcIntermediaireDocument = new BigDecimal(0);
	
	@Transient
	private boolean legrain = false;

	
	public TaBonliv(boolean legrain) {
		this.legrain = legrain;
		lignes = new ArrayList<TaLBonliv>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}
	public TaBonliv() {
		lignes = new ArrayList<TaLBonliv>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}
	
	public TaBonliv(int idBonliv) {
		this.idDocument = idBonliv;
		lignes = new ArrayList<TaLBonliv>(0);
		lignesTVA = new ArrayList<LigneTva>();		
	}
	
	public TaBonliv(String oldCodeBonliv) {
		super(oldCodeBonliv);
		legrain = true;
		lignes = new ArrayList<TaLBonliv>(0);
		this.lignesTVA = new ArrayList<LigneTva>();
		this.modeDocument = EnumModeObjet.C_MO_INSERTION;
	}
	
	public TaBonliv(int idBonliv, TaTPaiement taTPaiement, TaTiers taTiers,
			TaCPaiement taCPaiement,TaAdresse taAdresseByIdAdresse, 
			TaAdresse taAdresseByIdAdresseLiv,String codeBonliv,
			Date dateBonliv, Date dateEchBonliv,Date dateLivBonliv,
			String libelleBonliv, 
			BigDecimal remHtBonliv, BigDecimal txRemHtBonliv,
			BigDecimal remTtcBonliv, BigDecimal txRemTtcBonliv, Integer nbEBonliv,
			Integer ttc, Integer export, String commentaire, String quiCreeBonliv,
			Date quandCreeBonliv, String quiModifBonliv, Date quandModifBonliv,
			String ipAcces, Integer versionObj, List<TaLBonliv> taLBonliv,
			TaInfosBonliv taInfosBonlives, Set<TaRDocument> taRDocuments) {
		this.idDocument = idBonliv;
		this.taTPaiement = taTPaiement;
		this.taTiers = taTiers;
		//this.taCPaiement = taCPaiement;

		this.codeDocument = codeBonliv;
		this.dateDocument = dateBonliv;
		this.dateLivDocument = dateLivBonliv;
		this.libelleDocument = libelleBonliv;
		this.remHtDocument = remHtBonliv;
		this.txRemHtDocument = txRemHtBonliv;
		this.remTtcDocument = remTtcBonliv;
		this.txRemTtcDocument = txRemTtcBonliv;
		this.nbEDocument = nbEBonliv;
		this.ttc = ttc;
		//this.export = export;
		this.commentaire = commentaire;
		this.quiCreeDocument = quiCreeBonliv;
		this.quandCreeDocument = quandCreeBonliv;
		this.quiModifDocument = quiModifBonliv;
		this.quandModifDocument = quandModifBonliv;
		this.ipAcces = ipAcces;
		this.versionObj = versionObj;
		this.lignes = taLBonliv;
		this.taInfosDocument = taInfosBonlives;
		this.taRDocuments = taRDocuments;
	}

//	@Id
//	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "GEN_BONLIV")
//	@Column(name = "ID_DOCUMENT", unique = true, nullable = false)
//	@LgrHibernateValidated(champEntite = "", champ = "ID_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
//	public int getIdDocument() {
//		return this.idDocument;
//	}
//
//	public void setIdDocument(int idBonliv) {
//		this.idDocument = idBonliv;
//	}

	@Column(name = "VERSION", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_T_PAIEMENT")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_T_PAIEMENT",table = "TA_T_PAIEMENT",clazz = TaTPaiement.class)
	public TaTPaiement getTaTPaiement() {
		return this.taTPaiement;
	}

	public void setTaTPaiement(TaTPaiement taTPaiement) {
		this.taTPaiement = taTPaiement;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "ID_TIERS")
	@LgrHibernateValidated(champEntite = "", champBd = "ID_TIERS",table = "TA_TIERS",clazz = TaTiers.class)
	public TaTiers getTaTiers() {
		return this.taTiers;
	}

	public void setTaTiers(TaTiers taTiers) {
		if(taRAcomptes.size()==0 || rechercheSiMemeTiers(taTiers))
			this.taTiers = taTiers;
	}

	public boolean rechercheSiMemeTiers(TaTiers taTiers){
		for (TaRAcompte acompte : taRAcomptes) {
			if(acompte.getTaAcompte().getTaTiers()!=null)
				if (!acompte.getTaAcompte().getTaTiers().equals(taTiers))
					return false;
		}
		return true;
	}
//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "ID_C_PAIEMENT")
//	@LgrHibernateValidated(champEntite = "", champ = "ID_C_PAIEMENT",table = "TA_C_PAIEMENT",clazz = TaCPaiement.class)
//	public TaCPaiement getTaCPaiement() {
//		return this.taCPaiement;
//	}
//
//	public void setTaCPaiement(TaCPaiement taCPaiement) {
//		this.taCPaiement = taCPaiement;
//	}


	@Column(name = "CODE_DOCUMENT", unique = true, length = 20)
	@LgrHibernateValidated(champEntite = "", champBd = "CODE_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public String getCodeDocument() {
		return this.codeDocument;
	}

	public void setCodeDocument(String codeBonliv) {
		this.codeDocument = codeBonliv;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public Date getDateDocument() {
		return this.dateDocument;
	}

	public void setDateDocument(Date dateFacture) {
		if(this.oldDate==null)this.oldDate=dateFacture;
		else
		if(this.dateDocument==null||
				this.dateDocument.compareTo(dateFacture)!=0)
			this.oldDate=this.dateDocument;
		this.dateDocument = dateFacture;
	}


	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_LIV_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_LIV_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public Date getDateLivDocument() {
		return this.dateLivDocument;
	}

	public void setDateLivDocument(Date dateLivBonliv) {
		this.dateLivDocument = dateLivBonliv;
	}

	@Column(name = "LIBELLE_DOCUMENT")
	@LgrHibernateValidated(champEntite = "", champBd = "LIBELLE_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public String getLibelleDocument() {
		return this.libelleDocument;
	}

	public void setLibelleDocument(String libelleBonliv) {
		this.libelleDocument = libelleBonliv;
	}

	
	
	@Column(name = "REM_HT_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "REM_HT_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getRemHtDocument() {
		return this.remHtDocument;
	}

	public void setRemHtDocument(BigDecimal remHtBonliv) {
		this.remHtDocument = remHtBonliv;
	}

	@Column(name = "TX_REM_HT_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "TX_REM_HT_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getTxRemHtDocument() {
		return this.txRemHtDocument;
	}

	public void setTxRemHtDocument(BigDecimal txRemHtBonliv) {
		if(txRemHtBonliv==null)txRemHtBonliv=new BigDecimal(0);
		if(this.txRemHtDocument!=null && this.txRemHtDocument.compareTo(txRemHtBonliv)!=0){	
			this.txRemHtDocument = txRemHtBonliv;
			if(legrain) {
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "REM_TTC_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "REM_TTC_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getRemTtcDocument() {
		return this.remTtcDocument;
	}

	public void setRemTtcDocument(BigDecimal remTtcBonliv) {
		this.remTtcDocument = remTtcBonliv;
	}

	@Column(name = "TX_REM_TTC_DOCUMENT", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "TX_REM_TTC_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getTxRemTtcDocument() {
		return this.txRemTtcDocument;
	}

	public void setTxRemTtcDocument(BigDecimal txRemTtcBonliv) {
		if(txRemTtcBonliv==null)txRemTtcBonliv=new BigDecimal(0);
		if(this.txRemTtcDocument!=null && this.txRemTtcDocument.compareTo(txRemTtcBonliv)!=0){	
			this.txRemTtcDocument = txRemTtcBonliv;
			if(legrain) {
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this,"txRemTtcDocument"));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "NB_E_DOCUMENT")
	@LgrHibernateValidated(champEntite = "", champBd = "NB_E_DOCUMENT",table = "TA_BONLIV",clazz = TaBonliv.class)
	public Integer getNbEDocument() {
		return this.nbEDocument;
	}

	public void setNbEDocument(Integer nbEBonliv) {
		this.nbEDocument = nbEBonliv;
	}

	@Column(name = "TTC")
	@LgrHibernateValidated(champEntite = "", champBd = "TTC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public Integer getTtc() {
		return this.ttc;
	}

	public void setTtc(Integer ttc) {
		this.ttc = ttc;
	}

//	@Column(name = "EXPORT")
//	@LgrHibernateValidated(champEntite = "", champ = "EXPORT",table = "TA_BONLIV",clazz = TaBonliv.class)
//	public Integer getExport() {
//		return this.export;
//	}
//
//	public void setExport(Integer export) {
//		this.export = export;
//	}

	@Column(name = "COMMENTAIRE", length = 2000)
	@LgrHibernateValidated(champEntite = "", champBd = "COMMENTAIRE",table = "TA_BONLIV",clazz = TaBonliv.class)
	public String getCommentaire() {
		return this.commentaire;
	}

	public void setCommentaire(String commentaire) {
		if(this.commentaire==null||
				this.commentaire.compareTo(commentaire)!=0){
			this.commentaire = commentaire;		
			if(legrain) {
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "QUI_CREE_DOCUMENT", length = 50)
	public String getQuiCreeDocument() {
		return this.quiCreeDocument;
	}

	public void setQuiCreeDocument(String quiCreeBonliv) {
		this.quiCreeDocument = quiCreeBonliv;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_CREE_DOCUMENT", length = 19)
	public Date getQuandCreeDocument() {
		return this.quandCreeDocument;
	}

	public void setQuandCreeDocument(Date quandCreeBonliv) {
		this.quandCreeDocument = quandCreeBonliv;
	}

	@Column(name = "QUI_MODIF_DOCUMENT", length = 50)
	public String getQuiModifDocument() {
		return this.quiModifDocument;
	}

	public void setQuiModifDocument(String quiModifBonliv) {
		this.quiModifDocument = quiModifBonliv;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_MODIF_DOCUMENT", length = 19)
	public Date getQuandModifDocument() {
		return this.quandModifDocument;
	}

	public void setQuandModifDocument(Date quandModifBonliv) {
		this.quandModifDocument = quandModifBonliv;
	}

	@Column(name = "IP_ACCES", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}

//	@Version
//	@Column(name = "VERSION_OBJ")
//	public Integer getVersionObj() {
//		return this.versionObj;
//	}
//
//	public void setVersionObj(Integer versionObj) {
//		this.versionObj = versionObj;
//	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taDocument")
	@OrderBy("numLigneLDocument")
	public List<TaLBonliv> getLignes() {
		return this.lignes;
	}

	public void setLignes(List<TaLBonliv> taLBonliv) {
		this.lignes = taLBonliv;
	}
	
	@javax.persistence.OneToOne(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taDocument")
	public TaInfosBonliv getTaInfosDocument() {
		return this.taInfosDocument;
	}

	public void setTaInfosDocument(TaInfosBonliv taInfosBonlives) {
		this.taInfosDocument = taInfosBonlives;
	}

	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taBonliv")
	public Set<TaRDocument> getTaRDocuments() {
		return this.taRDocuments;
	}

	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		this.taRDocuments = taRDocuments;
	}
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taBonliv")
	public Set<TaRAcompte> getTaRAcomptes(){
		return this.taRAcomptes;
	}

	public void setTaRAcomptes(Set<TaRAcompte> taRAcomptes) {
		this.taRAcomptes = taRAcomptes;
	}
	/**
	 * Initialisation des propriétés de la facture en fonction du tiers
	 */
	public void changementDeTiers() {
//		if(this.taTiers!=null && this.taTiers.getTaTTvaDoc()!=null && 
//				this.taTiers.getTaTTvaDoc().getCodeTTvaDoc()!=null){
//			if(!this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("F")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("UE")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("HUE")
//			)
//				setGestionTVA(false);
//			else setGestionTVA(true);
//		}else
//			setGestionTVA(true);
	}
	
	@Override
	protected void afterAjoutLigne(SWTLigneDocument ligne) throws ExceptLgr {
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
	}

	@Override
	protected void afterEnregistrerEntete() throws ExceptLgr {
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
		
	}

	@Override
	protected void afterModifierEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void afterRemoveLigne(SWTLigneDocument ligne) throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void afterSupprimerEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected boolean beforeAjoutLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeEnregistrerEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeModifierEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeRemoveLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeSupprimerEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected void reinitialiseNumLignes() {
//		for (Object ligne : lignes) {
//			((TaLBonliv)ligne).setNumLigneLDocument(
//					((TaLBonliv) ligne).getNUM_LIGNE());
//		}		
	}

	@Override
	public void changementMode(ChangeModeEvent evt) {
		// TODO Raccord de méthode auto-généré
		switch (evt.getNouveauMode()) {
		case C_MO_CONSULTATION:
			break;
		case C_MO_EDITION:
			//S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_INSERTION:
//			S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_SUPPRESSION:
			break;
		}

	}
	@Transient
	public ArrayList<LigneTva> getLignesTVA() {
		return lignesTVA;
	}

	public void setLignesTVA(ArrayList<LigneTva> lignesTVA) {
		this.lignesTVA = lignesTVA;
	}
	
//	@Transient
	@Column(name = "MT_TTC_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_TTC_CALC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getMtTtcCalc() {
		return mtTtcCalc;
	}

	public void setMtTtcCalc(BigDecimal mtTtcCalc) {
		this.mtTtcCalc = LibCalcul.arrondi(mtTtcCalc);
	}

	//@Transient
	@Column(name = "MT_HT_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_HT_CALC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getMtHtCalc() {
		return mtHtCalc;
	}

	public void setMtHtCalc(BigDecimal mtHtCalc) {
		this.mtHtCalc = LibCalcul.arrondi(mtHtCalc);
	}

	//@Transient
	@Column(name = "MT_TVA_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_TVA_CALC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getMtTvaCalc() {
		return mtTvaCalc;
	}

	public void setMtTvaCalc(BigDecimal mtTvaCalc) {
		this.mtTvaCalc = LibCalcul.arrondi(mtTvaCalc);
	}

	//@Transient
	@Column(name = "NET_TTC_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_TTC_CALC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getNetTtcCalc() {
		return netTtcCalc;
	}

	public void setNetTtcCalc(BigDecimal netTtcCalc) {
		this.netTtcCalc = LibCalcul.arrondi(netTtcCalc);
	}

	//@Transient
	@Column(name = "NET_HT_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_HT_CALC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getNetHtCalc() {
		return netHtCalc;
	}

	public void setNetHtCalc(BigDecimal netHtCalc) {
		this.netHtCalc = LibCalcul.arrondi(netHtCalc);
	}

	//@Transient
	@Column(name = "NET_TVA_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_TVA_CALC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getNetTvaCalc() {
		return netTvaCalc;
	}

	public void setNetTvaCalc(BigDecimal netTvaCalc) {
		this.netTvaCalc = LibCalcul.arrondi(netTvaCalc);
	}

	//@Transient
	@Column(name = "NET_A_PAYER", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "NET_A_PAYER",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getNetAPayer() {
		return netAPayer;
	}

	public void setNetAPayer(BigDecimal netAPayer) {
		this.netAPayer = LibCalcul.arrondi(netAPayer);
	}

	public void setLegrain(boolean legrain) {
		this.legrain = legrain;
		for (TaLBonliv ligne : getLignes()) {
			ligne.setLegrain(legrain);
		}
	}
	public void calculeTvaEtTotaux(){
		calculTvaTotal();
		calculTotaux();
	}
	
	/**
	 * Calcul des totaux de la facture
	 */
	public void calculTotaux() {
		
//			    MT_TVA Numeric(15,2),
			setMtHtCalc(new BigDecimal(0));
			setNetHtCalc(new BigDecimal(0));
			setMtTtcCalc(new BigDecimal(0));
			setMtTtcAvantRemiseGlobaleCalc(new BigDecimal(0));
			for (Object ligne : lignes) {
				if(((TaLBonliv)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
					if(((TaLBonliv)ligne).getMtHtLApresRemiseGlobaleDocument()!=null)
						setNetHtCalc(getNetHtCalc().add(((TaLBonliv)ligne).getMtHtLApresRemiseGlobaleDocument()));
					if(((TaLBonliv)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
						setMtTtcCalc(getMtTtcCalc().add(((TaLBonliv)ligne).getMtTtcLApresRemiseGlobaleDocument()));
					if(((TaLBonliv)ligne).getMtHtLDocument()!=null)
						setMtHtCalc(getMtHtCalc().add(((TaLBonliv)ligne).getMtHtLDocument()));
					if(((TaLBonliv)ligne).getMtTtcLDocument()!=null)
						setMtTtcAvantRemiseGlobaleCalc(getMtTtcAvantRemiseGlobaleCalc().add(((TaLBonliv)ligne).getMtTtcLDocument()));
				}
				
			}
			
			setNetTvaCalc(getMtTtcCalc().subtract(getNetHtCalc()));
			BigDecimal tva = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tva = tva.add(ligneTva.getMtTva());
			}
			if(tva.compareTo(getNetTvaCalc())!=0) {
				logger.error("Montant de la TVA incorrect : "+getNetTvaCalc()+" ** "+tva);
			}
			
			//setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getRemTtcFacture().divide(new BigDecimal(100)))));
			//setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100)))));
			setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP)));
			
			/*
			 * remise HT déjà calculée dans dispatcherTva()
			 */
			//setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()));
			setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()).setScale(2,BigDecimal.ROUND_HALF_UP));
			
			setNetAPayer(getNetTtcCalc());
			
			//TODO A Finir ou a supprimer
//			select sum(f.mt_tva_recup) from calcul_tva_direct(:module,:id_document,:taux_r_ht,:ttc) f into :MTNETTVA;
//			tva=:mtnettva;
//			mt_ttc=:totalttc;
//			mt_tva=:mt_ttc-:mt_ht;
//			if (ttc=1) {
//			       txremiseht = taux_r_ht;
//			       mtnetttc=:mt_ttc - (:mt_ttc*(:txremiseht/100));
//			       MTNETHT=:mtnetttc - :MTNETTVA;
//			       remise_ht =  :totalttc - :mtnetttc ;
//			} else {
//			      txremiseht = taux_r_ht;
//			      MTNETHT=:mt_ht-(:mt_ht*(:txremiseht/100));
//			      mtnetttc=:MTNETHT + :MTNETTVA;
//			      remise_ht = mt_ht - mtnetht;
//			}
//			  txremisettc = taux_r_ttc;
//			  remise_ttc = (:mtnetttc * (:txremisettc/100));
//			  mtnetttc = :mtnetttc -:remise_ttc;
//			  netapayer = :mtnetttc - :regle;
	}

	/**
	 * Reparti le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
	 */
	public void dispatcherTva() {

		BigDecimal tvaLigne = new BigDecimal(0);
		BigDecimal totalTemp = new BigDecimal(0);

		for (Object ligne : lignes) {
			if(((TaLBonliv)ligne).getMtHtLDocument()!=null)
				totalTemp = totalTemp.add(((TaLBonliv)ligne).getMtHtLDocument());
		}
		if(totalTemp!=null && txRemHtDocument!=null)
			setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));	
		
		for (TaLBonliv ligne : getLignes()) {
			if(txRemHtDocument!=null && txRemHtDocument.signum()>0 && ligne.getMtHtLDocument()!=null  && ligne.getMtTtcLDocument()!=null) {
				if(ttc==1){
					((TaLBonliv)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtTtcLDocument().subtract(((TaLBonliv)ligne).getMtTtcLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLBonliv)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtTtcLApresRemiseGlobaleDocument());
					
				}else{
					((TaLBonliv)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtHtLDocument().subtract(((TaLBonliv)ligne).getMtHtLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLBonliv)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtHtLApresRemiseGlobaleDocument());	
				}
			}
		}
				
		for (LigneTva ligneTva : lignesTVA) {

			if (ligneTva.getMtTva()!=null) {
				int lignepasse=1;
				BigDecimal tvaTmp = ligneTva.getMtTva();
				BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
				BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());

				for (Object ligne : lignes) {
					if(((TaLBonliv)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
						if(((TaLBonliv)ligne).getCodeTvaLDocument()!=null&&
								((TaLBonliv)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
							if (ligneTva.getMontantTotalHt().signum()==0) 
								tvaLigne = ((TaLBonliv)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
							else {
								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
									tvaLigne = tvaTmp;
								else {
									if(ttc==1){
										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
											tvaLigne=BigDecimal.valueOf(0);
										else
											tvaLigne = (ligneTva.getMtTva().multiply(((TaLBonliv)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
									}
									else{
										if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
											tvaLigne =BigDecimal.valueOf(0);
										else
											tvaLigne = (ligneTva.getMtTva().multiply(((TaLBonliv)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
									}
								}
							}
							tvaTmp =  tvaTmp.subtract(tvaLigne);
							totalTemp = totalTemp.add(((TaLBonliv)ligne).getMtHtLDocument());

							if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
								if  (lignepasse>= ligneTva.getNbLigneDocument()) {
									((TaLBonliv)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									((TaLBonliv)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
								} else {
									((TaLBonliv)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtHtLDocument().subtract(((TaLBonliv)ligne).getMtHtLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
									((TaLBonliv)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtTtcLDocument().subtract(((TaLBonliv)ligne).getMtTtcLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
								}
//								ttcTmp =  ttcTmp.subtract(((TaLBonliv)ligne).getMtTtcLFacture());
//								htTmp =  htTmp.subtract(((TaLBonliv)ligne).getMtHtLFacture());
							} else {
								if(ttc==1)
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLBonliv)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									}else{
										((TaLBonliv)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtTtcLDocument().subtract(tvaLigne));
									}
								else
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLBonliv)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
									}else {
										((TaLBonliv)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLBonliv)ligne).getMtHtLDocument().add(tvaLigne));
									}

							}
							ttcTmp =  ttcTmp.subtract(((TaLBonliv)ligne).getMtTtcLApresRemiseGlobaleDocument());
							htTmp =  htTmp.subtract(((TaLBonliv)ligne).getMtHtLApresRemiseGlobaleDocument());

							lignepasse++;
						}
					}
					setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))));						

//					setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						

				}
			}
		}
//		}

	}
	
	/**
	 * Lance la fonction de calcul du montant sur chacunes des lignes du document.
	 */
	public void calculMontantLigneDocument() {
		for (Object ligne : lignes) {
			((TaLBonliv)ligne).calculMontant();
		}
	}
	
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 * et mise à jour du montant de la TVA dans les lignes du document
	 */
	public void calculTvaTotal() {
		calculMontantLigneDocument();
		calculLignesTva();
		dispatcherTva();
	}
	
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 */
	public void calculLignesTva() {

		Map<String,BigDecimal> montantTotalHt = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtc = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalHtAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtcAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVA = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> tauxTVA = new HashMap<String,BigDecimal>();
		Map<String,Integer> nbLigne = new HashMap<String,Integer>();
		String codeTVA = null;
		TaTvaDAO taTvaDAO = new TaTvaDAO();
		
		/*
		 * calcul de la TVA different en fonction de la propriete TTC
		 */
		BigDecimal ttcLigne = null;
		BigDecimal htLigne = null;
		for (Object ligne : lignes) {
			//en commentaire pour ne pas refaire les calculs pendants les editions, 
			//((TaLBonliv)ligne).calculMontant();
			codeTVA = ((TaLBonliv)ligne).getCodeTvaLDocument();
			if(codeTVA!=null && !codeTVA.equals("")) {
				ttcLigne = ((TaLBonliv)ligne).getMtTtcLDocument();
				htLigne = ((TaLBonliv)ligne).getMtHtLDocument();
				if(montantTotalHt.containsKey(codeTVA)) {
					montantTotalTtc.put(codeTVA,montantTotalTtc.get(codeTVA).add(ttcLigne));
					montantTotalHt.put(codeTVA,montantTotalHt.get(codeTVA).add(htLigne));
					montantTotalTtcAvecRemise.put(codeTVA,montantTotalTtcAvecRemise.get(codeTVA).add(ttcLigne));
					montantTotalHtAvecRemise.put(codeTVA,montantTotalHtAvecRemise.get(codeTVA).add(htLigne));
					nbLigne.put(codeTVA,nbLigne.get(codeTVA)+1);
				} else {
					montantTotalTtc.put(codeTVA,ttcLigne);
					montantTotalHt.put(codeTVA,htLigne);
					montantTotalTtcAvecRemise.put(codeTVA,ttcLigne);
					montantTotalHtAvecRemise.put(codeTVA,htLigne);
					tauxTVA.put(codeTVA,((TaLBonliv)ligne).getTauxTvaLDocument());
					nbLigne.put(codeTVA,1);
				}
			}
		}

		for (String codeTva : montantTotalTtc.keySet()) {
			//les 2 maps ont les meme cles
			BigDecimal mtTtcTotal = montantTotalTtc.get(codeTva);
			BigDecimal mtHtTotal = montantTotalHt.get(codeTva);
			BigDecimal tva =null;
			if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(     mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100))  )       ));
//				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract(    mtHtTotal.multiply( (txRemHtDocument.divide(new BigDecimal(100))))     ) ) ;
				BigDecimal valeurInterTTC=mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(valeurInterTTC )) ;
				BigDecimal valeurInterHT=mtHtTotal.multiply( txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract( valeurInterHT )) ;
				montantTotalTtcAvecRemise.put(codeTva, mtTtcTotal);
				montantTotalHtAvecRemise.put(codeTva, mtHtTotal);
			} 

			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVA.put(codeTva, tva);
				montantTotalHtAvecRemise.put(codeTva, mtTtcTotal.subtract(tva));
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVA.put(codeTva, tva );
				montantTotalTtcAvecRemise.put(codeTva, mtHtTotal.add(tva));
			}
		}

		lignesTVA.clear();
		for (String codeTva : mtTVA.keySet()) {
			LigneTva ligneTva = new LigneTva();
			ligneTva.setCodeTva(codeTva);
			ligneTva.setTauxTva(tauxTVA.get(codeTva));
			ligneTva.setMtTva(mtTVA.get(codeTva));
			ligneTva.setMontantTotalHt(montantTotalHt.get(codeTva));
			ligneTva.setMontantTotalTtc(montantTotalTtc.get(codeTva));
			ligneTva.setMontantTotalHtAvecRemise(montantTotalHtAvecRemise.get(codeTva));
			ligneTva.setMontantTotalTtcAvecRemise(montantTotalTtcAvecRemise.get(codeTva));
			ligneTva.setLibelle(taTvaDAO.findByCode(codeTva).getLibelleTva());
			ligneTva.setNbLigneDocument(nbLigne.get(codeTva));
			lignesTVA.add(ligneTva);
		}
		
		//dispatcherTva();
	}

	//@Transient
	@Column(name = "MT_TTC_AVT_REM_GLOBALE_CALC", precision = 15)
	@LgrHibernateValidated(champEntite = "", champBd = "MT_TTC_AVT_REM_GLOBALE_CALC",table = "TA_BONLIV",clazz = TaBonliv.class)
	public BigDecimal getMtTtcAvantRemiseGlobaleCalc() {
		return mtTtcAvantRemiseGlobaleCalc;
	}

	public void setMtTtcAvantRemiseGlobaleCalc(
			BigDecimal mtTtcAvantRemiseGlobaleCalc) {
		this.mtTtcAvantRemiseGlobaleCalc = mtTtcAvantRemiseGlobaleCalc;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codeDocument == null) ? 0 : codeDocument.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TaBonliv other = (TaBonliv) obj;
		if (codeDocument == null) {
			if (other.codeDocument != null)
				return false;
		} else if (!codeDocument.equals(other.codeDocument))
			return false;
		if (commentaire == null) {
			if (other.commentaire != null)
				return false;
		} else if (!commentaire.equals(other.commentaire))
			return false;
		if (dateDocument == null) {
			if (other.dateDocument != null)
				return false;
		} else if (!dateDocument.equals(other.dateDocument))
			return false;
		if (dateLivDocument == null) {
			if (other.dateLivDocument != null)
				return false;
		} else if (!dateLivDocument.equals(other.dateLivDocument))
			return false;
		if (gestionTVA != other.gestionTVA)
			return false;
		if (ipAcces == null) {
			if (other.ipAcces != null)
				return false;
		} else if (!ipAcces.equals(other.ipAcces))
			return false;
		if (legrain != other.legrain)
			return false;
		if (libelleDocument == null) {
			if (other.libelleDocument != null)
				return false;
		} else if (!libelleDocument.equals(other.libelleDocument))
			return false;
		if (lignesTVA == null) {
			if (other.lignesTVA != null)
				return false;
		} else if (!lignesTVA.equals(other.lignesTVA))
			return false;
		if (mtHtCalc == null) {
			if (other.mtHtCalc != null)
				return false;
		} else if (!mtHtCalc.equals(other.mtHtCalc))
			return false;
		if (mtTtcAvantRemiseGlobaleCalc == null) {
			if (other.mtTtcAvantRemiseGlobaleCalc != null)
				return false;
		} else if (!mtTtcAvantRemiseGlobaleCalc
				.equals(other.mtTtcAvantRemiseGlobaleCalc))
			return false;
		if (mtTtcCalc == null) {
			if (other.mtTtcCalc != null)
				return false;
		} else if (!mtTtcCalc.equals(other.mtTtcCalc))
			return false;
		if (mtTvaCalc == null) {
			if (other.mtTvaCalc != null)
				return false;
		} else if (!mtTvaCalc.equals(other.mtTvaCalc))
			return false;
		if (nbEDocument == null) {
			if (other.nbEDocument != null)
				return false;
		} else if (!nbEDocument.equals(other.nbEDocument))
			return false;
		if (netAPayer == null) {
			if (other.netAPayer != null)
				return false;
		} else if (!netAPayer.equals(other.netAPayer))
			return false;
		if (netHtCalc == null) {
			if (other.netHtCalc != null)
				return false;
		} else if (!netHtCalc.equals(other.netHtCalc))
			return false;
		if (netTtcCalc == null) {
			if (other.netTtcCalc != null)
				return false;
		} else if (!netTtcCalc.equals(other.netTtcCalc))
			return false;
		if (netTvaCalc == null) {
			if (other.netTvaCalc != null)
				return false;
		} else if (!netTvaCalc.equals(other.netTvaCalc))
			return false;
		if (quandCreeDocument == null) {
			if (other.quandCreeDocument != null)
				return false;
		} else if (!quandCreeDocument.equals(other.quandCreeDocument))
			return false;
		if (quandModifDocument == null) {
			if (other.quandModifDocument != null)
				return false;
		} else if (!quandModifDocument.equals(other.quandModifDocument))
			return false;
		if (quiCreeDocument == null) {
			if (other.quiCreeDocument != null)
				return false;
		} else if (!quiCreeDocument.equals(other.quiCreeDocument))
			return false;
		if (quiModifDocument == null) {
			if (other.quiModifDocument != null)
				return false;
		} else if (!quiModifDocument.equals(other.quiModifDocument))
			return false;
		if (remHtDocument == null) {
			if (other.remHtDocument != null)
				return false;
		} else if (!remHtDocument.equals(other.remHtDocument))
			return false;
		if (remTtcDocument == null) {
			if (other.remTtcDocument != null)
				return false;
		} else if (!remTtcDocument.equals(other.remTtcDocument))
			return false;
		if (taInfosDocument == null) {
			if (other.taInfosDocument != null)
				return false;
		} else if (!taInfosDocument.equals(other.taInfosDocument))
			return false;
		if (taRDocuments == null) {
			if (other.taRDocuments != null)
				return false;
		} else if (!taRDocuments.equals(other.taRDocuments))
			return false;
		if (taTPaiement == null) {
			if (other.taTPaiement != null)
				return false;
		} else if (!taTPaiement.equals(other.taTPaiement))
			return false;
		if (taTiers == null) {
			if (other.taTiers != null)
				return false;
		} else if (!taTiers.equals(other.taTiers))
			return false;
		if (ttc == null) {
			if (other.ttc != null)
				return false;
		} else if (!ttc.equals(other.ttc))
			return false;
		if (txRemHtDocument == null) {
			if (other.txRemHtDocument != null)
				return false;
		} else if (!txRemHtDocument.equals(other.txRemHtDocument))
			return false;
		if (txRemTtcDocument == null) {
			if (other.txRemTtcDocument != null)
				return false;
		} else if (!txRemTtcDocument.equals(other.txRemTtcDocument))
			return false;
		if (version == null) {
			if (other.version != null)
				return false;
		} else if (!version.equals(other.version))
			return false;
		return true;
	}
	@Transient
	public boolean isGestionTVA() {
		return gestionTVA;
	}
	public void setGestionTVA(boolean gestionTVA) {
		this.gestionTVA = gestionTVA;
	}
	@Transient
	public BigDecimal getRemTtcIntermediaireDocument() {
		return mtTtcAvantRemiseGlobaleCalc.subtract(mtTtcCalc);
	}
	
	@Override
	@Transient
	public String getTypeDocument() {
		// TODO Auto-generated method stub
		return TYPE_DOC;
	}
	
	public void calculDateEcheanceAbstract(Integer report, Integer finDeMois){
//		calculDateEcheance(report,finDeMois);
	}
	@Override
	@Transient
	public Integer getExport() {
		// TODO Auto-generated method stub
		return null;
	}
	@Override
	@Transient
	public void setExport(Integer export) {
		// TODO Auto-generated method stub
		
	}
	
	
//	public Date calculDateEcheance(Integer report, Integer finDeMois) {
//		TaTCPaiementDAO taTCPaiementDAO = new TaTCPaiementDAO();
//		TaTCPaiement typeCP = taTCPaiementDAO.findByCode(TaTCPaiement.C_CODE_TYPE_BON_LIVRAISON);
//		TaCPaiement conditionDoc = null;
//		TaCPaiement conditionTiers = null;
//		TaCPaiement conditionSaisie = null;
//		
//		if(typeCP!=null) conditionDoc = typeCP.getTaCPaiement();
//		if(getTaTiers()!=null) conditionTiers = getTaTiers().getTaCPaiement();
//
//		if(report!=null || finDeMois!=null) { 
//			conditionSaisie = new TaCPaiement();
//			if(report!=null)
//				conditionSaisie.setReportCPaiement(report);
//			if(finDeMois!=null)
//				conditionSaisie.setFinMoisCPaiement(finDeMois);
//		}
//		
//		//on applique toute les conditions par ordre décroissant de priorité, la derniere valide est conservée
//		Date nouvelleDate = null;
//		if(conditionDoc!=null) {
//			nouvelleDate = conditionDoc.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionTiers!=null) {
//			nouvelleDate = conditionTiers.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionSaisie!=null) {
//			nouvelleDate = conditionSaisie.calculeNouvelleDate(getDateDocument());
//		}
//		setDateEchDocument(nouvelleDate);
//		return nouvelleDate;
//	}
	
	@Transient
	public BigDecimal getRegleCompletDocument() {
		// TODO Auto-generated method stub
		return null;
	}
	@Transient
	public BigDecimal getResteAReglerComplet() {
		// TODO Auto-generated method stub
		return null;
	}	
	@Transient
	public List<ILigneDocumentTiers> getLignesGeneral(){
		return this.lignes;
	}

	@Transient
	public boolean isLegrain() {
		// TODO Auto-generated method stub
		return legrain;
	}
}
