package fr.legrain.documents.dao;

// Generated Apr 7, 2009 3:27:23 PM by Hibernate Tools 3.2.0.CR1

import java.math.BigDecimal;
import java.util.Comparator;
import java.util.Date;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;

import org.hibernate.annotations.Sort;

import fr.legrain.gestCom.Module_Document.ChangeModeEvent;
import fr.legrain.gestCom.Module_Document.ChangeModeListener;
import fr.legrain.gestCom.Module_Document.IDocumentTiers;
import fr.legrain.gestCom.Module_Document.IDocumentTiersComplet;
import fr.legrain.gestCom.Module_Document.IInfosDocumentTiers;
import fr.legrain.gestCom.Module_Document.ILigneDocumentTiers;
import fr.legrain.gestCom.Module_Document.SWTDocument;
import fr.legrain.gestCom.Module_Document.SWTLigneDocument;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.tiers.dao.TaCompteBanque;
import fr.legrain.tiers.dao.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaRDocument generated by hbm2java
 */
@Entity
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "TA_REMISE")
//@SequenceGenerator(name = "GEN_TA_REGLEMENT", sequenceName = "NUM_ID_REGLEMENT", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaRemise.QN.FIND_BY_DATE, query="select a from TaRemise a where a.dateDocument between ? and ? order by a.codeDocument"), 
		@NamedQuery(name=TaRemise.QN.FIND_BY_CODE, query="select a from TaRemise a where a.codeDocument between ? and ? order by a.codeDocument"),
		@NamedQuery(name=TaRemise.QN.FIND_BY_DATE_PARDATE, query="select a from TaRemise a where a.dateDocument between ? and ? order by a.dateDocument"),
		@NamedQuery(name=TaRemise.QN.FIND_BY_DATE_NON_EXPORT, query="select a from TaRemise a where a.dateDocument between ? and ?  and a.export<>1 order by a.codeDocument"),
		@NamedQuery(name=TaRemise.QN.FIND_BY_DATE_NON_EXPORT_PARDATE, query="select a from TaRemise a where a.dateDocument between ? and ?  and a.export<>1 order by a.dateDocument"),
		@NamedQuery(name=TaRemise.QN.FIND_BY_DATE_EXPORT, query="select a from TaRemise a where a.dateDocument between ? and ?  and a.export=1 order by a.codeDocument"), 
		@NamedQuery(name=TaRemise.QN.FIND_BY_CODE_EXPORT, query="select a from TaRemise a where a.codeDocument between ? and ? and a.export=1 order by a.codeDocument"),
		@NamedQuery(name=TaRemise.QN.FIND_BY_CODE_NON_EXPORT, query="select a from TaRemise a where a.codeDocument between ? and ? and a.export<>1 order by a.codeDocument")
})
public class TaRemise extends SWTDocument implements ChangeModeListener,IDocumentTiers,IDocumentTiersComplet, java.io.Serializable,
Cloneable{
	public static final String TYPE_DOC = "Remise";
	public static class QN {
		public static final String FIND_BY_DATE = "TaRemise.findEntre2Date";
		public static final String FIND_BY_CODE = "TaRemise.findEntre2Code";
		public static final String FIND_BY_DATE_PARDATE = "TaRemise.findEntre2DateParDate";
		public static final String FIND_BY_DATE_NON_EXPORT = "TaRemise.findEntre2DateNonExporte";
		public static final String FIND_BY_DATE_NON_EXPORT_PARDATE = "TaRemise.findEntre2DateNonExporteParDate";
		public static final String FIND_BY_CODE_NON_EXPORT = "TaRemise.findEntre2CodeNonExporte";
		public static final String FIND_BY_DATE_EXPORT = "TaRemise.findEntre2DateExporte";
		public static final String FIND_BY_CODE_EXPORT = "TaRemise.findEntre2CodeExporte";
//		public static final String FIND_BY_TIERS_AND_DATE = "TaRemise.findTiersEntre2Date";
	}

//	private int id;
	private String version;
	private String codeDocument = "";
//	private TaTiers taTiers;
	private Date dateDocument;
	private Date dateLivDocument; //dateEncaissement
	private TaTPaiement taTPaiement;
	private String libelleDocument;
	private TaCompteBanque taCompteBanque;
	private Integer etat = 0;
	private Integer export = 0;
	private BigDecimal netTtcCalc = new BigDecimal(0); //montantReglement
	private String quiCreeDocument;
	private Date quandCreeDocument;
	private String quiModifDocument;
	private Date quandModifDocument;
	private String ipAcces;
	
	private SortedSet<TaLRemise> taLRemises =new ListeSorted<TaLRemise>(); 
//		new  ArrayList<TaLRemise>(0);


    @Transient
	private int etatDeSuppression = 0;
    
	public TaRemise() {
	}


	@Column(name = "VERSION", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}


	@Column(name = "CODE_DOCUMENT", unique = true, length = 20)
	@LgrHibernateValidated(champEntite = "", champBd = "CODE_DOCUMENT",table = "TA_REMISE",clazz = TaRemise.class)
	public String getCodeDocument() {
		return codeDocument;
	}

	public void setCodeDocument(String codeReglement) {
		this.codeDocument = codeReglement;
	}
	
//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "ID_TIERS")
//	@LgrHibernateValidated(champEntite = "", champ = "ID_TIERS",table = "TA_TIERS",clazz = TaTiers.class)
//	public TaTiers getTaTiers() {
//		return this.taTiers;
//	}
//
//	public void setTaTiers(TaTiers taTiers) {
//		this.taTiers = taTiers;
//	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_DOCUMENT",table = "TA_REMISE",clazz = TaRemise.class)
	public Date getDateDocument() {
		return dateDocument;
	}

	public void setDateDocument(Date dateReglement) {
		this.dateDocument = dateReglement;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "DATE_LIV_DOCUMENT", length = 19)
	@LgrHibernateValidated(champEntite = "", champBd = "DATE_LIV_DOCUMENT",table = "TA_REMISE",clazz = TaRemise.class)
	public Date getDateLivDocument() {
		return dateLivDocument;
	}

	public void setDateLivDocument(Date dateEncaissement) {
		this.dateLivDocument = dateEncaissement;
	}



	@Column(name = "LIBELLE_DOCUMENT", unique = true, length = 20)
	@LgrHibernateValidated(champEntite = "", champBd = "LIBELLE_DOCUMENT",table = "TA_REMISE",clazz = TaRemise.class)
	public String getLibelleDocument() {
		return libelleDocument;
	}

	public void setLibelleDocument(String libellePaiement) {
		this.libelleDocument = libellePaiement;
	}


	@Column(name = "ETAT")
	@LgrHibernateValidated(champEntite = "", champBd = "ETAT",table = "TA_REMISE",clazz = TaRemise.class)
	public Integer getEtat() {
		return etat;
	}

	public void setEtat(Integer etat) {
		this.etat = etat;
	}

	@Column(name = "EXPORT")
	@LgrHibernateValidated(champEntite = "", champBd = "EXPORT",table = "TA_REMISE",clazz = TaRemise.class)
	public Integer getExport() {
		return export;
	}

	public void setExport(Integer export) {
		this.export = export;
	}
	

	@Transient
	public BigDecimal getNetTtcCalc() {
		for (TaLRemise lRemise : getTaLRemises()) {
			if(lRemise.getTaAcompte()!=null)
			  netTtcCalc=netTtcCalc.add(lRemise.getTaAcompte().getNetTtcCalc());
			else
				if(lRemise.getTaReglement()!=null)
					  netTtcCalc=netTtcCalc.add(lRemise.getTaReglement().getNetTtcCalc());
		}
		return netTtcCalc;
	}
	@Transient
	public void setNetTtcCalc(BigDecimal montantReglement) {
		
	}
	
	@OneToMany(cascade = CascadeType.ALL , fetch = FetchType.LAZY, mappedBy = "taDocument")
	@Sort(type = org.hibernate.annotations.SortType.COMPARATOR, comparator = TaRemise.TaLRemiseComparator.class)
	public SortedSet<TaLRemise> getTaLRemises() {
		return taLRemises;
	}

	public void setTaLRemises(SortedSet<TaLRemise> taLRemises) {
		this.taLRemises = taLRemises;
	}
	

	@Column(name = "QUI_CREE_DOCUMENT", length = 50)
	public String getQuiCreeDocument() {
		return this.quiCreeDocument;
	}

	public void setQuiCreeDocument(String quiCreeRDocument) {
		this.quiCreeDocument = quiCreeRDocument;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_CREE_DOCUMENT", length = 19)
	public Date getQuandCreeDocument() {
		return this.quandCreeDocument;
	}

	public void setQuandCreeDocument(Date quandCreeRDocument) {
		this.quandCreeDocument = quandCreeRDocument;
	}

	@Column(name = "QUI_MODIF_DOCUMENT", length = 50)
	public String getQuiModifDocument() {
		return this.quiModifDocument;
	}

	public void setQuiModifDocument(String quiModifRDocument) {
		this.quiModifDocument = quiModifRDocument;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "QUAND_MODIF_DOCUMENT", length = 19)
	public Date getQuandModifDocument() {
		return this.quandModifDocument;
	}

	public void setQuandModifDocument(Date quandModifRDocument) {
		this.quandModifDocument = quandModifRDocument;
	}

	@Column(name = "IP_ACCES", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}
	

	@Transient
	public int getEtatDeSuppression() {
		return etatDeSuppression;
	}
	
	@Transient
	public void setEtatDeSuppression(int etatDeSuppression) {
		etatDeSuppression = etatDeSuppression;
	}
	

	@Override
	protected void afterAjoutLigne(SWTLigneDocument ligne) throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterEnregistrerEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterModifierEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterRemoveLigne(SWTLigneDocument ligne) throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected void afterSupprimerEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
	}

	@Override
	protected boolean beforeAjoutLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeEnregistrerEntete() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeModifierEntete() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeRemoveLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected boolean beforeSupprimerEntete() {
		// TODO Auto-generated method stub
		return false;
	}

	@Override
	protected void reinitialiseNumLignes() {
		// TODO Auto-generated method stub
	}

	@Override
	public void changementMode(ChangeModeEvent evt) {
		// TODO Auto-generated method stub
	}
	

	@Override
	public void calculeTvaEtTotaux() {
		// TODO Auto-generated method stub
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codeDocument == null) ? 0 : codeDocument.hashCode());
		return result;
	}

	@Override
	 @Transient
	public Set<TaRDocument> getTaRDocuments() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	 @Transient
	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		// TODO Auto-generated method stub
		
	}

	@Override
	@Transient
	public BigDecimal getTxRemHtDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transient
	public BigDecimal getTxRemTtcDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transient
	public void setTxRemHtDocument(BigDecimal txRemHtDocument) {
		// TODO Auto-generated method stub
		
	}

	@Override
	@Transient
	public void setTxRemTtcDocument(BigDecimal txRemTtcDocument) {
		// TODO Auto-generated method stub
		
	}

	@Override
	@Transient
	public Integer getTtc() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transient
	public void setTtc(Integer accepte) {
		// TODO Auto-generated method stub
		
	}
	@Override
	@Transient
	public String getTypeDocument() {
		// TODO Auto-generated method stub
		return TYPE_DOC;
	}

	@Transient
	public Date getDateEchDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public BigDecimal getRegleCompletDocument() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public BigDecimal getResteAReglerComplet() {
		// TODO Auto-generated method stub
		return null;
	}

	@Transient
	public void setDateEchDocument(Date dateEchDocument) {
		// TODO Auto-generated method stub
		
	}





	@Transient
	public void setTypeDocument(String typeDocument) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void calculDateEcheanceAbstract(Integer report, Integer finDeMois) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void setRegleCompletDocument(BigDecimal regleCompletDocument) {
		// TODO Auto-generated method stub
		
	}


	@Override
	public void setResteAReglerComplet(BigDecimal resteAReglerComplet) {
		// TODO Auto-generated method stub
		
	}

	@Override
	@Transient
	public TaTiers getTaTiers() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	@Transient
	public void setTaTiers(TaTiers taTiers) {
		// TODO Auto-generated method stub
		
	}

	@Transient
	public TaTPaiement getTaTPaiement() {
		TaTPaiement tPaiement=null;
		for (TaLRemise lremise : getTaLRemises()) {
			if(lremise.getTaReglement()!=null){
				return lremise.getTaReglement().getTaTPaiement();
			}
			else
				if(lremise.getTaAcompte()!=null){
					return lremise.getTaAcompte().getTaTPaiement();
				}			
		}
		return tPaiement;
	}

	@Transient
	public void setTaTPaiement(TaTPaiement taTPaiement) {
	}

	@Transient
	public TaCompteBanque getTaCompteBanque() {
		TaCompteBanque tCompteBanque=null;
		for (TaLRemise lremise : getTaLRemises()) {
			if(lremise.getTaReglement()!=null){
				return lremise.getTaReglement().getTaCompteBanque();
			}
			else
				if(lremise.getTaAcompte()!=null){
					return lremise.getTaAcompte().getTaCompteBanque();
				}			
		}
		return tCompteBanque;		
	}

	@Transient
	public void setTaCompteBanque(TaCompteBanque taCompteBanque) {
	}

//	@PreUpdate
	public void verifUpdate() throws Exception{
		if(this!=null && this.isRemplie()){
			
		}
		
	}

	public static class TaLRemiseComparator implements Comparator<TaLRemise> {
		 
	    public int compare(TaLRemise taLRemise1, TaLRemise taLRemise2) {
	        IDocumentTiers document1=null;
	        IDocumentTiers document2=null;
	        if(taLRemise1.getTaAcompte()!=null)document1=taLRemise1.getTaAcompte();
	        if(taLRemise1.getTaReglement()!=null)document1=taLRemise1.getTaReglement();
	        
	        if(taLRemise2.getTaAcompte()!=null)document2=taLRemise2.getTaAcompte();
	        if(taLRemise2.getTaReglement()!=null)document2=taLRemise2.getTaReglement();
	     	        
	        int premier = document1.getCodeDocument().compareTo(document2.getCodeDocument());
	        
	        int deuxieme = document1.getDateDocument().compareTo(document2.getDateDocument());

	        int compared = premier;
	        if (compared == 0) {
	            compared = deuxieme;
	        }
	 
	        return compared;
	    }
	}
	
	@Transient
	public String getCommentaire() {
		// TODO Auto-generated method stub
		return null;
	}


	@Transient
	public void setCommentaire(String commentaire) {
		// TODO Auto-generated method stub
		
	}
	
	
	@Transient
	public List<ILigneDocumentTiers> getLignesGeneral(){
		return this.lignes;
	}

	@Transient
	public boolean isLegrain() {
		// TODO Auto-generated method stub
		return false;
	}
//	@PrePersist
//	@PreUpdate
	public void beforePost ()throws Exception{
		this.setCodeDocument(codeDocument.toUpperCase());
	}


	@Transient
	public BigDecimal getNetHtCalc() {
		// TODO Auto-generated method stub
		return null;
	}


	@Transient
	public IInfosDocumentTiers getTaInfosDocument() {
		// TODO Auto-generated method stub
		return null;
	}
}
