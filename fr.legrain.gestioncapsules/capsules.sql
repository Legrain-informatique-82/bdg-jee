CREATE TABLE TA_R_TITRE_TRANSPORT
(
  ID_R_TITRE_TRANSPORT DID3 NOT NULL,
  ID_TITRE_TRANSPORT DID3 NOT NULL,
  ID_ARTICLE DID3 NOT NULL,
  ID_UNITE DID3 NOT NULL,
  QTE_TITRE_TRANSPORT INTEGER,
  QUI_CREE DLIB50,
  QUAND_CREE TIMESTAMP DEFAULT 'NOW',
  QUI_MODIF DLIB50,
  QUAND_MODIF TIMESTAMP DEFAULT 'NOW',
  "VERSION" NUM_VERSION,
  IP_ACCES DLIB50NN DEFAULT 0,
  VERSION_OBJ INTEGER
);

CREATE GENERATOR NUM_ID_R_TITRE_TRANSPORT;
SET GENERATOR NUM_ID_R_TITRE_TRANSPORT TO 0;

ALTER TABLE TA_R_TITRE_TRANSPORT ADD PRIMARY KEY (ID_R_TITRE_TRANSPORT);
ALTER TABLE TA_R_TITRE_TRANSPORT ADD FOREIGN KEY (ID_TITRE_TRANSPORT) REFERENCES TA_TITRE_TRANSPORT (ID_TITRE_TRANSPORT);
ALTER TABLE TA_R_TITRE_TRANSPORT ADD FOREIGN KEY (ID_ARTICLE) REFERENCES TA_ARTICLE (ID_ARTICLE);
ALTER TABLE TA_R_TITRE_TRANSPORT ADD FOREIGN KEY (ID_UNITE) REFERENCES TA_UNITE (ID_UNITE);

CREATE OR ALTER TRIGGER TBI_TA_R_TITRE_TRANSPORT FOR TA_R_TITRE_TRANSPORT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_R_TITRE_TRANSPORT is null) Then
      New.ID_R_TITRE_TRANSPORT = GEN_ID(NUM_ID_R_TITRE_TRANSPORT,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_R_TITRE_TRANSPORT FOR TA_R_TITRE_TRANSPORT
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/*
 * *****************************************************************************************************************************
 */

CREATE TABLE TA_TITRE_TRANSPORT
(
  ID_TITRE_TRANSPORT DID3 NOT NULL,
  CODE_TITRE_TRANSPORT DLGR_LIB,
  LIBELLE_TITRE_TRANSPORT DLGR_LIB,
  QTE_MIN_TITRE_TRANSPORT INTEGER,
  QUI_CREE DLIB50,
  QUAND_CREE TIMESTAMP DEFAULT 'NOW',
  QUI_MODIF DLIB50,
  QUAND_MODIF TIMESTAMP DEFAULT 'NOW',
  "VERSION" NUM_VERSION,
  IP_ACCES DLIB50NN DEFAULT 0,
  VERSION_OBJ INTEGER
);

CREATE GENERATOR NUM_ID_TITRE_TRANSPORT;
SET GENERATOR NUM_ID_TITRE_TRANSPORT TO 0;

ALTER TABLE TA_TITRE_TRANSPORT ADD PRIMARY KEY (ID_TITRE_TRANSPORT);

CREATE OR ALTER TRIGGER TBI_TA_TITRE_TRANSPORT FOR TA_TITRE_TRANSPORT
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_TITRE_TRANSPORT is null) Then
      New.ID_TITRE_TRANSPORT = GEN_ID(NUM_ID_TITRE_TRANSPORT,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_TITRE_TRANSPORT FOR TA_TITRE_TRANSPORT
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/*
 * *****************************************************************************************************************************
 */

CREATE TABLE TA_STOCK_CAPSULES
(
  ID_STOCK_CAPSULES DID3 NOT NULL,
  ID_TITRE_TRANSPORT DID_FACULTATIF,
  MOUV_STOCK DLIB_MOUV DEFAULT 'E',
  DATE_STOCK DATE_LGR DEFAULT 'NOW',
  LIBELLE_STOCK DLIB255,
  QTE1_STOCK NUMERIC(15,2),
  UN1_STOCK DLGR_CODEL,
  QTE2_STOCK NUMERIC(15,2),
  UN2_STOCK DLGR_CODEL,
  QUI_CREE DLIB50,
  QUAND_CREE TIMESTAMP DEFAULT 'NOW',
  QUI_MODIF DLIB50,
  QUAND_MODIF TIMESTAMP DEFAULT 'NOW',
  "VERSION" NUM_VERSION,
  IP_ACCES DLIB50NN DEFAULT 0,
  VERSION_OBJ INTEGER
);

ALTER TABLE TA_STOCK_CAPSULES ADD PRIMARY KEY (ID_STOCK_CAPSULES);
ALTER TABLE TA_STOCK_CAPSULES ADD FOREIGN KEY (ID_TITRE_TRANSPORT) REFERENCES TA_TITRE_TRANSPORT (ID_TITRE_TRANSPORT);

CREATE GENERATOR NUM_ID_STOCK_CAPSULES;
SET GENERATOR NUM_ID_STOCK_CAPSULES TO 0;

CREATE OR ALTER TRIGGER TBI_TA_STOCK_CAPSULES FOR TA_STOCK_CAPSULES
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_STOCK_CAPSULES is null) Then
      New.ID_STOCK_CAPSULES = GEN_ID(NUM_ID_STOCK_CAPSULES,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_STOCK_CAPSULES FOR TA_STOCK_CAPSULES
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/*
 * *****************************************************************************************************************************
 */

CREATE TABLE TA_REPORT_STOCK_CAPSULES
(
  ID_REPORT_STOCK_CAPSULES DID3 NOT NULL,
  ID_TITRE_TRANSPORT_REPORT_STOCK DID_FACULTATIF,
  DATE_DEB_REPORT_STOCK DATE_LGR DEFAULT 'NOW',
  DATE_FIN_REPORT_STOCK DATE_LGR DEFAULT 'NOW',
  QTE1_REPORT_STOCK DID9FACULT,
  UNITE1_REPORT_STOCK DLGR_CODEL,
  QTE2_REPORT_STOCK DID9FACULT,
  UNITE2_REPORT_STOCK DLGR_CODEL,
  QUI_CREE DLIB50,
  QUAND_CREE TIMESTAMP DEFAULT 'NOW',
  QUI_MODIF DLIB50,
  QUAND_MODIF TIMESTAMP DEFAULT 'NOW',
  "VERSION" NUM_VERSION,
  IP_ACCES DLIB50NN DEFAULT 0,
  VERSION_OBJ INTEGER
);

ALTER TABLE TA_REPORT_STOCK_CAPSULES ADD PRIMARY KEY (ID_REPORT_STOCK_CAPSULES);
ALTER TABLE TA_REPORT_STOCK_CAPSULES ADD FOREIGN KEY (ID_TITRE_TRANSPORT_REPORT_STOCK) REFERENCES TA_TITRE_TRANSPORT (ID_TITRE_TRANSPORT);

CREATE GENERATOR NUM_ID_REPORT_STOCK_CAPSULES;
SET GENERATOR NUM_ID_REPORT_STOCK_CAPSULES TO 0;

CREATE OR ALTER TRIGGER TBI_TA_REPORT_STOCK_CAPSULES FOR TA_REPORT_STOCK_CAPSULES
ACTIVE BEFORE INSERT POSITION 0
as
begin
   If (New.ID_REPORT_STOCK_CAPSULES is null) Then
      New.ID_REPORT_STOCK_CAPSULES = GEN_ID(NUM_ID_REPORT_STOCK_CAPSULES,1);
   New.QUI_CREE = USER;
   new.QUAND_CREE = 'NOW';
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

CREATE OR ALTER TRIGGER TBU_TA_REPORT_STOCK_CAPSULES FOR TA_REPORT_STOCK_CAPSULES
ACTIVE BEFORE UPDATE POSITION 1
as
begin
   new.QUI_MODIF = USER;
   new.QUAND_MODIF = 'NOW';
   new.IP_ACCES = current_connection;
   select num_version from ta_version into new."VERSION";
end
^

/*
 * *****************************************************************************************************************************
 */


CREATE or ALTER  PROCEDURE GESTION_INSERTION_TITRE_TRANS_ART
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='ID_TITRE_TRANSPORT')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD ID_TITRE_TRANSPORT DID_FACULTATIF';
    EXECUTE STATEMENT :query; 
    
    query = 'ALTER TABLE TA_ARTICLE ADD FOREIGN KEY (ID_TITRE_TRANSPORT) REFERENCES TA_TITRE_TRANSPORT (ID_TITRE_TRANSPORT)';
    EXECUTE STATEMENT :query; 
  end
    
END
^
EXECUTE PROCEDURE GESTION_INSERTION_TITRE_TRANS_ART
^
drop procedure GESTION_INSERTION_TITRE_TRANS_ART
^

/*
 * *****************************************************************************************************************************
 */

CREATE or ALTER  PROCEDURE GESTION_INSERTION_TITRE_TRANS_ART
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_ARTICLE' and  a.RDB$FIELD_NAME ='ID_R_TITRE_TRANSPORT')) THEN
  begin
    query = 'ALTER TABLE TA_ARTICLE ADD ID_R_TITRE_TRANSPORT DID_FACULTATIF';
    EXECUTE STATEMENT :query; 
    
    query = 'ALTER TABLE TA_ARTICLE ADD FOREIGN KEY (ID_R_TITRE_TRANSPORT) REFERENCES TA_R_TITRE_TRANSPORT (ID_R_TITRE_TRANSPORT)';
    EXECUTE STATEMENT :query; 
  end
    
END
^

/*
 * *****************************************************************************************************************************
 */

CREATE or ALTER  PROCEDURE GESTION_INSERTION_TITRE_TRANS_AVOIR
as    
DECLARE VARIABLE QUERY VARCHAR(5000);
BEGIN
query ='';
IF (not exists( SELECT a.RDB$FIELD_NAME, a.RDB$RELATION_NAME FROM RDB$RELATION_FIELDS a
where a.RDB$RELATION_NAME = 'TA_L_AVOIR' and  a.RDB$FIELD_NAME ='QTE_TITRE_TRANSPORT_L_DOCUMENT')) THEN
  begin
    query = 'ALTER TABLE TA_L_AVOIR ADD QTE_TITRE_TRANSPORT_L_DOCUMENT INTEGER';
    EXECUTE STATEMENT :query; 
    
    query = 'ALTER TABLE TA_L_AVOIR ADD TITRE_TRANSPORT_L_DOCUMENT DLIB50';
    EXECUTE STATEMENT :query; 
  end
END
^
EXECUTE PROCEDURE GESTION_INSERTION_TITRE_TRANS_AVOIR
^
drop procedure GESTION_INSERTION_TITRE_TRANS_AVOIR
^
