package fr.legrain.tiers.model;

// Generated Mar 25, 2009 10:06:49 AM by Hibernate Tools 3.2.0.CR1

import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.SortedSet;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.PostRemove;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.xml.bind.annotation.XmlTransient;

import org.apache.log4j.Logger;
import org.hibernate.annotations.Sort;

import fr.legrain.article.model.TaArticle;
import fr.legrain.article.model.TaNoteArticle;
import fr.legrain.document.model.TaTPaiement;
import fr.legrain.lib.data.ListeSorted;
import fr.legrain.validator.LgrHibernateValidated;
//import fr.legrain.SupportAbon.dao.TaSupportAbon;
//import fr.legrain.articles.dao.TaPrix;
//import fr.legrain.documents.dao.TaAcompte;
//import fr.legrain.documents.dao.TaAvoir;
//import fr.legrain.documents.dao.TaFacture;
//import fr.legrain.documents.dao.TaReglement;
//import fr.legrain.documents.dao.TaTPaiement;
//import fr.legrain.dossier.dao.TaInfoEntreprise;
//import fr.legrain.dossier.dao.TaInfoEntrepriseDAO;
//import fr.legrain.gestCom.Module_Document.IDocumentTiers;

/**
 * TaTiers generated by hbm2java
 */
@Entity
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "ta_tiers")
//@SequenceGenerator(name = "gen_tiers", sequenceName = "num_id_tiers", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaTiers.QN.FIND_BY_TYPE, query="select a from TaTiers a where a.systeme!=true and a.taTTiers.codeTTiers = :codeTTiers"),
		@NamedQuery(name=TaTiers.QN.FIND_BY_TYPE_LIGHT, query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,a.nomTiers,a.prenomTiers,ent.nomEntreprise, a.actifTiers) from TaTiers a left join a.taTTiers tt left join a.taEntreprise ent where  a.systeme!=true and a.taTTiers.codeTTiers = :codeTTiers order by a.codeTiers"),
		
		@NamedQuery(name=TaTiers.QN.FIND_BY_EMAIL, query="select a from TaTiers a where a.systeme!=true and a.taEmail.adresseEmail = :adresseEmail"),
		@NamedQuery(name=TaTiers.QN.FIND_BY_EMAIL_AND_CODE_TIERS, query="select t from TaEmail a join a.taTiers t where a.adresseEmail = :adresseEmail and t.codeTiers = :codeTiers and t.systeme!=true"),
		@NamedQuery(name=TaTiers.QN.FIND_BY_EMAIL_PAR_DEFAUT, query="select a from TaTiers a where a.systeme!=true and a.taEmail.adresseEmail = :adresseEmail"),
		@NamedQuery(name=TaTiers.QN.FIND_BY_EMAIL_PAR_DEFAUT_AND_CODE_TIERS, query="select t from TaEmail a join a.taTiers t where a.adresseEmail = :adresseEmail and t.codeTiers = :codeTiers and t.systeme!=true"),
		
		@NamedQuery(name=TaTiers.QN.FIND_BY_IMPORT, query="select a from TaTiers a where a.systeme!=true and  a.origineImport = :origineImport and a.idImport = :idImport"),
		@NamedQuery(name=TaTiers.QN.FIND_ALL_LIGHT_ACTIF, query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,a.nomTiers,a.prenomTiers,ent.nomEntreprise,a.actifTiers) from TaTiers a left join a.taTTiers tt left join a.taEntreprise ent where  a.systeme!=true and a.actifTiers=1 order by a.codeTiers"),
		@NamedQuery(name=TaTiers.QN.FIND_ALL_LIGHT, query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,a.nomTiers,a.prenomTiers,a.actifTiers) from TaTiers a left join a.taTTiers tt where  a.systeme!=true and a.actifTiers=1 order by a.codeTiers"),
		@NamedQuery(name=TaTiers.QN.FIND_BY_CODE_LIGHT, query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,a.nomTiers,a.prenomTiers,ent.nomEntreprise, a.actifTiers) from TaTiers a left join a.taTTiers tt left join a.taEntreprise ent where  a.systeme!=true and  a.codeTiers like :codeTiers order by a.codeTiers"),
		@NamedQuery(name=TaTiers.QN.COUNT_BY_TYPE_TIERS, 
		query="select new fr.legrain.tiers.dto.TaTiersDTO(cast (count(*) as integer),tt.codeTTiers,a.actifTiers) "
				+ "from TaTiers a left join a.taTTiers tt where a.actifTiers=1  and systeme != true "
				+ "group by tt.codeTTiers, a.actifTiers order by tt.codeTTiers"),
		@NamedQuery(name=TaTiers.QN.COUNT_ALL_ACTIF_TIERS, 
		query="select new fr.legrain.tiers.dto.TaTiersDTO(cast (count(*) as integer),a.actifTiers) "
				+ "from TaTiers a where a.actifTiers=1 and systeme != true "
				+ "group by a.actifTiers"),
		@NamedQuery(name=TaTiers.QN.FIND_LIGHT_TTARIF, 
		query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,tta.codeTTarif,ent.nomEntreprise,a.nomTiers,a.prenomTiers,a.actifTiers, "
				+ "ft.idFamille, ft.codeFamille, ft.libcFamille, a.taAdresse.codepostalAdresse, a.taAdresse.villeAdresse, a.taAdresse.paysAdresse, email.adresseEmail, tel.numeroTelephone) "
				+ "from TaTiers a left join a.taTTiers tt  join a.taTTarif tta left join a.taFamilleTiers ft left join a.taAdresse adr left join a.taEntreprise ent left join a.taEmail email left join a.taTelephone tel where  a.systeme!=true order by a.codeTiers")	,
//		@NamedQuery(name=TaTiers.QN.FIND_LIGHT_TTARIF_FAMILLE, 
//		query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,tta.codeTTarif,ent.nomEntreprise,a.nomTiers,a.prenomTiers,a.actifTiers, "
//				+ "ft.idFamille, ft.codeFamille, ft.libcFamille, a.taAdresse.codepostalAdresse, a.taAdresse.villeAdresse, a.taAdresse.paysAdresse, email.adresseEmail, tel.numeroTelephone) "
//				+ "from TaTiers a left join a.taTTiers tt  left join a.taTTarif tta left join a.taFamilleTiers ft left join a.taAdresse adr left join a.taEntreprise ent left join a.taEmail email left join a.taTelephone tel "
//				+ "where  a.systeme!=true and (tta.codeTTarif like :codeTTarif) and (ft.codeFamille like :codeFamille) order by a.codeTiers")	,	
		@NamedQuery(name=TaTiers.QN.FIND_ALL_LIGHT_PLUS, 
		query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,ent.nomEntreprise,a.nomTiers,a.prenomTiers,a.actifTiers, "
				+ "ft.idFamille, ft.codeFamille, ft.libcFamille, a.taAdresse.codepostalAdresse, a.taAdresse.villeAdresse, a.taAdresse.paysAdresse, email.adresseEmail, tel.numeroTelephone) "
				+ "from TaTiers a left join a.taTTiers tt left join a.taFamilleTiers ft left join a.taAdresse adr left join a.taEntreprise ent left join a.taEmail email left join a.taTelephone tel where  a.systeme!=true order by a.codeTiers"),
		@NamedQuery(name=TaTiers.QN.FIND_ALL_LIGHT_PLUS_ADRESSE_COMPLETE, 
		query="select new fr.legrain.tiers.dto.TaTiersDTO(a.idTiers,a.codeTiers,tt.codeTTiers,ent.nomEntreprise,a.nomTiers,a.prenomTiers,a.actifTiers, "
				+ "ft.idFamille, ft.codeFamille, ft.libcFamille, a.taAdresse.adresse1Adresse,a.taAdresse.adresse2Adresse, a.taAdresse.adresse3Adresse, a.taAdresse.codepostalAdresse, a.taAdresse.villeAdresse, a.taAdresse.paysAdresse, email.adresseEmail, tel.numeroTelephone) "
				+ "from TaTiers a left join a.taTTiers tt left join a.taFamilleTiers ft left join a.taAdresse adr left join a.taEntreprise ent left join a.taEmail email left join a.taTelephone tel where  a.systeme!=true order by a.codeTiers")
		})
public class TaTiers implements java.io.Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 2281641937759093617L;
	@Transient
	static Logger logger = Logger.getLogger(TaTiers.class.getName());

	public static class QN {
		public static final String FIND_BY_TYPE = "TaTiers.findByType";
		public static final String FIND_BY_IMPORT = "TaTiers.findByImport";
		public static final String FIND_ALL_LIGHT = "TaTiers.findAllLight";
		public static final String FIND_ALL_LIGHT_ACTIF = "TaTiers.findAllLightActif";
		public static final String FIND_BY_CODE_LIGHT = "TaTiers.findByCodeLight";
		public static final String COUNT_BY_TYPE_TIERS = "TaTiers.countByTypeTiers";
		public static final String COUNT_ALL_ACTIF_TIERS = "TaTiers.countAllTiersActif";
		public static final String FIND_ALL_LIGHT_PLUS = "TaTiers.findAllLightPlus";
		public static final String FIND_ALL_LIGHT_PLUS_ADRESSE_COMPLETE = "TaTiers.findAllLightPlusAdresseComplete";
		public static final String FIND_LIGHT_TTARIF = "TaTiers.findLightTTarif";
		public static final String FIND_BY_TYPE_LIGHT  = "TaTiers.findByTypeLight";
//		public static final String FIND_LIGHT_TTARIF_FAMILLE ="TaTiers.findLightTTarifFamille";
		
		public static final String FIND_BY_EMAIL = "TaTiers.findByEmail";
		public static final String FIND_BY_EMAIL_PAR_DEFAUT = "TaTiers.findByEmailParDefaut";
		public static final String FIND_BY_EMAIL_AND_CODE_TIERS = "TaTiers.findByEmailAndCodeTiers";
		public static final String FIND_BY_EMAIL_PAR_DEFAUT_AND_CODE_TIERS = "TaTiers.findByEmailParDefautAndCodeTiers";
	}
	public static final String TYPE_DOC = "Tiers";
	public static final String PATH_ICONE_COULEUR = "dashboard/tier.svg";
	public static final String PATH_ICONE_BLANC = "dashboard/tiers-blanc.png";
	public static final String PATH_ICONE_GRIS = "";
	
	private int idTiers;
	private String version;
	private TaCompl taCompl;
	private TaTTiers taTTiers;
	private TaTTvaDoc taTTvaDoc;
	private TaTCivilite taTCivilite;
	private TaTelephone taTelephone;
	private TaCPaiement taCPaiement;
	private TaTPaiement taTPaiement;
	private TaEmail taEmail;
	private TaWeb taWeb;
	private TaTEntite taTEntite;
	private TaAdresse taAdresse;
	private TaTTarif taTTarif;
	private TaEntreprise taEntreprise;
	private TaCommentaire taCommentaire;
	private TaInfoJuridique taInfoJuridique;
	private TaTiers taCommercial;
	private Date dateAnniv;
//	private TaParamCreeDocTiers taParamCreeDocTiers;
	private String codeTiers;
	private String codeCompta;
	private String compte;
	private String nomTiers;
	private String prenomTiers;
	private String surnomTiers;
	private Integer actifTiers;
	private Integer ttcTiers;
	private String quiCree;
	private Date quandCree;
	private String quiModif;
	private Date quandModif;
	private String idImport;
	private String origineImport;
	private String ipAcces;
	private Integer versionObj;
	private Boolean systeme = false;
	private TaFamilleTiers taFamilleTiers;
	private byte[] blobLogo;
	private Boolean utiliseCompteClient = false;
	private Boolean emailCleCompteClientEnvoye = false;
	private String cleLiaisonCompteClient;
	private Date dateDerniereConnexionCompteClient;
	private TaTiers taContact;
	private Boolean contact = false;
	private String maRefTiers;
	
	private String importationDivers;
	
	
	private SortedSet<TaAdresse> taAdresses = new ListeSorted<TaAdresse>();
	private Set<TaCompteBanque> taCompteBanques = new HashSet<TaCompteBanque>(0);
	private Set<TaCarteBancaire> taCarteBancaires = new HashSet<TaCarteBancaire>(0);
	private Set<TaEmail> taEmails = new HashSet<TaEmail>(0);
	private Set<TaTelephone> taTelephones = new HashSet<TaTelephone>(0);
//	private Set<TaLiens> taLienses = new HashSet<TaLiens>(0);
	private Set<TaWeb> taWebs = new HashSet<TaWeb>(0);
	private Set<TaFamilleTiers> taFamilleTierses = new HashSet<TaFamilleTiers>(0);
//	private Set<TaTiers> taCommerciaux = new HashSet<TaTiers>(0);
	private Set<TaTiers> taConctacts = new HashSet<TaTiers>(0);
//	private Set<TaNoteTiers> taNotes = new HashSet<TaNoteTiers>(0);
//	private Set<TaParamCreeDocTiers> taParamCreeDocTierses = new HashSet<TaParamCreeDocTiers>(0);
	
	//private Set<TaSupportAbon> taSupportAbons = new HashSet<TaSupportAbon>(0);
	
	@Transient
	private Boolean accepte=true;
	
	
	public TaTiers() {
	}

	public TaTiers(int idTiers) {
		this.idTiers = idTiers;
	}

	public TaTiers(int idTiers, TaCompl taCompl, TaTTiers taTTiers,
			TaTCivilite taTCivilite, TaTelephone taTelephone,
			TaCPaiement taCPaiement, TaEmail taEmail, TaWeb taWeb,
			TaTEntite taTEntite, TaAdresse taAdresse, TaTTarif taTTarif,
			TaEntreprise taEntreprise, TaCommentaire taCommentaire,
			TaInfoJuridique taInfoJuridique,
			String codeTiers, String codeCompta, String compte,
			String nomTiers, String prenomTiers, String surnomTiers,
			Integer actifTiers, Integer ttcTiers, String quiCreeTiers,
			Date quandCreeTiers, String quiModifTiers, Date quandModifTiers,
			String ipAcces, Integer versionObj, SortedSet<TaAdresse> taAdresses,
			Set<TaCompteBanque> taCompteBanques, Set<TaEmail> taEmails,
			Set<TaTelephone> taTelephones, Set<TaLiens> taLienses,
			Set<TaWeb> taWebs, Date dateAnniv) {
		this.idTiers = idTiers;
		this.taCompl = taCompl;
		this.taTTiers = taTTiers;
		this.taTCivilite = taTCivilite;
		this.taTelephone = taTelephone;
		this.taCPaiement = taCPaiement;
		this.taEmail = taEmail;
		this.taWeb = taWeb;
		this.taTEntite = taTEntite;
		this.taAdresse = taAdresse;
		this.taTTarif = taTTarif;
		this.taEntreprise = taEntreprise;
		this.taInfoJuridique = taInfoJuridique;
		this.taCommentaire = taCommentaire;
		this.codeTiers = codeTiers;
		this.codeCompta = codeCompta;
		this.compte = compte;
		this.nomTiers = nomTiers;
		this.prenomTiers = prenomTiers;
		this.surnomTiers = surnomTiers;
		this.dateAnniv = dateAnniv;
		this.actifTiers = actifTiers;
		this.ttcTiers = ttcTiers;
		this.quiCree = quiCreeTiers;
		this.quandCree = quandCreeTiers;
		this.quiModif = quiModifTiers;
		this.quandModif = quandModifTiers;
		this.ipAcces = ipAcces;
		this.versionObj = versionObj;
		this.taAdresses = taAdresses;
		this.taCompteBanques = taCompteBanques;
		this.taEmails = taEmails;
		this.taTelephones = taTelephones;
//		this.taLienses = taLienses;
		this.taWebs = taWebs;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id_tiers", unique = true, nullable = false)
	@LgrHibernateValidated(champBd = "id_tiers",table = "ta_tiers",champEntite="idTiers", clazz = TaTiers.class)
	public int getIdTiers() {
		return this.idTiers;
	}

	public void setIdTiers(int idTiers) {
		this.idTiers = idTiers;
	}

	
	@Column(name = "version", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
	@JoinColumn(name = "id_compl")
	@LgrHibernateValidated(champBd = "id_compl",table = "ta_tiers",champEntite="idCompl",clazz = TaCompl.class)
	public TaCompl getTaCompl() {
		return this.taCompl;
	}

	public void setTaCompl(TaCompl taCompl) {
		this.taCompl = taCompl;
	}

//	@ManyToOne(fetch = FetchType.EAGER, cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REFRESH})
	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_t_tiers")
	@LgrHibernateValidated(champBd = "id_t_tiers",table = "ta_tiers",champEntite="idTTiers",clazz = TaTTiers.class)
	public TaTTiers getTaTTiers() {
		return this.taTTiers;
	}

	public void setTaTTiers(TaTTiers taTTiers) {
		this.taTTiers = taTTiers;
	}
	
	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_t_tva_doc")
	@LgrHibernateValidated(champBd = "id_t_tva_doc",table = "ta_tiers",champEntite="idTTvaDoc",clazz = TaTTvaDoc.class)
	public TaTTvaDoc getTaTTvaDoc() {
		return taTTvaDoc;
	}

	public void setTaTTvaDoc(TaTTvaDoc taTTvaDoc) {
		this.taTTvaDoc = taTTvaDoc;
	}
	
	

	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_t_civilite")
	@LgrHibernateValidated(champBd = "id_t_civilite",table = "ta_tiers",champEntite="idTCivilite",clazz = TaTCivilite.class)
	public TaTCivilite getTaTCivilite() {
		return this.taTCivilite;
	}

	public void setTaTCivilite(TaTCivilite taTCivilite) {
		this.taTCivilite = taTCivilite;
	}

	@OneToOne(fetch = FetchType.EAGER, cascade = {CascadeType.REMOVE, CascadeType.REFRESH} , orphanRemoval=true)
//	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy="taTiers" ,orphanRemoval=true) //
	@JoinColumn(name = "id_telephone")
	@LgrHibernateValidated(champBd = "id_telephone",table = "ta_tiers",champEntite="idTelephone",clazz = TaTelephone.class)
	public TaTelephone getTaTelephone() {
		return this.taTelephone;
	}

	public void setTaTelephone(TaTelephone taTelephone) {
		this.taTelephone = taTelephone;
	}
	
	@ManyToOne(fetch = FetchType.EAGER,  cascade = CascadeType.ALL)
	@JoinColumn(name = "id_commercial")
	@LgrHibernateValidated(champBd = "id_commercial",table = "ta_tiers",champEntite="idTiers",clazz = TaTiers.class)
	public TaTiers getTaCommercial() {
		return this.taCommercial;
	}

	public void setTaCommercial(TaTiers taCommercial) {
		this.taCommercial = taCommercial;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_c_paiement")
	@LgrHibernateValidated(champBd = "id_c_paiement",table = "ta_tiers",champEntite="idCPaiement",clazz = TaCPaiement.class)
	public TaCPaiement getTaCPaiement() {
		return this.taCPaiement;
	}

	public void setTaCPaiement(TaCPaiement taCPaiement) {
		this.taCPaiement = taCPaiement;
	}
	
	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_t_paiement")
	@LgrHibernateValidated(champBd = "id_t_paiement",table = "ta_tiers",champEntite="idTPaiement",clazz = TaTPaiement.class)
	public TaTPaiement getTaTPaiement() {
		return taTPaiement;
	}

	public void setTaTPaiement(TaTPaiement taTPaiement) {
		this.taTPaiement = taTPaiement;
	}
	

	@OneToOne(fetch = FetchType.EAGER, cascade = {CascadeType.REMOVE, CascadeType.REFRESH} , orphanRemoval=true)
//	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy="taTiers", orphanRemoval=true)
	@JoinColumn(name = "id_email")
	@LgrHibernateValidated(champBd = "id_email",table = "ta_tiers",champEntite="idEmail",clazz = TaEmail.class)
	public TaEmail getTaEmail() {
		return this.taEmail;
	}

	public void setTaEmail(TaEmail taEmail) {
		this.taEmail = taEmail;
	}

	@OneToOne(fetch = FetchType.EAGER, cascade = {CascadeType.REMOVE, CascadeType.REFRESH} , orphanRemoval=true)
//	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, mappedBy="taTiers", orphanRemoval=true)
	@JoinColumn(name = "id_web")
	@LgrHibernateValidated(champBd = "id_web",table = "ta_tiers",champEntite="idWeb",clazz = TaWeb.class)
	public TaWeb getTaWeb() {
		return this.taWeb;
	}

	public void setTaWeb(TaWeb taWeb) {
		this.taWeb = taWeb;
	}
	
//	@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_famille_tiers")
	@LgrHibernateValidated(champBd = "id_famille_tiers",table = "ta_tiers",champEntite="idFamille",clazz = TaFamilleTiers.class)
	public TaFamilleTiers getTaFamilleTiers() {
		return taFamilleTiers;
	}

	public void setTaFamilleTiers(TaFamilleTiers taFamilleTiers) {
		this.taFamilleTiers = taFamilleTiers;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_t_entite")
	@LgrHibernateValidated(champBd = "id_t_entite",table = "ta_tiers",champEntite="idTEntite",clazz = TaTEntite.class)
	public TaTEntite getTaTEntite() {
		return this.taTEntite;
	}

	public void setTaTEntite(TaTEntite taTEntite) {
		this.taTEntite = taTEntite;
	}

	@OneToOne(fetch = FetchType.EAGER, cascade = {CascadeType.REMOVE, CascadeType.REFRESH} , orphanRemoval=true)
//	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL , mappedBy="taTiers", orphanRemoval=true)
	@JoinColumn(name = "id_adresse")
	@LgrHibernateValidated(champBd = "id_adresse",table = "ta_tiers",champEntite="idAdresse",clazz = TaAdresse.class)
	public TaAdresse getTaAdresse() {
		return this.taAdresse;
	}

	public void setTaAdresse(TaAdresse taAdresse) {
		this.taAdresse = taAdresse;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_t_tarif")
	@LgrHibernateValidated(champBd = "id_t_tarif",table = "ta_tiers",champEntite="idTTarif",clazz = TaTTarif.class)
	public TaTTarif getTaTTarif() {
		return this.taTTarif;
	}

	public void setTaTTarif(TaTTarif taTTarif) {
		this.taTTarif = taTTarif;
	}

	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinColumn(name = "id_entreprise")
	@LgrHibernateValidated(champBd = "id_entreprise",table = "ta_tiers",champEntite="idEntreprise",clazz = TaEntreprise.class)
	public TaEntreprise getTaEntreprise() {
		return this.taEntreprise;
	}

	public void setTaEntreprise(TaEntreprise taEntreprise) {
		this.taEntreprise = taEntreprise;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinColumn(name = "id_commentaire")
	@LgrHibernateValidated(champBd = "id_commentaire",table = "ta_tiers",champEntite="idCommentaire",clazz = TaCommentaire.class)
	public TaCommentaire getTaCommentaire() {
		return this.taCommentaire;
	}

	public void setTaCommentaire(TaCommentaire taCommentaire) {
		this.taCommentaire = taCommentaire;
	}
	
	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval=true)
	@JoinColumn(name = "id_info_juridique")
	@LgrHibernateValidated(champBd = "id_info_juridique",table = "ta_tiers",champEntite="idInfoJuridique",clazz = TaInfoJuridique.class)
	public TaInfoJuridique getTaInfoJuridique() {
		return this.taInfoJuridique;
	}

	public void setTaInfoJuridique(TaInfoJuridique taInfoJuridique) {
		this.taInfoJuridique = taInfoJuridique;
	}
	
//	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
//	@JoinColumn(name = "id_param_cree_doc_tiers")
//	@LgrHibernateValidated(champ = "id_param_cree_doc_tiers",table = "ta_tiers",clazz = TaParamCreeDocTiers.class)
//	public TaParamCreeDocTiers getTaParamCreeDocTiers() {
//		return taParamCreeDocTiers;
//	}
//
//	public void setTaParamCreeDocTiers(TaParamCreeDocTiers taParamCreeDocTiers) {
//		this.taParamCreeDocTiers = taParamCreeDocTiers;
//	}
	
	@Column(name = "code_tiers", length = 20)
	@LgrHibernateValidated(champBd = "code_tiers",table = "ta_tiers",champEntite="codeTiers",clazz = TaTiers.class)
	public String getCodeTiers() {
		return this.codeTiers;
	}

	public void setCodeTiers(String codeTiers) {
		this.codeTiers = codeTiers;
	}

	@Column(name = "code_compta", length = 7)
	@LgrHibernateValidated(champBd = "code_compta",table = "ta_tiers",champEntite="codeCompta",clazz = TaTiers.class)
	public String getCodeCompta() {
		return this.codeCompta;
	}

	public void setCodeCompta(String codeCompta) {
		this.codeCompta = codeCompta;
	}

	@Column(name = "compte", length = 8)
	@LgrHibernateValidated(champBd = "compte",table = "ta_tiers",champEntite="compte",clazz = TaTiers.class)
	public String getCompte() {
		return this.compte;
	}

	public void setCompte(String compte) {
		this.compte = compte;
	}

	@Column(name = "nom_tiers", length = 100)
	@LgrHibernateValidated(champBd = "nom_tiers",table = "ta_tiers",champEntite="nomTiers",clazz = TaTiers.class)
	public String getNomTiers() {
		return this.nomTiers;
	}

	public void setNomTiers(String nomTiers) {
		this.nomTiers = nomTiers;
	}

	@Column(name = "prenom_tiers", length = 100)
	@LgrHibernateValidated(champBd = "prenom_tiers",table = "ta_tiers",champEntite="prenomTiers",clazz = TaTiers.class)
	public String getPrenomTiers() {
		return this.prenomTiers;
	}

	public void setPrenomTiers(String prenomTiers) {
		this.prenomTiers = prenomTiers;
	}

	@Column(name = "surnom_tiers", length = 20)
	@LgrHibernateValidated(champBd = "surnom_tiers",table = "ta_tiers",champEntite="surnomTiers",clazz = TaTiers.class)
	public String getSurnomTiers() {
		return this.surnomTiers;
	}

	public void setSurnomTiers(String surnomTiers) {
		this.surnomTiers = surnomTiers;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_anniv", length = 10)
	public Date getDateAnniv() {
		return dateAnniv;
	}

	public void setDateAnniv(Date dateAnniv) {
		this.dateAnniv = dateAnniv;
	}
	
	
	@Column(name = "actif_tiers")
	@LgrHibernateValidated(champBd = "actif_tiers",table = "ta_tiers",champEntite="actifTiers",clazz = TaTiers.class)
	public Integer getActifTiers() {
		return this.actifTiers;
	}

	public void setActifTiers(Integer actifTiers) {
		this.actifTiers = actifTiers;
	}

	@Column(name = "ttc_tiers")
	@LgrHibernateValidated(champBd = "ttc_tiers",table = "ta_tiers",champEntite="ttcTiers",clazz = TaTiers.class)
	public Integer getTtcTiers() {
		return this.ttcTiers;
	}

	public void setTtcTiers(Integer ttcTiers) {
		this.ttcTiers = ttcTiers;
	}

	@Column(name = "qui_cree", length = 50)
	public String getQuiCree() {
		return this.quiCree;
	}

	public void setQuiCree(String quiCreeTiers) {
		this.quiCree = quiCreeTiers;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_cree", length = 19)
	public Date getQuandCree() {
		return this.quandCree;
	}

	public void setQuandCree(Date quandCreeTiers) {
		this.quandCree = quandCreeTiers;
	}

	@Column(name = "qui_modif", length = 50)
	public String getQuiModif() {
		return this.quiModif;
	}

	public void setQuiModif(String quiModifTiers) {
		this.quiModif = quiModifTiers;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_modif", length = 19)
	public Date getQuandModif() {
		return this.quandModif;
	}

	public void setQuandModif(Date quandModifTiers) {
		this.quandModif = quandModifTiers;
	}
	
	@Column(name = "origine_import", length = 100)
	@LgrHibernateValidated(champBd = "origine_import",table = "ta_tiers",champEntite="origineImport",clazz = TaTiers.class)
	public String getOrigineImport() {
		return this.origineImport;
	}

	public void setOrigineImport(String origineImport) {
		this.origineImport = origineImport;
	}
	
	@Column(name = "id_import", length = 100)
	@LgrHibernateValidated(champBd = "id_import",table = "ta_tiers",champEntite="idImport",clazz = TaTiers.class)
	public String getIdImport() {
		return this.idImport;
	}

	public void setIdImport(String idImport) {
		this.idImport = idImport;
	}

	@Column(name = "ip_acces", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}

	@Version
	@Column(name = "version_obj")
	public Integer getVersionObj() {
		return this.versionObj;
	}

	public void setVersionObj(Integer versionObj) {
		this.versionObj = versionObj;
	}

//	@OrderBy("idAdresse")
	@SuppressWarnings("deprecation")
	@Sort(type = org.hibernate.annotations.SortType.COMPARATOR, comparator = TaAdresse.OrdreAdresseComparator.class)
//	@OrderBy("ordre")
//	@OrderBy("nvl(taTAdr.codeTAdr , ordre),ordre")
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taTiers", orphanRemoval=true)
	public SortedSet<TaAdresse> getTaAdresses() {
		return this.taAdresses;
	}

	public void setTaAdresses(SortedSet<TaAdresse> taAdresses) {
		this.taAdresses = taAdresses;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taTiers", orphanRemoval=true)
	public Set<TaCompteBanque> getTaCompteBanques() {
		return this.taCompteBanques;
	}

	public void setTaCompteBanques(Set<TaCompteBanque> taCompteBanques) {
		this.taCompteBanques = taCompteBanques;
	}

	@OrderBy("idEmail")
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taTiers", orphanRemoval=true)
	public Set<TaEmail> getTaEmails() {
		return this.taEmails;
	}

	
	public void setTaEmails(Set<TaEmail> taEmails) {
		this.taEmails = taEmails;
	}
	
//	@OrderBy("idSupportAbon")
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taTiers")
//	public Set<TaSupportAbon> getTaSupportAbons() {
//		return this.taSupportAbons;
//	}
//	
//	
//	public void setTaSupportAbons(Set<TaSupportAbon> taSupportAbons) {
//		this.taSupportAbons = taSupportAbons;
//	}

	@OrderBy("idTelephone")
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taTiers", orphanRemoval=true)
	public Set<TaTelephone> getTaTelephones() {
		return this.taTelephones;
		
	}

	public void setTaTelephones(Set<TaTelephone> taTelephones) {
		this.taTelephones = taTelephones;
	}

//	//attention au changement en eager problème de nombre de colonnes dépassant la limite
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taTiers", orphanRemoval=true)
//	public Set<TaLiens> getTaLienses() {
//		return this.taLienses;
//	}
//
//	public void setTaLienses(Set<TaLiens> taLienses) {
//		this.taLienses = taLienses;
//	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taTiers", orphanRemoval=true)
	public Set<TaWeb> getTaWebs() {
		return this.taWebs;
	}

	public void setTaWebs(Set<TaWeb> taWebs) {
		this.taWebs = taWebs;
	}
	
//	//attention au changement en eager problème de nombre de colonnes dépassant la limite
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taTiers", orphanRemoval=true)
//	public Set<TaParamCreeDocTiers> getTaParamCreeDocTierses() {
//		return this.taParamCreeDocTierses;
//	}
//
//	public void setTaParamCreeDocTierses(Set<TaParamCreeDocTiers> taParamCreeDocTierses) {
//		this.taParamCreeDocTierses = taParamCreeDocTierses;
//	}
	
	@ManyToMany(fetch = FetchType.EAGER)
	@JoinTable(name = "ta_r_famille_tiers",
			joinColumns = {@JoinColumn(name = "id_tiers")},inverseJoinColumns = {@JoinColumn(name = "id_famille")})
	public Set<TaFamilleTiers> getTaFamilleTierses() {
		return taFamilleTierses;
	}

	public void setTaFamilleTierses(Set<TaFamilleTiers> taFamilleTierses) {
		this.taFamilleTierses = taFamilleTierses;
	}

//	//attention au changement en eager problème de nombre de colonnes dépassant la limite
//	@ManyToMany(fetch = FetchType.LAZY)
//	@JoinTable(name = "ta_r_commercial",
//			joinColumns = {@JoinColumn(name = "id_tiers")},inverseJoinColumns = {@JoinColumn(name = "id_tiers_com")})
//	public Set<TaTiers> getTaCommerciaux() {
//		return taCommerciaux;
//	}
//
//	public void setTaCommerciaux(Set<TaTiers> taCommerciaux) {
//		this.taCommerciaux = taCommerciaux;
//	}
	
//	//attention au changement en eager problème de nombre de colonnes dépassant la limite
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taTiers", orphanRemoval=true)
//	public Set<TaNoteTiers> getTaNotes() {
//		return this.taNotes;
//	}
//
//	public void setTaNotes(Set<TaNoteTiers> taNotes) {
//		this.taNotes = taNotes;
//	}
	
	public void addEntreprise(TaEntreprise taEntreprise){
		this.setTaEntreprise(taEntreprise);
	}
	
	public void addAdresse(TaAdresse taAdresse){
		if(!this.getTaAdresses().contains(taAdresse))
			this.getTaAdresses().add(taAdresse);
		if(this.getTaAdresse()==null)this.setTaAdresse(taAdresse);
	}
	public void addCompteBanque(TaCompteBanque taCompteBanque){
		if(!this.getTaCompteBanques().contains(taCompteBanque))
			this.getTaCompteBanques().add(taCompteBanque);
	}
	public void addCarteBancaire(TaCarteBancaire taCarteBancaire){
		if(!this.getTaCarteBancaires().contains(taCarteBancaire))
			this.getTaCarteBancaires().add(taCarteBancaire);
	}
	public void addTelephone(TaTelephone taTelephone){
		if(!this.getTaTelephones().contains(taTelephone))
			this.getTaTelephones().add(taTelephone);
		if(this.getTaTelephone()==null)this.setTaTelephone(taTelephone);
	}
		public void removeTelephone(TaTelephone taTelephone){
		boolean estDefaut=(this.taTelephone!=null)&& this.taTelephone.getIdTelephone()==taTelephone.getIdTelephone();

		this.getTaTelephones().remove(taTelephone);
		if(estDefaut && !this.getTaTelephones().isEmpty())
			this.setTaTelephone(this.getTaTelephones().iterator().next());
		else if(this.getTaTelephones().isEmpty()){
			this.setTaTelephone(null);
		}  
		
	}
	public void removeAdresse(TaAdresse taAdresse){
		
		boolean estDefaut=(this.taAdresse!=null)&& this.taAdresse.getIdAdresse()==taAdresse.getIdAdresse();

		this.getTaAdresses().remove(taAdresse);
		if(estDefaut && !this.getTaAdresses().isEmpty())
			this.setTaAdresse(this.getTaAdresses().iterator().next());
		else if(this.getTaAdresses().isEmpty()){
			this.setTaAdresse(null);
		}
		
	}
	public void removeCompteBanque(TaCompteBanque taCompteBanque){
		this.getTaCompteBanques().remove(taCompteBanque);		
	}
	public void addEmail(TaEmail taEmail){
		if(!this.getTaEmails().contains(taEmail))
			this.getTaEmails().add(taEmail);
		if(this.getTaEmail()==null)this.setTaEmail(taEmail);
	}
	
//	public void addCommercial(TaTiers taTiers){
////		removeCommercial(taTiers);
//		if(!this.getTaCommerciaux().contains(taTiers))
//			this.getTaCommerciaux().add(taTiers);
//		if(this.getTaCommercial()==null)this.setTaCommercial(taTiers);
//	}
//	public void removeCommercial(TaTiers taTiers){
////		boolean trouve =false;
////		for (TaTiers com : this.getTaCommerciaux()) {
////			trouve=(com.getIdTiers()==taTiers.getIdTiers());
////			if(trouve)this.getTaCommerciaux().remove(com);
////		}
//		this.getTaCommerciaux().remove(taTiers);
//	}
	
	public void addFamilleTiers(TaFamilleTiers taFamilleTiers){
		if(!this.getTaFamilleTierses().contains(taFamilleTiers))
			this.getTaFamilleTierses().add(taFamilleTiers);
		if(this.getTaFamilleTiers()==null)this.setTaFamilleTiers(taFamilleTiers);		
	}
	
	public void removeFamilleTiers(TaFamilleTiers taFamilleTiers){
		boolean estDefaut=(this.taFamilleTiers!=null)&& this.taFamilleTiers.getIdFamille()==taFamilleTiers.getIdFamille();

		this.getTaFamilleTierses().remove(taFamilleTiers);
		if(estDefaut && !this.getTaFamilleTierses().isEmpty())
			this.setTaFamilleTiers(this.getTaFamilleTierses().iterator().next());
		else if(this.getTaFamilleTierses().isEmpty()){
			this.setTaFamilleTiers(null);
		}
	}

//	public void addLiens(TaLiens taLiens){
//		if(!this.getTaLienses().contains(taLiens))
//			this.getTaLienses().add(taLiens);
//	}
//	public void removeLiens(TaLiens taLiens){
//		this.getTaLienses().remove(taLiens);
//	}	

	
//	public void addSupportAbons(TaSupportAbon taSupport){
//		if(!this.getTaSupportAbons().contains(taSupport))
//			this.getTaSupportAbons().add(taSupport);
//	}
//	public void removeSupportAbons(TaSupportAbon taSupport){
//		this.getTaSupportAbons().remove(taSupport);
//	}
	
	public void removeEmail(TaEmail taEmail){
		boolean estDefaut=(this.taEmail!=null)&& this.taEmail.getIdEmail()==taEmail.getIdEmail();

		this.getTaEmails().remove(taEmail);
		if(estDefaut && !this.getTaEmails().isEmpty())
			this.setTaEmail(this.getTaEmails().iterator().next());
		else if(this.getTaEmails().isEmpty()){
			this.setTaEmail(null);
		}
	}
	
	public void addWeb(TaWeb taWeb){
		if(!this.getTaWebs().contains(taWeb))
			this.getTaWebs().add(taWeb);
		if(this.getTaWeb()==null)this.setTaWeb(taWeb);
	}
	public void removeWeb(TaWeb taWeb){
		boolean estDefaut=(this.taWeb!=null)&& this.taWeb.getIdWeb()==taWeb.getIdWeb();

		this.getTaWebs().remove(taWeb);
		if(estDefaut && !this.getTaWebs().isEmpty())
			this.setTaWeb(this.getTaWebs().iterator().next());
		else if(this.getTaWebs().isEmpty()){
			this.setTaWeb(null);
		}
		
	}
	
//	public void addNote(TaNoteTiers taNote){
//		if(!this.getTaNotes().contains(taNote))
//			this.getTaNotes().add(taNote);
//	}
//	public void removeNote(TaNoteTiers taNote){
//		this.getTaNotes().remove(taNote);
//	}
	
//	public void addParamCreeDocTiers(TaParamCreeDocTiers taParamCreeDocTiers){
//		if(!this.getTaParamCreeDocTierses().contains(taParamCreeDocTiers))
//			this.getTaParamCreeDocTierses().add(taParamCreeDocTiers);
//		taParamCreeDocTiers.setTaTiers(this);
//	}
//	public void removeParamCreeDocTiers(TaParamCreeDocTiers taParamCreeDocTiers){
//		this.getTaParamCreeDocTierses().remove(taParamCreeDocTiers);
//		taParamCreeDocTiers.setTaTiers(null);
//	}
	
	public void removeEntreprise(TaEntreprise taEntreprise){
		this.setTaEntreprise(null);
	}
	
	/**
	 * Renvoie vrai ssi le tiers possede des adresses dont le type est passe en parametre
	 * @param codeTypeAdresse
	 * @return
	 */
	public boolean aDesAdressesDuType(String codeTypeAdresse) {
		boolean trouve = false;
		for (TaAdresse taAdresse : taAdresses) {
			if(taAdresse.getTaTAdr()!=null && taAdresse.getTaTAdr().getCodeTAdr().equals(codeTypeAdresse)){
				trouve = true;
				break;
			}
		}
		return trouve;
	}

	/**
	 * Renvoie le premier telephone que possede le tiers dont le type est passe en parametre
	 * @param codeTypeTelephone
	 * @return
	 */
	public TaTelephone aDesTelephoneDuType(String codeTypeTelephone) {
		if(codeTypeTelephone == null)return null;
		for (TaTelephone taTelephone : taTelephones) {
			if(taTelephone.getTaTTel()!=null && taTelephone.getTaTTel().getCodeTTel().equals(codeTypeTelephone)){
				return taTelephone;
			}
		}
		return null;
	}

	@Transient
	@XmlTransient
	public Boolean getAccepte() {
		return accepte;
	}

	public void setAccepte(Boolean accepte) {
		this.accepte = accepte;
	}

	@Column(name = "systeme")
	public Boolean getSysteme() {
		return systeme;
	}

	public void setSysteme(Boolean systeme) {
		this.systeme = systeme;
	}
	
	/* passage ejb
	public BigDecimal soldeTiersFacture(Date fin, EntityManager em,IDocumentTiers doc) {
		TaInfoEntrepriseDAO dao = new TaInfoEntrepriseDAO();
		TaInfoEntreprise infos = dao.findInstance();
		Date deb =infos.getDatedebRegInfoEntreprise();
		if(deb==null)deb=LibDate.stringToDate2("01/01/1759");
		return soldeTiersFacture(deb,fin,em,doc);
	}
	public BigDecimal soldeTiersFacture(Date deb,Date fin, EntityManager em,IDocumentTiers doc) {
		// TODO Auto-generated method stub
		BigDecimal resultat=BigDecimal.valueOf(0);
		List<TaFacture> listeDocument=null;
		try {
			String requete ="select f from TaFacture f join f.taTiers t where t.codeTiers like ? " +
					" and f.dateDocument between cast(? as date) and cast(? as date)";
			Query ejbQuery = em.createQuery(requete);
			ejbQuery.setParameter(1, this.getCodeTiers());
			ejbQuery.setParameter(2, deb, TemporalType.DATE);
			ejbQuery.setParameter(3, fin, TemporalType.DATE);
			listeDocument=ejbQuery.getResultList();
			if(listeDocument!=null){
				for (TaFacture taDoc : listeDocument) {
					if(taDoc!=null && taDoc.getIdDocument()!=doc.getIdDocument()){
						if(taDoc.getResteAReglerComplet()!=null)
							resultat=resultat.add(taDoc.getResteAReglerComplet());	
					}
				}
			}
			return resultat;
		} catch (RuntimeException re) {
			throw re;
		}
	}
	
	public BigDecimal soldeTiersFactureReglement(Date fin, EntityManager em,IDocumentTiers doc) {
		TaInfoEntrepriseDAO dao = new TaInfoEntrepriseDAO();
		TaInfoEntreprise infos = dao.findInstance();
		Date deb =infos.getDatedebRegInfoEntreprise();
		if(deb==null)deb=LibDate.stringToDate2("01/01/1759");
		return soldeTiersFactureReglement(deb,fin,em,doc);
	}
	public BigDecimal soldeTiersFactureReglement(Date deb,Date fin, EntityManager em,IDocumentTiers doc) {
		// TODO Auto-generated method stub
		BigDecimal resultat=BigDecimal.valueOf(0);
		List<TaFacture> listeDocument=null;
		try {
			String requete ="select f from TaFacture f join f.taTiers t where t.codeTiers like ? " +
					" and f.dateDocument <= cast(? as date) and cast(? as date)";
			Query ejbQuery = em.createQuery(requete);
			ejbQuery.setParameter(1, this.getCodeTiers());
			ejbQuery.setParameter(2, deb, TemporalType.DATE);
			ejbQuery.setParameter(3, fin, TemporalType.DATE);
			listeDocument=ejbQuery.getResultList();
			if(listeDocument!=null){
				for (TaFacture taDoc : listeDocument) {
					if(taDoc!=null && taDoc.getIdDocument()==doc.getIdDocument()){
						if(taDoc.getResteAReglerComplet()!=null && taDoc.getResteAReglerEcran()!=null)
							resultat=resultat.add(taDoc.getResteAReglerEcran().
									subtract(taDoc.getResteAReglerComplet()));
					}
				}
			}
			return resultat;
		} catch (RuntimeException re) {
			throw re;
		}
	}
	
	public BigDecimal soldeTiersReglement( Date fin, EntityManager em) {
		TaInfoEntrepriseDAO dao = new TaInfoEntrepriseDAO();
		TaInfoEntreprise infos = dao.findInstance();
		Date deb =infos.getDatedebRegInfoEntreprise();
		if(deb==null)deb=LibDate.stringToDate2("01/01/1759");
		return soldeTiersReglement(deb,fin,em);
	}
	public BigDecimal soldeTiersReglement( Date deb,Date fin, EntityManager em) {
		// TODO Auto-generated method stub
		BigDecimal resultat=BigDecimal.valueOf(0);
		List<TaReglement> listeDocument=null;
		try {
			String requete ="select f from TaReglement f join f.taTiers t where t.codeTiers like ? "+
					" and f.dateDocument <= cast(? as date) and cast(? as date)";
			Query ejbQuery = em.createQuery(requete);
			ejbQuery.setParameter(1, this.getCodeTiers());
			ejbQuery.setParameter(2, deb, TemporalType.DATE);
			ejbQuery.setParameter(3, fin, TemporalType.DATE);
			listeDocument=ejbQuery.getResultList();
			if(listeDocument!=null){
				for (TaReglement taDoc : listeDocument) {
					if(taDoc!=null ){
					    if(taDoc.calculAffectationTotale()!=null)
					    	resultat=resultat.add(taDoc.getNetTtcCalc().subtract(taDoc.calculAffectationTotale()));
					}	
				}
			}
			return resultat;
		} catch (RuntimeException re) {
			throw re;
		}
	}
	
	public BigDecimal soldeTiersAvoir( Date fin, EntityManager em) {
		TaInfoEntrepriseDAO dao = new TaInfoEntrepriseDAO();
		TaInfoEntreprise infos = dao.findInstance();
		Date deb =infos.getDatedebRegInfoEntreprise();
		if(deb==null)deb=LibDate.stringToDate2("01/01/1759");
		return soldeTiersAvoir(deb,fin,em);
	}
	public BigDecimal soldeTiersAvoir(Date deb, Date fin, EntityManager em) {
		// TODO Auto-generated method stub
		BigDecimal resultat=BigDecimal.valueOf(0);
		List<TaAvoir> listeDocument=null;
		try {
			String requete ="select f from TaAvoir f join f.taTiers t where t.codeTiers like ? " +
					" and f.dateDocument <= cast(? as date) and cast(? as date)";
			Query ejbQuery = em.createQuery(requete);
			ejbQuery.setParameter(1, this.getCodeTiers());
			ejbQuery.setParameter(2, deb, TemporalType.DATE);
			ejbQuery.setParameter(3, fin, TemporalType.DATE);
			listeDocument=ejbQuery.getResultList();
			if(listeDocument!=null){
				for (TaAvoir taDoc : listeDocument) {
					resultat=resultat.add(taDoc.getResteAReglerComplet());	
				}
			}
			return resultat;
		} catch (RuntimeException re) {
			throw re;
		}
	}
	
	public BigDecimal soldeTiersAcompte( Date fin, EntityManager em) {
		TaInfoEntrepriseDAO dao = new TaInfoEntrepriseDAO();
		TaInfoEntreprise infos = dao.findInstance();
		Date deb =infos.getDatedebRegInfoEntreprise();
		if(deb==null)deb=LibDate.stringToDate2("01/01/1759");
		return soldeTiersAcompte(deb,fin,em);
	}
	public BigDecimal soldeTiersAcompte(Date deb, Date fin, EntityManager em) {
		// TODO Auto-generated method stub
		BigDecimal resultat=BigDecimal.valueOf(0);
		List<TaAcompte> listeDocument=null;
		try {
			String requete ="select f from TaAcompte f join f.taTiers t where t.codeTiers like ? " +
					" and f.dateDocument <= cast(? as date) and cast(? as date)";
			Query ejbQuery = em.createQuery(requete);
			ejbQuery.setParameter(1, this.getCodeTiers());
			ejbQuery.setParameter(2, deb, TemporalType.DATE);
			ejbQuery.setParameter(3, fin, TemporalType.DATE);
			listeDocument=ejbQuery.getResultList();
			if(listeDocument!=null){
				for (TaAcompte taDoc : listeDocument) {
					resultat=resultat.add(taDoc.calculResteARegler());	
				}
			}
			return resultat;
		} catch (RuntimeException re) {
			throw re;
		}
	}
	*/
	
	public List<String> findNumeroFax() {
		return findNumeroFax("FAX");
	}
	
	public List<String> findNumeroFax(String codeTypeFAX) {
		List<String> liste = new ArrayList<String>();
		for (TaTelephone tel : taTelephones) {
			if(tel.getTaTTel()!=null && tel.getTaTTel().getCodeTTel().equals(codeTypeFAX)) {
				liste.add(tel.getNumeroTelephone());
			}
		}
		return liste;
	}

	@PostRemove
	public void afterDelete()throws Exception{

	}


	@PrePersist
	@PreUpdate
	public void beforePost ()throws Exception{
		this.setCodeTiers(codeTiers.toUpperCase());
		this.setCodeCompta(codeCompta.toUpperCase());
		//this.setNomTiers(nomTiers.toUpperCase());
	}




	/**
	 * Creation d'un objet "TaCompl" pour l'objet "TaTiers" gerer par cet ecran
	 * dans le cas ou la propriete taCompl de ce dernier est nulle.
	 */
	public void initComplTiers(Object value) {
		if(this.getTaCompl()==null&& (value!=null&&!value.equals(""))) {
			//initialisation du complement
			TaCompl p = new TaCompl();
			//p.getTaTierses().add(this);
			this.setTaCompl(p);
		}else if(this.getTaCompl()!=null && (value==null||value.equals(""))) {
			if(this.getTaCompl().getSiretCompl() == null && this.getTaCompl().getAccise() == null
					&& this.getTaCompl().getTvaIComCompl() == null) {
				this.setTaCompl(null);
			}			
		}
	}
	
	public void initCodeTTiers(Object value) {
		if(this.getTaTTiers()==null&& (value!=null&&!value.equals(""))) {
			//initialisation du type tiers
			TaTTiers p = new TaTTiers();
			//p.getTaTierses().add(taTiers); //ejb
			this.setTaTTiers(p);
		}else if(this.getTaTTiers()!=null&& (value==null||value.equals(""))) {
			this.setTaTTiers(null);
		}
	}

	public void initEntrepriseTiers(Object value) {
		if(this.getTaEntreprise()==null&& (value!=null&&!value.equals(""))) {
			//initialisation de l'entreprise
			TaEntreprise p = new TaEntreprise();
//			p.getTaTierses().add(this);
			this.setTaEntreprise(p);
		}else if(this.getTaEntreprise()!=null&& (value==null||value.equals(""))) {
			this.setTaEntreprise(null);
		}
	}
	public void initTelephoneTiers(Object value, boolean correspAdmin,boolean correspCom) {
		initTelephoneTiers(value, true, correspAdmin,correspCom);
	}

	public void initTelephoneTiers(Object value, boolean telephoneEstRempli, boolean correspAdmin,boolean correspCom) {
		if(this.getTaTelephone()==null&& (telephoneEstRempli ||(value!=null&&!value.equals("")))) {
			//initialisation du telephone
			TaTelephone p = new TaTelephone();
			//valeur par défaut pour les booleens qui ne peuvent pas être initialisé pendant la validation de l'ihm car non affiché 
			if(correspAdmin) {
				p.setCommAdministratifTelephone(1);
			} else {
				p.setCommAdministratifTelephone(0);
			}
			
			if(correspCom) {
				p.setCommCommercialTelephone(1);
			} else {
				p.setCommCommercialTelephone(0);
			}
			p.setTaTiers(this);
			this.setTaTelephone(p);
			this.addTelephone(p);
		}else if(this.getTaTelephone()!=null&& (value==null||value.equals(""))) {
			this.removeTelephone(this.getTaTelephone());
			this.setTaTelephone(null);
		}
	}

	public void initAdresseTiers(Object value,boolean adresseEstRempli,boolean correspAdmin,boolean correspCom) {
		if(this.getTaAdresse()==null && (adresseEstRempli || (value!=null && !value.equals("")))) {
			//initialisation de l'adresse
			TaAdresse p = new TaAdresse();
//			p.setPaysAdresse("");
//			p.setVilleAdresse("");
//			p.setCodepostalAdresse("");
			if(correspAdmin) {
				p.setCommAdministratifAdresse(1);
			} else {
				p.setCommAdministratifAdresse(0);
			}
			
			if(correspCom) {
				p.setCommCommercialAdresse(1);
			} else {
				p.setCommCommercialAdresse(0);
			}
			p.setTaTiers(this);
			this.setTaAdresse(p);
			this.addAdresse(p);
		}else if(this.getTaAdresse()!=null && !adresseEstRempli) {
//			this.getTaAdresse().setTaTiers(null);
			this.removeAdresse(this.getTaAdresse());
			this.setTaAdresse(null);
		}
	}

	public void initCommentaireTiers(Object value) {
		if(this.getTaCommentaire()==null&& (value!=null&&!value.equals(""))) {
			//initialisation du commentaire
			TaCommentaire p = new TaCommentaire();
			p.getTaTierses().add(this);
			this.setTaCommentaire(p);
		}else if(this.getTaCommentaire()!=null&& (value==null||value.equals(""))) {
			this.setTaCommentaire(null);
		}
	}



	public void initEmailTiers(Object value,boolean correspTelAdmin,boolean correspTelCom) {
		if(this.getTaEmail()==null&& (value!=null&&!value.equals(""))) {
			//initialisation de l'email
			TaEmail p = new TaEmail();
			//valeur par défaut pour les booleens qui ne peuvent pas être initialisé pendant la validation de l'ihm car non affiché 
			if(correspTelAdmin) {
				p.setCommAdministratifEmail(1);
			} else {
				p.setCommAdministratifEmail(0);
			}
			
			if(correspTelCom) {
				p.setCommCommercialEmail(1);
			} else {
				p.setCommCommercialEmail(0);
			}
			p.setTaTiers(this);
			this.setTaEmail(p);
			this.addEmail(p);
		}else if(this.getTaEmail()!=null&& (value==null||value.equals(""))) {
			this.removeEmail(this.getTaEmail());
			this.setTaEmail(null);
		}
	}

	public void initWebTiers(Object value) {
		if(this.getTaWeb()==null&& (value!=null&&!value.equals(""))) {
			//initialisation de l'adresse web
			TaWeb p = new TaWeb();
			p.setTaTiers(this);
			this.setTaWeb(p);
			this.addWeb(p);
		}else if(this.getTaWeb()!=null&& (value==null||value.equals(""))) {
			this.removeWeb(this.getTaWeb());
			this.setTaWeb(null);
		}
	}



	public boolean equalsCode(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TaTiers other = (TaTiers) obj;
		if (codeTiers == null) {
			if (other.codeTiers != null)
				return false;
		} else if (!codeTiers.equals(other.codeTiers))
			return false;
		if (versionObj == null) {
			if (other.versionObj != null)
				return false;
		} else if (!versionObj.equals(other.versionObj))
			return false;
		return true;
	}

	@Column(name = "utilise_compte_client")
	public Boolean getUtiliseCompteClient() {
		return utiliseCompteClient;
	}

	public void setUtiliseCompteClient(Boolean utiliseCompteClient) {
		this.utiliseCompteClient = utiliseCompteClient;
	}

	@Column(name = "logo")
	public byte[] getBlobLogo() {
		return blobLogo;
	}

	public void setBlobLogo(byte[] blobLogo) {
		this.blobLogo = blobLogo;
	}

	@Column(name = "email_cle_compte_client_envoye")
	public Boolean getEmailCleCompteClientEnvoye() {
		return emailCleCompteClientEnvoye;
	}

	public void setEmailCleCompteClientEnvoye(Boolean emailCleCompteClientEnvoye) {
		this.emailCleCompteClientEnvoye = emailCleCompteClientEnvoye;
	}

	@Column(name = "cle_liaison_compte_client")
	public String getCleLiaisonCompteClient() {
		return cleLiaisonCompteClient;
	}

	public void setCleLiaisonCompteClient(String cleLiaisonCompteClient) {
		this.cleLiaisonCompteClient = cleLiaisonCompteClient;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_derniere_connexion_compte_client", length = 19)
	public Date getDateDerniereConnexionCompteClient() {
		return dateDerniereConnexionCompteClient;
	}

	public void setDateDerniereConnexionCompteClient(Date dateDerniereConnexionCompteClient) {
		this.dateDerniereConnexionCompteClient = dateDerniereConnexionCompteClient;
	}

	//attention au changement en eager problème de nombre de colonnes dépassant la limite
	@ManyToOne(fetch = FetchType.LAZY,  cascade = CascadeType.ALL)
	@JoinColumn(name = "id_contact")
	public TaTiers getTaContact() {
		return taContact;
	}

	public void setTaContact(TaTiers taContact) {
		this.taContact = taContact;
	}

	@Column(name = "contact")
	public Boolean getContact() {
		return contact;
	}

	public void setContact(Boolean contact) {
		this.contact = contact;
	}

	@ManyToMany(fetch = FetchType.LAZY)
	@JoinTable(name = "ta_r_contact",
			joinColumns = {@JoinColumn(name = "id_tiers")},inverseJoinColumns = {@JoinColumn(name = "id_tiers_contact")})
	public Set<TaTiers> getTaConctacts() {
		return taConctacts;
	}

	public void setTaConctacts(Set<TaTiers> taConctacts) {
		this.taConctacts = taConctacts;
	}

	@Column(name = "ma_ref_tiers")
	public String getMaRefTiers() {
		return maRefTiers;
	}

	public void setMaRefTiers(String maRefTiers) {
		this.maRefTiers = maRefTiers;
	}


	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taTiers", orphanRemoval=true)
	public Set<TaCarteBancaire> getTaCarteBancaires() {
		return taCarteBancaires;
	}

	public void setTaCarteBancaires(Set<TaCarteBancaire> taCarteBancaires) {
		this.taCarteBancaires = taCarteBancaires;
	}
	
	
	
	
	@Column(name = "importation_divers")
	public String getImportationDivers() {
		return importationDivers;
	}

	public void setImportationDivers(String importationDivers) {
		this.importationDivers = importationDivers;
	}
	
	
	@Override
	public Object clone() throws CloneNotSupportedException {
		TaTiers objet = new TaTiers();
		try {
			objet.setActifTiers(actifTiers);
			objet.setBlobLogo(blobLogo);
			objet.setCleLiaisonCompteClient(cleLiaisonCompteClient);
//			objet.setCodeCompta(codeCompta);
//			objet.setCodeTiers(codeTiers);
			objet.setCompte(cleLiaisonCompteClient);
			objet.setContact(contact);
			objet.setDateAnniv(dateAnniv);
			objet.setDateDerniereConnexionCompteClient(dateDerniereConnexionCompteClient);
//			objet.setEmailCleCompteClientEnvoye(emailCleCompteClientEnvoye);
			objet.setMaRefTiers(maRefTiers);
			objet.setNomTiers(nomTiers);
//			objet.setOrigineImport(origineImport);
			objet.setPrenomTiers(prenomTiers);
			objet.setSurnomTiers(surnomTiers);
			objet.setSysteme(systeme);
			objet.setTtcTiers(ttcTiers);
//			objet.setUtiliseCompteClient(utiliseCompteClient);
			

			objet.setTaCommercial(taCommercial);
			objet.setTaCPaiement(taCPaiement);
			objet.setTaTCivilite(taTCivilite);
			objet.setTaTEntite(taTEntite);
			objet.setTaTPaiement(taTPaiement);
			objet.setTaTTarif(taTTarif);
			objet.setTaTTiers(taTTiers);
			objet.setTaTTvaDoc(taTTvaDoc);
			objet.setTaFamilleTiers(taFamilleTiers);

			
			
			for (TaAdresse o : taAdresses) {
				TaAdresse nouv = (TaAdresse)o.clone();
				nouv.setTaTiers(objet);
				objet.addAdresse(nouv);
				if(o.equals(taAdresse))objet.setTaAdresse(nouv);
			}
			
			if(taCommentaire!=null)objet.setTaCommentaire((TaCommentaire)taCommentaire.clone());			
			if(taEntreprise!=null)objet.setTaEntreprise((TaEntreprise)taEntreprise.clone());			
			if(taInfoJuridique!=null)objet.setTaInfoJuridique((TaInfoJuridique)taInfoJuridique.clone());
			if(taCompl!=null)objet.setTaCompl((TaCompl)taCompl.clone());

			
			for (TaCompteBanque o : taCompteBanques) {
				TaCompteBanque nouv=(TaCompteBanque) o.clone();
				nouv.setTaTiers(objet);
				objet.addCompteBanque(nouv);
			}
			for (TaTiers b : taConctacts) {
				objet.getTaConctacts().add(b);
				if(b.equals(taContact))objet.setTaContact(b);
			}
			
			for (TaEmail o : taEmails) {
				TaEmail nouv = (TaEmail)o.clone();
				nouv.setTaTiers(objet);
				objet.addEmail(nouv);
				if(o.equals(taEmail))objet.setTaEmail(nouv);
			}
			
			
			for (TaFamilleTiers o : taFamilleTierses) {
				objet.addFamilleTiers(o);
				if(o.equals(taFamilleTiers))objet.setTaFamilleTiers(o);
			}
			

			for (TaTelephone o : taTelephones) {
				TaTelephone nouv = (TaTelephone)o.clone();
				nouv.setTaTiers(objet);
				objet.addTelephone(nouv);
				if(o.equals(taTelephone))objet.setTaTelephone(nouv);
			}
			
			
			for (TaWeb o : taWebs) {
				TaWeb nouv = (TaWeb)o.clone();
				nouv.setTaTiers(objet);
				objet.addWeb(nouv);
				if(o.equals(taWeb))objet.setTaWeb(nouv);
			}

		} catch (Exception e) {
			logger.error("", e);
		}
		// on renvoie le clone
		return objet;
	}
}
