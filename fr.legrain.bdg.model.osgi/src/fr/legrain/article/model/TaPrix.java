package fr.legrain.article.model;

// Generated Sep 1, 2008 3:06:27 PM by Hibernate Tools 3.2.0.CR1

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.Date;
import java.util.HashSet;
import java.util.Iterator;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.Version;
import javax.xml.bind.annotation.XmlElement;

import org.apache.commons.beanutils.PropertyUtils;
import org.apache.log4j.Logger;
import org.eclipse.persistence.oxm.annotations.XmlInverseReference;

import fr.legrain.general.model.TaObjetLgr;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.lib.data.LibChaine;
import fr.legrain.tiers.model.TaRPrix;
import fr.legrain.tiers.model.TaRPrixTiers;
import fr.legrain.tiers.model.TaTTarif;
import fr.legrain.tiers.model.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;


/**
 * TaPrix generated by hbm2java
 */
@Entity
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "ta_prix")
//@SequenceGenerator(name = "gen_prix", sequenceName = "num_id_prix", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaPrix.QN.FIND_BY_IMPORT, query="select a from TaPrix a where a.origineImport = :origineImport and a.idImport = :idImport")
		})
public class TaPrix extends TaObjetLgr   implements java.io.Serializable {
	
	private static final long serialVersionUID = -4514135793303396888L;

	public static class QN {
		public static final String FIND_BY_IMPORT = "TaPrix.findByImport";
	}

	@Transient
	static Logger logger = Logger.getLogger(TaPrix.class.getName());
	
	private int idPrix;
//	private String version;
//	private TaUnite taUnite;
	private TaArticle taArticle;
	private BigDecimal prixPrix;
	private BigDecimal prixttcPrix;
	private String idImport;
	private String origineImport;
//	private String quiCree;
//	private Date quandCree;
//	private String quiModif;
//	private Date quandModif;
//	private String ipAcces;
//	private Set<TaTiers> taTiers = new HashSet<TaTiers>(0);
//	private Set<TaTTarif> taTTarifs = new HashSet<TaTTarif>(0);
	private Set<TaRPrix> taRPrixes = new HashSet<TaRPrix>(0);
	private Set<TaRPrixTiers> taRPrixesTiers = new HashSet<TaRPrixTiers>(0);
//	private Set<TaRefPrix> taRefPrixes = new HashSet<TaRefPrix>(0);
	private Boolean idRefPrix=true;
	private Integer versionObj;
	
	@Transient
	public Boolean getIdRefPrix() {
//		return taArticle.getTaPrix()==this;
		if(taArticle!=null && taArticle.getTaPrix()!=null)
		  return taArticle.getTaPrix().equals(this);
		else return false;
//		return idRefPrix;
	}

	public void setIdRefPrix(Boolean idRefPrix) {

		this.idRefPrix = idRefPrix;
		if(taArticle!=null) {
			if(idRefPrix) {
				taArticle.setTaPrix(this);
			} else {
				//selection d'un prix d'un prix de reference "par defaut"
				//le premier de la liste, qui n'est pas relie Ã  un tiers ou un type tarif
				initPrixRefDefaut();
			}
		}
	}
	
	private void initPrixRefDefaut() {
		if(!taArticle.getTaPrixes().isEmpty()) {
			boolean trouve = false;
			TaPrix prixCourant = null;
			Iterator<TaPrix> ite = taArticle.getTaPrixes().iterator();
			while(!trouve && ite.hasNext()) {
				prixCourant = ite.next();
				if(prixCourant.getTaRPrixesTiers().isEmpty()) {
					trouve = true;
				}
			}
			if(trouve) {
				taArticle.setTaPrix(prixCourant);
			}
			
		}
	}

	public TaPrix() {
	}

	public TaPrix(BigDecimal prixPrix, BigDecimal prixttcPrix) {
		this.prixPrix = prixPrix;
		this.prixttcPrix = prixttcPrix;
	}

	public TaPrix(int idPrix) {
		this.idPrix = idPrix;
	}

	public TaPrix(int idPrix, TaUnite taUnite, TaArticle taArticle,
			BigDecimal prixPrix, BigDecimal prixttcPrix, String quiCreePrix,
			Date quandCreePrix, String quiModifPrix, Date quandModifPrix,
			String ipAcces
			, Set<TaRefPrix> taRefPrixes
			) {
		this.idPrix = idPrix;
//		this.taUnite = taUnite;
		this.taArticle = taArticle;
		this.prixPrix = prixPrix;
		this.prixttcPrix = prixttcPrix;
		this.quiCree = quiCreePrix;
		this.quandCree = quandCreePrix;
		this.quiModif = quiModifPrix;
		this.quandModif = quandModifPrix;
		this.ipAcces = ipAcces;
		//this.taRefPrixes = taRefPrixes;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id_prix", unique = true, nullable = false)
	@LgrHibernateValidated(champBd = "id_prix",table = "ta_prix", champEntite="idPrix", clazz = TaPrix.class)
	public int getIdPrix() {
		return this.idPrix;
	}

	public void setIdPrix(int idPrix) {
		this.idPrix = idPrix;
	}

//	//@Version
//	@Column(name = "version", length = 20)
//	public String getVersion() {
//		return this.version;
//	}
//
//	public void setVersion(String version) {
//		this.version = version;
//	}
	
	@Version
	@Column(name = "version_obj", precision = 15)
	public Integer getVersionObj() {
		return this.versionObj;
	}

	public void setVersionObj(Integer versionObj) {
		this.versionObj = versionObj;
	}

//	@ManyToOne(fetch = FetchType.EAGER)
//	@JoinColumn(name = "id_unite")
//	@LgrHibernateValidated(champBd = "id_unite",table = "ta_prix", champEntite="taUnite.idUnite", clazz = TaPrix.class)
//	public TaUnite getTaUnite() {
//		return this.taUnite;
//	}
//
//	public void setTaUnite(TaUnite taUnite) {
//		this.taUnite = taUnite;
//	}

	@ManyToOne(fetch = FetchType.EAGER,cascade = {CascadeType.PERSIST, CascadeType.MERGE})
	@JoinColumn(name = "id_article")
	@LgrHibernateValidated(champBd = "id_article",table = "ta_prix", champEntite="taArticle.idArticle", clazz = TaPrix.class)
	@XmlElement
	@XmlInverseReference(mappedBy="taPrixes")
	public TaArticle getTaArticle() {
		return this.taArticle;
	}

	public void setTaArticle(TaArticle taArticle) {
		this.taArticle = taArticle;
	}

	@Column(name = "prix_prix", precision = 15)
	@LgrHibernateValidated(champBd = "prix_prix",table = "ta_prix", champEntite="prixPrix", clazz = TaPrix.class)
	public BigDecimal getPrixPrix() {
		return this.prixPrix;
	}

	public void setPrixPrix(BigDecimal prixPrix) {
		this.prixPrix = prixPrix;
	}

	@Column(name = "prixttc_prix", precision = 15)
	@LgrHibernateValidated(champBd = "prixttc_prix",table = "ta_prix", champEntite="prixttcPrix", clazz = TaPrix.class)
	public BigDecimal getPrixttcPrix() {
		return this.prixttcPrix;
	}

	public void setPrixttcPrix(BigDecimal prixttcPrix) {
		this.prixttcPrix = prixttcPrix;
	}
	
	@Column(name = "origine_import", length = 100)
	@LgrHibernateValidated(champBd = "origine_import",table = "ta_prix", champEntite="origineImport", clazz = TaPrix.class)
	public String getOrigineImport() {
		return this.origineImport;
	}

	public void setOrigineImport(String origineImport) {
		this.origineImport = origineImport;
	}
	
	@Column(name = "id_import", length = 100)
	@LgrHibernateValidated(champBd = "id_import",table = "ta_prix", champEntite="idImport", clazz = TaPrix.class)
	public String getIdImport() {
		return this.idImport;
	}

	public void setIdImport(String idImport) {
		this.idImport = idImport;
	}
	
//	@ManyToMany(fetch = FetchType.EAGER)
//	@JoinTable(name = "ta_r_prix",
//			joinColumns = {@JoinColumn(name = "id_prix")},inverseJoinColumns = {@JoinColumn(name = "id_tiers")})
//	public Set<TaTiers> getTaTiers() {
//		return taTiers;
//	}
//
//	public void setTaTiers(Set<TaTiers> taTiers) {
//		this.taTiers = taTiers;
//	}
	
//	@ManyToMany(fetch = FetchType.EAGER)
//	@JoinTable(name = "ta_r_prix",
//			joinColumns = {@JoinColumn(name = "id_prix")},inverseJoinColumns = {@JoinColumn(name = "id_t_tarif")})
//	public Set<TaTTarif> getTaTTarif() {
//		return taTTarifs;
//	}
//
//	public void setTaTTarif(Set<TaTTarif> taTTarifs) {
//		this.taTTarifs = taTTarifs;
//	}

//	@Column(name = "qui_cree", length = 50)
//	public String getQuiCree() {
//		return this.quiCree;
//	}
//
//	public void setQuiCree(String quiCreePrix) {
//		this.quiCree = quiCreePrix;
//	}
//
//	@Temporal(TemporalType.TIMESTAMP)
//	@Column(name = "quand_cree", length = 19)
//	public Date getQuandCree() {
//		return this.quandCree;
//	}
//
//	public void setQuandCree(Date quandCreePrix) {
//		this.quandCree = quandCreePrix;
//	}
//
//	@Column(name = "qui_modif", length = 50)
//	public String getQuiModif() {
//		return this.quiModif;
//	}
//
//	public void setQuiModif(String quiModifPrix) {
//		this.quiModif = quiModifPrix;
//	}
//
//	@Temporal(TemporalType.TIMESTAMP)
//	@Column(name = "quand_modif", length = 19)
//	public Date getQuandModif() {
//		return this.quandModif;
//	}
//
//	public void setQuandModif(Date quandModifPrix) {
//		this.quandModif = quandModifPrix;
//	}
//
//	@Column(name = "ip_acces", length = 50)
//	public String getIpAcces() {
//		return this.ipAcces;
//	}
//
//	public void setIpAcces(String ipAcces) {
//		this.ipAcces = ipAcces;
//	}

//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taPrix")
//	public Set<TaRefPrix> getTaRefPrixes() {
//		return this.taRefPrixes;
//	}
//
//	public void setTaRefPrixes(Set<TaRefPrix> taRefPrixes) {
//		this.taRefPrixes = taRefPrixes;
//	}
//
	
//	public void addTaTiers(TaTiers taTiers){
//		if(!this.getTaTiers().contains(taTiers)) {
//			this.getTaTiers().add(taTiers);
//			if(getIdRefPrix()) {
//				setIdRefPrix(false);
//			}
//		}
//	}
//	public void removeTaTiers(TaTiers taTiers){
//		this.getTaTiers().remove(taTiers);
//	}
	
//	public void addTaTTarif(TaTTarif taTTarif){
//		if(!this.getTaTTarif().contains(taTTarif)) {
//			this.getTaTTarif().add(taTTarif);
//			if(getIdRefPrix()) {
//				setIdRefPrix(false);
//			}
//		}
//	}
//	public void removeTaTTarif(TaTTarif taTTarif){
//		this.getTaTTarif().remove(taTTarif);
//	}
	public void addTaRPrix(TaRPrix taRPrix){
		if(!this.getTaRPrixes().contains(taRPrix)) {
			this.getTaRPrixes().add(taRPrix);
//			if(getIdRefPrix()) {
//				setIdRefPrix(false);
//			}
		}
	}
	public void removeTaRPrix(TaRPrix taRPrix){
		this.getTaRPrixes().remove(taRPrix);
	}
	
	public void addTaRPrixTiers(TaRPrixTiers taRPrix){
		if(!this.getTaRPrixesTiers().contains(taRPrix)) {
			this.getTaRPrixesTiers().add(taRPrix);
//			if(getIdRefPrix()) {
//				setIdRefPrix(false);
//			}
		}
	}
	public void removeTaRPrixTiers(TaRPrixTiers taRPrix){
		this.getTaRPrixesTiers().remove(taRPrix);
	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + idPrix;
		result = prime * result
				+ ((idRefPrix == null) ? 0 : idRefPrix.hashCode());
		result = prime * result + ((ipAcces == null) ? 0 : ipAcces.hashCode());
		result = prime * result
				+ ((prixPrix == null) ? 0 : prixPrix.hashCode());
		result = prime * result
				+ ((prixttcPrix == null) ? 0 : prixttcPrix.hashCode());
//		result = prime * result + ((taUnite == null) ? 0 : taUnite.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		final TaPrix other = (TaPrix) obj;
		if (idPrix != other.idPrix)
			return false;
		if (idRefPrix == null) {
			if (other.idRefPrix != null)
				return false;
		} else if (!idRefPrix.equals(other.idRefPrix))
			return false;
		if (ipAcces == null) {
			if (other.ipAcces != null)
				return false;
		} else if (!ipAcces.equals(other.ipAcces))
			return false;
		if (prixPrix == null) {
			if (other.prixPrix != null)
				return false;
		} else if (!prixPrix.equals(other.prixPrix))
			return false;
		if (prixttcPrix == null) {
			if (other.prixttcPrix != null)
				return false;
		} else if (!prixttcPrix.equals(other.prixttcPrix))
			return false;
//		if (taUnite == null) {
//			if (other.taUnite != null)
//				return false;
//		} else if (!taUnite.equals(other.taUnite))
//			return false;
		return true;
	}

	
	@Override
	public Object clone() throws CloneNotSupportedException {
		TaPrix objet = new TaPrix();
		try {
			objet.setPrixPrix(prixPrix);
			objet.setPrixttcPrix(prixttcPrix);
			objet.setTaArticle(taArticle);
//			objet.setTaUnite(taUnite);
		} catch (Exception e) {
			logger.error("", e);
		}
		// on renvoie le clone
		return objet;
	}

	public void majPrix() throws ExceptLgr {	
		try {
			
				if(!this.getPrixPrix().equals("")){
					if(this.getTaArticle().getTaTva()!=null){
						BigDecimal taux=this.getTaArticle().getTaTva().getTauxTva().
						divide(new BigDecimal(100));
						BigDecimal	tva =this.getPrixPrix().multiply(taux);
						this.setPrixttcPrix(this.getPrixPrix().add(tva).setScale(6,BigDecimal.ROUND_HALF_UP));
						//affecte(Const.C_PRIXTTC_PRIX,LibCalcul.calculStringString(valeurChamps.getValeur(),tva,LibCalcul.C_ADDITIONNER,false));
					}
					else this.setPrixttcPrix(this.getPrixPrix());
				}								
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public void majPrixTTC() throws ExceptLgr {	
		try {

				if(!this.getPrixttcPrix().equals("")){
					BigDecimal ht=null;
					BigDecimal n1,n2;
					if (this.getTaArticle().getTaTva()!=null && !LibChaine.emptyNumeric(this.getTaArticle().getTaTva().getTauxTva())){
						n1=this.getPrixttcPrix().multiply(new BigDecimal(100));
						n2=BigDecimal.valueOf(100).add(this.getTaArticle().getTaTva().getTauxTva());
						ht=n1.divide(n2,MathContext.DECIMAL128).setScale(6,BigDecimal.ROUND_HALF_UP);
					}else {
						if(this.getPrixttcPrix()!=null)
							ht =this.getPrixttcPrix().setScale(6,BigDecimal.ROUND_HALF_UP);
					}
					this.setPrixPrix(ht);
				}					
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	
	public void majPrix(BigDecimal taux) throws ExceptLgr {	
		try {
			
				if(!this.getPrixPrix().equals("")){
					if(taux!=null){
						BigDecimal tauxFinal=taux.divide(new BigDecimal(100));
						BigDecimal	tva =this.getPrixPrix().multiply(tauxFinal);
						this.setPrixttcPrix(this.getPrixPrix().add(tva).setScale(6,BigDecimal.ROUND_HALF_UP));
					}
					else this.setPrixttcPrix(this.getPrixPrix());
				}								
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	public void majPrixTTC(BigDecimal taux) throws ExceptLgr {	
		try {

				if(!this.getPrixttcPrix().equals("")){
					BigDecimal ht=null;
					BigDecimal n1,n2;
					if (taux!=null && !LibChaine.emptyNumeric(taux)){
						n1=this.getPrixttcPrix().multiply(new BigDecimal(100));
						n2=BigDecimal.valueOf(100).add(taux);
						ht=n1.divide(n2,MathContext.DECIMAL128).setScale(6,BigDecimal.ROUND_HALF_UP);
					}else {
						if(this.getPrixttcPrix()!=null)
							ht =this.getPrixttcPrix().setScale(6,BigDecimal.ROUND_HALF_UP);
					}
					this.setPrixPrix(ht);
				}					
			
		} catch (Exception e) {
			// TODO: handle exception
		}
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taPrix", orphanRemoval=true)
	public Set<TaRPrix> getTaRPrixes() {
		return taRPrixes;
	}

	public void setTaRPrixes(Set<TaRPrix> taRPrix) {
		this.taRPrixes = taRPrix;
	}


	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taPrix", orphanRemoval=true)
	public Set<TaRPrixTiers> getTaRPrixesTiers() {
		return taRPrixesTiers;
	}

	public void setTaRPrixesTiers(Set<TaRPrixTiers> taRPrixesTiers) {
		this.taRPrixesTiers = taRPrixesTiers;
	}

}
