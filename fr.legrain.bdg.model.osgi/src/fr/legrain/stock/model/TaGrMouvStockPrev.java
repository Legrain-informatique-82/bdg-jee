package fr.legrain.stock.model;

// Generated 4 juin 2009 10:11:38 by Hibernate Tools 3.2.4.GA

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Version;
import javax.validation.Valid;

import fr.legrain.article.model.TaFabrication;
import fr.legrain.article.model.TaTypeMouvement;
import fr.legrain.document.model.TaAvisEcheance;
import fr.legrain.document.model.TaBoncde;
import fr.legrain.document.model.TaBoncdeAchat;
import fr.legrain.document.model.TaDevis;
import fr.legrain.document.model.TaEtat;
import fr.legrain.document.model.TaProforma;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaStockPrev generated by hbm2java
 */
@Entity
@Table(name = "ta_gr_mouv_stock_prev")
@NamedQueries(value = { 

		@NamedQuery(name=TaGrMouvStockPrev.QN.FIND_ALL_LIGHT, query="select new fr.legrain.stock.dto.GrMouvStockDTO(a.id,  a.codeGrMouvStock,a.dateGrMouvStock, a.libelleGrMouvStock, t.code) from TaGrMouvStockPrev a join a.taTypeMouvStock t order by a.dateGrMouvStock DESC,  a.codeGrMouvStock DESC"),
		@NamedQuery(name=TaGrMouvStockPrev.QN.FIND_BY_CODE_LIGHT, query="select new fr.legrain.stock.dto.GrMouvStockDTO(a.id,  a.codeGrMouvStock,a.dateGrMouvStock, a.libelleGrMouvStock, t.code) from TaGrMouvStockPrev a join a.taTypeMouvStock t where a.codeGrMouvStock like :codeGrMouvStock order by a.codeGrMouvStock")
		
		
})
public class TaGrMouvStockPrev implements java.io.Serializable {

	private static final long serialVersionUID = -6491847754955008529L;
	public static class QN {
		public static final String FIND_ALL_LIGHT = "TaGrMouvStockPrev.findAllLight";
		public static final String FIND_BY_CODE_LIGHT = "TaGrMouvStockPrev.findByCodeLight";
	}
	
	private int idGrMouvStock;
	private String codeGrMouvStock;
	private Date dateGrMouvStock;
	private String libelleGrMouvStock;
	private TaEtat taEtat;
	private String commentaire;
	private TaFabrication taFabrication;
	private TaBoncdeAchat taBoncdeAchat;
	private TaBoncde taBoncde;
	private TaDevis taDevis;
	private TaProforma taProforma;
	private TaAvisEcheance taAvisEcheance;
	
	private Boolean manuel = false;



	private TaTypeMouvement taTypeMouvStock;
	
	private Set<TaMouvementStockPrev> taMouvementStockPreves = new HashSet<TaMouvementStockPrev>(0);
	
	private String quiCree;
	private Date quandCree;
	private String quiModif;
	private Date quandModif;
	private String ipAcces;
	private Integer versionObj;
	private String version;

	public TaGrMouvStockPrev() {
	}

	public TaGrMouvStockPrev(int idGrMouvStockPrev) {
		this.idGrMouvStock = idGrMouvStockPrev;
	}

	public TaMouvementStockPrev chercheLigneInverseDeplacement(TaMouvementStockPrev ligneMouvement) {
		return chercheLigneInverseDeplacement(ligneMouvement, false);
	}

	public TaMouvementStockPrev chercheLigneInverseDeplacement(TaMouvementStockPrev ligneMouvement, boolean creerSiExistePas) {
		TaMouvementStockPrev ligneInverse = null;
		if(ligneMouvement!=null) {
			for (TaMouvementStockPrev taMouvementStockPrev : taMouvementStockPreves) {
				if(ligneMouvement.getLettrageDeplacement()!=null 
						&& taMouvementStockPrev.getLettrageDeplacement()!=null
						&& ligneMouvement.getLettrageDeplacement().equals(taMouvementStockPrev.getLettrageDeplacement())) {
					if(ligneMouvement.getIdMouvementStock()!=taMouvementStockPrev.getIdMouvementStock()) {
						ligneInverse = taMouvementStockPrev;
					}
				}
			}
		}
		if(ligneInverse==null && creerSiExistePas) {
			ligneMouvement.setLettrageDeplacement(UUID.randomUUID().toString()/*.replace("-", "")*/);
			ligneInverse = creerLigneInverse(ligneMouvement);
		} else {
			//mise Ã  jour
			ligneInverse = mappingLigneInverse(ligneMouvement,ligneInverse,false);
		}
		return ligneInverse;
	}
	
	public TaMouvementStockPrev creerLigneInverse(TaMouvementStockPrev ligneMouvement) {
		TaMouvementStockPrev ligneInverse = new TaMouvementStockPrev();
		
		ligneInverse = mappingLigneInverse(ligneMouvement,ligneInverse,true);
		
		return ligneInverse;
	}
	
	public void majLigneInverse(TaMouvementStockPrev ligneMouvement, int idLigneAMettreAJour) {
		
		for (TaMouvementStockPrev taMouvementStockPrev : getTaMouvementStockPreves()) {
			if(taMouvementStockPrev.getLettrageDeplacement()!=null && 
					taMouvementStockPrev.getLettrageDeplacement().equals(taMouvementStockPrev.getLettrageDeplacement())) {
				//mappingLigneInverse(ligneMouvement, taMouvementStockPrev);
			}
		}

	}
	
	public TaMouvementStockPrev mappingLigneInverse(TaMouvementStockPrev ligneMouvement, TaMouvementStockPrev ligneInverse, boolean creation) {
		if(ligneInverse==null) {
			ligneInverse = new TaMouvementStockPrev();
		}
		
		//copier
		ligneInverse.setTaLot(ligneMouvement.getTaLot());
		ligneInverse.setDateStock(ligneMouvement.getDateStock());
		ligneInverse.setDescription(ligneMouvement.getDescription());
		ligneInverse.setLibelleStock(ligneMouvement.getLibelleStock());
//		if(creation) {
		if(ligneMouvement.getQte1Stock()!=null) {
			ligneInverse.setQte1Stock(ligneMouvement.getQte1Stock().abs());
		} else {
			ligneInverse.setQte1Stock(ligneMouvement.getQte1Stock());
		}
		if(ligneMouvement.getQte2Stock()!=null) {
			ligneInverse.setQte2Stock(ligneMouvement.getQte2Stock().abs());
		} else {
			ligneInverse.setQte2Stock(ligneMouvement.getQte2Stock());
		}
//		}
		ligneInverse.setUn1Stock(ligneMouvement.getUn1Stock());
		ligneInverse.setUn2Stock(ligneMouvement.getUn2Stock());
		
		ligneInverse.setUtilise(ligneMouvement.getUtilise());
		
		//affecter l'entrepot/emplacement correspondant
		
		ligneInverse.setTaEntrepot(ligneMouvement.getTaEntrepotDest());
		ligneInverse.setEmplacement(ligneMouvement.getEmplacementDest());
		
		//affecter le lettrage ??
		ligneInverse.setLettrageDeplacement(ligneMouvement.getLettrageDeplacement());
		
		//affecter le groupe de mouv ??
		ligneInverse.setTaGrMouvStockPrev(ligneMouvement.getTaGrMouvStockPrev());
		
		return ligneInverse;
	}

	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id_gr_mouv_stock", unique = true, nullable = false)
	@LgrHibernateValidated(champBd = "id_gr_mouv_stock",table = "ta_gr_mouv_stock_prev", champEntite="idGrMouvStock", clazz = TaGrMouvStockPrev.class)
	public int getIdGrMouvStock() {
		return this.idGrMouvStock;
	}

	public void setIdGrMouvStock(int idGrMouvStockPrev) {
		this.idGrMouvStock = idGrMouvStockPrev;
	}

//	@Version
	@Column(name = "version", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}



	@Temporal(TemporalType.DATE)
	@Column(name = "date_gr_mouv_stock", length = 19)
	@LgrHibernateValidated(champBd = "date_gr_mouv_stock",table = "ta_gr_mouv_stock_prev", champEntite="dateGrMouvStock", clazz = TaGrMouvStockPrev.class)
	public Date getDateGrMouvStock() {
		return this.dateGrMouvStock;
	}

	public void setDateGrMouvStock(Date dateGrMouvStockPrev) {
		this.dateGrMouvStock = dateGrMouvStockPrev;
	}

	@Column(name = "libelle_gr_mouv_stock")
	@LgrHibernateValidated(champBd = "libelle_gr_mouv_stock",table = "ta_gr_mouv_stock_prev", champEntite="libelleGrMouvStock", clazz = TaGrMouvStockPrev.class)
	public String getLibelleGrMouvStock() {
		return this.libelleGrMouvStock;
	}

	public void setLibelleGrMouvStock(String libelleGrMouvStockPrev) {
		this.libelleGrMouvStock = libelleGrMouvStockPrev;
	}




	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_type_mouv")
	@LgrHibernateValidated(champBd = "id_type_mouvement",table = "ta_type_mouvement", champEntite="taTypeMouvStock.idTypeMouvement", clazz = TaTypeMouvement.class)
	public TaTypeMouvement getTaTypeMouvStock() {
		return taTypeMouvStock;
	}

	public void setTaTypeMouvStock(TaTypeMouvement taTypeMouvStockPrev) {
		this.taTypeMouvStock = taTypeMouvStockPrev;
	}


	@Column(name = "code_gr_mouv_stock", length = 20)
	@LgrHibernateValidated(champBd = "code_gr_mouv_stock",table = "ta_gr_mouv_stock_prev", champEntite="codeGrMouvStock", clazz = TaGrMouvStockPrev.class)
	public String getCodeGrMouvStock() {
		return codeGrMouvStock;
	}

	public void setCodeGrMouvStock(String codeGrMouvStockPrev) {
		this.codeGrMouvStock = codeGrMouvStockPrev;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_etat")
	@LgrHibernateValidated(champBd = "id_etat",table = "ta_etat", champEntite="taEtat.idEtat", clazz = TaEtat.class)
	public TaEtat getTaEtat() {
		return this.taEtat;
	}

	public void setTaEtat(TaEtat taEtat) {
		this.taEtat = taEtat;
	}

	@Column(name = "commentaire")
	@LgrHibernateValidated(champBd = "commentaire",table = "ta_gr_mouv_stock_prev", champEntite="commentaire", clazz = TaGrMouvStockPrev.class)
	public String getCommentaire() {
		return commentaire;
	}

	public void setCommentaire(String commentaire) {
		this.commentaire = commentaire;
	}


	@Valid
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taGrMouvStockPrev", orphanRemoval=true)
	public Set<TaMouvementStockPrev> getTaMouvementStockPreves() {
		return taMouvementStockPreves;
	}

	public void setTaMouvementStockPreves(Set<TaMouvementStockPrev> taMouvementStockPreves) {
		this.taMouvementStockPreves = taMouvementStockPreves;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_fabrication")
	@LgrHibernateValidated(champBd = "id_document",table = "ta_fabrication", champEntite="taFabrication.idDocument", clazz = TaFabrication.class)
	public TaFabrication getTaFabrication() {
		return taFabrication;
	}

	public void setTaFabrication(TaFabrication taFabrication) {
		this.taFabrication = taFabrication;
	}

	
	
	public Boolean getManuel() {
		return manuel;
	}

	public void setManuel(Boolean manuel) {
		this.manuel = manuel;
	}
	
	@Column(name = "qui_cree", length = 50)
	public String getQuiCree() {
		return this.quiCree;
	}

	public void setQuiCree(String quiCreeStockPrev) {
		this.quiCree = quiCreeStockPrev;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_cree", length = 19)
	public Date getQuandCree() {
		return this.quandCree;
	}

	public void setQuandCree(Date quandCreeStockPrev) {
		this.quandCree = quandCreeStockPrev;
	}

	@Column(name = "qui_modif", length = 50)
	public String getQuiModif() {
		return this.quiModif;
	}

	public void setQuiModif(String quiModifStockPrev) {
		this.quiModif = quiModifStockPrev;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_modif", length = 19)
	public Date getQuandModif() {
		return this.quandModif;
	}

	public void setQuandModif(Date quandModifStockPrev) {
		this.quandModif = quandModifStockPrev;
	}

	@Column(name = "ip_acces", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}
	@Version
	@Column(name = "version_obj")
	public Integer getVersionObj() {
		return this.versionObj;
	}

	public void setVersionObj(Integer versionObj) {
		this.versionObj = versionObj;
	}



	
	public void addLigneMouvement(TaMouvementStockPrev ligne){
		this.getTaMouvementStockPreves().add(ligne);
	}
	
	public void removeLigneMouvement(TaMouvementStockPrev ligne){
		this.getTaMouvementStockPreves().remove(ligne);		
	}



	public void removeLigne(TaMouvementStockPrev ligne) throws Exception {
		if(getTaMouvementStockPreves().size()-1>=0 ){
			getTaMouvementStockPreves().remove(ligne);
		}

}


	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_boncde_achat")
	public TaBoncdeAchat getTaBoncdeAchat() {
		return taBoncdeAchat;
	}

	public void setTaBoncdeAchat(TaBoncdeAchat taBoncdeAchat) {
		this.taBoncdeAchat = taBoncdeAchat;
	}


	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_boncde")
	public TaBoncde getTaBoncde() {
		return taBoncde;
	}

	public void setTaBoncde(TaBoncde taBoncde) {
		this.taBoncde = taBoncde;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_devis")
	public TaDevis getTaDevis() {
		return taDevis;
	}

	public void setTaDevis(TaDevis taDevis) {
		this.taDevis = taDevis;
	}


	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_proforma")
	public TaProforma getTaProforma() {
		return taProforma;
	}

	public void setTaProforma(TaProforma taProforma) {
		this.taProforma = taProforma;
	}

	
	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_avis_echeance")
	public TaAvisEcheance getTaAvisEcheance() {
		return taAvisEcheance;
	}

	public void setTaAvisEcheance(TaAvisEcheance taAvisEcheance) {
		this.taAvisEcheance = taAvisEcheance;
	}

	

}
