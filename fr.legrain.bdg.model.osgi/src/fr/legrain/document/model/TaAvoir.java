package fr.legrain.document.model;

//Generated Apr 9, 2009 12:40:07 PM by Hibernate Tools 3.2.0.CR1

import java.beans.PropertyChangeEvent;
import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedNativeQueries;
import javax.persistence.NamedNativeQuery;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlTransient;

import org.apache.log4j.Logger;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnore;

import fr.legrain.document.dto.IDocumentCalcul;
import fr.legrain.document.dto.IDocumentTiers;
import fr.legrain.document.dto.IDocumentTiersComplet;
import fr.legrain.document.dto.IInfosDocumentTiers;
import fr.legrain.document.dto.ILigneDocumentTiers;
import fr.legrain.document.events.SWTModificationDocumentEvent;
import fr.legrain.lib.data.ChangeModeEvent;
import fr.legrain.lib.data.ChangeModeListener;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.lib.data.IHMEtat;
import fr.legrain.lib.data.LibCalcul;
import fr.legrain.lib.data.LibConversion;
import fr.legrain.stock.model.TaGrMouvStock;
import fr.legrain.tiers.model.TaAdresse;
import fr.legrain.tiers.model.TaCPaiement;
import fr.legrain.tiers.model.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaAvoir generated by hbm2java
 */
@Entity
@EntityListeners(SwtDocumentListener.class)
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "ta_avoir", uniqueConstraints = @UniqueConstraint(columnNames = "code_document"))
//@SequenceGenerator(name = "gen_avoir", sequenceName = "num_id_avoir", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATEEXPORT_LIGHT, query="select new fr.legrain.document.dto.TaAvoirDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers where f.taTiers.codeTiers like :codeTiers and f.dateExport =:date order by f.dateDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_TIERS_AND_DATE_LIGHT, query="select new fr.legrain.document.dto.TaAvoirDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers  where f.taTiers.codeTiers like :codeTiers and f.dateDocument between :dateDeb and :dateFin order by f.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_EXPORT_LIGHT, query="select new fr.legrain.document.dto.TaAvoirDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers  where f.taTiers.codeTiers like :codeTiers and f.dateDocument between :dateDeb and :dateFin  and f.dateExport is not null order by f.codeDocument"), 
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin order by a.codeDocument"), 
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like :codeTiers and f.dateDocument between :dateDeb and :dateFin order by f.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_CODE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.codeDocument between :dateDeb and :dateFin order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_TIERS_AND_CODE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like :codeTiers and f.codeDocument like :codeDocument order by f.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_TIERS_AND_CODE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.codeDocument between :dateDeb and :dateFin order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_PARDATE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin order by a.dateDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_NON_EXPORT, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin  and a.dateExport is null order by a.codeDocument"), 
		@NamedQuery(name=TaAvoir.QN.FIND_BY_CODE_NON_EXPORT, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.codeDocument between :dateDeb and :dateFin and a.dateExport is null order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_NON_EXPORT_PARDATE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin and a.dateExport is null order by a.dateDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_NON_EXPORT_LIGHT, query="select new fr.legrain.document.dto.TaAvoirDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers  where f.taTiers.codeTiers like :codeTiers and f.dateDocument between :dateDeb and :dateFin  and f.dateExport is null order by f.codeDocument"), 
		@NamedQuery(name=TaAvoir.QN.FIND_BY_CODE_NON_EXPORT_LIGHT, query="select new fr.legrain.document.dto.TaAvoirDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers  where f.taTiers.codeTiers like :codeTiers and f.codeDocument between :dateDeb and :dateFin and f.dateExport is null order by f.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_NON_EXPORT_PARDATE_LIGHT, query="select new fr.legrain.document.dto.TaAvoirDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers where f.taTiers.codeTiers like :codeTiers and f.dateDocument between :dateDeb and :dateFin  and f.dateExport is null order by f.dateDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_EXPORT, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin  and a.dateExport is not null order by a.codeDocument"), 
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATEEXPORT, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateExport =:date order by a.codeDocument"), 
		@NamedQuery(name=TaAvoir.QN.FIND_BY_CODE_EXPORT, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.codeDocument between :dateDeb and :dateFin and a.dateExport is not null order by a.codeDocument"),
//		@NamedQuery(name=TaAvoir.QN.FIND_BY_ETAT_DATE, query="select a from TaAvoir a where a.dateDocument between ? and ? and a.taEtat.codeEtat = ? order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_TIERS_AND_DATE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_NON_VERROUILLE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin  and a.dateVerrouillage is null order by a.codeDocument"),		
		@NamedQuery(name=TaAvoir.QN.FIND_BY_CODE_NON_VERROUILLE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.codeDocument between :dateDeb and :dateFin and a.dateExport is not null order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_DATE_VERROUILLE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between dateDeb and :dateFin  and a.dateVerrouillage is not null order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_BY_CODE_VERROUILLE, query="select a from TaAvoir a where a.taTiers.codeTiers like :codeTiers and a.codeDocument between dateDeb and :dateFin and a.dateVerrouillage is not null order by a.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_ALL_LIGHT, query="select new fr.legrain.document.dto.TaAvoirDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers,"
				+ " infos.nomEntreprise,f.dateEchDocument,f.netHtCalc,f.netTvaCalc,f.netTtcCalc,f.dateExport,f.dateVerrouillage, mad.accessibleSurCompteClient, mad.envoyeParEmail, mad.imprimePourClient) from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers  left join f.taMiseADisposition mad order by f.dateDocument DESC, f.codeDocument DESC"),
		// Vérifiez toutes les requêtes ci-dessous qui ont été copiés depuis devis
		@NamedQuery(name=TaAvoir.QN.FIND_ALL_LIGHT_PERIODE, query="select new fr.legrain.document.dto.TaAvoirDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
				+ " from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers "
				+ " where f.dateDocument between :dateDebut and :dateFin   and f.taTiers.codeTiers like :codeTiers"
				+ " order by f.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_AFFECTE_LIGHT_PERIODE, 
		query="select new fr.legrain.document.dto.TaAvoirDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
				+ " from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers "
				+ " where f.dateDocument between :dateDebut and :dateFin "
				+ " and f.taTiers.codeTiers like :codeTiers"
				+ " and f.taEtat is null "
				+ " and coalesce((f.netTtcCalc),0)<=(" 
				+"	select coalesce(sum(ra.affectation),0) from TaAvoir f3  left join f3.taRAvoirs ra   "  
				+"	where f3.idDocument=f.idDocument group by f3.idDocument )"
				+ " order by f.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_NON_AFFECTE_LIGHT_PERIODE, 
			query="select new fr.legrain.document.dto.TaAvoirDTO("
					+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
					+ " from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers "
					+ " where f.dateDocument between :dateDebut and :dateFin "
					+ " and f.taTiers.codeTiers like :codeTiers"
					+ " and f.taEtat is null "
					+ " and coalesce((f.netTtcCalc),0)>(" 
					+"	select coalesce(sum(ra.affectation),0) from TaAvoir f3    left join f3.taRAvoirs ra   "  
					+"	where f3.idDocument=f.idDocument group by f3.idDocument )"
					+ " order by f.codeDocument"),
		@NamedQuery(name=TaAvoir.QN.FIND_NON_AFFECTE_ARELANCER_LIGHT_PERIODE, 
			query="select new fr.legrain.document.dto.TaAvoirDTO("
					+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
					+ " from TaAvoir f join f.taInfosDocument infos join f.taTiers tiers  "
					+ " where f.dateDocument between :dateDebut and :dateFin and f.dateEchDocument < :datejour"
					+ " and f.taTiers.codeTiers like :codeTiers"
					+ " and f.taEtat is null "
					+ " and coalesce((f.netTtcCalc),0)>(" 
					+"	select coalesce(sum(ra.affectation),0) from TaAvoir f3    left join f3.taRAvoirs ra   "  
					+"	where f3.idDocument=f.idDocument group by f3.idDocument )"
					+ " order by f.codeDocument"),
		
//		// Renvoi les totaux de l'ensemble des devis groupé par jour sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_CA_JOUR_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " sum(f.netHtCalc),sum(f.netTvaCalc),sum(f.netTtcCalc)) "
					+ " from TaAvoir f  "
					+ " where f.dateDocument between :dateDebut and :dateFin  and f.taTiers.codeTiers like :codeTiers"
					+ " group by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument)"),
//		// Renvoi les totaux de l'ensemble des devis groupé par mois sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_CA_MOIS_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " sum(f.netHtCalc),sum(f.netTvaCalc),sum(f.netTtcCalc)) "
					+ " from TaAvoir f  "
					+ " where f.dateDocument between :dateDebut and :dateFin  and f.taTiers.codeTiers like :codeTiers"
					+ " group by  extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(month from f.dateDocument),extract(year from f.dateDocument)"),
//		// Renvoi les totaux de l'ensemble des devis groupé par année sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_CA_ANNEE_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(year from f.dateDocument),sum(f.netHtCalc),sum(f.netTvaCalc),sum(f.netTtcCalc)) "
					+ " from TaAvoir f  "
					+ " where f.dateDocument between :dateDebut and :dateFin  and f.taTiers.codeTiers like :codeTiers"
					+ " group by  extract(year from f.dateDocument) "
					+ " order by extract(year from f.dateDocument)"),
//		// Renvoi les totaux de l'ensemble des factures sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_CA_TOTAL_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " sum(f.netHtCalc),sum(f.netTvaCalc),sum(f.netTtcCalc)) "
					+ " from TaAvoir f  "
					+ " where f.dateDocument between :dateDebut and :dateFin and f.taTiers.codeTiers like :codeTiers"),

		// Renvoi les totaux de l'ensemble des factures payées sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_CA_TOTAL_LIGHT_PERIODE_PAYE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " sum(f.netHtCalc),sum(f.netTvaCalc),sum(f.netTtcCalc)) "
					+ " from TaAvoir f  left join f.taRAvoirs ra "
					+ " where f.dateDocument between :dateDebut and :dateFin and f.taTiers.codeTiers like :codeTiers"
					+"  and coalesce(sum(ra.affectation),0)>= coalesce(sum(f.netTtcCalc),0) "),
//		// Renvoi les totaux de l'ensemble des factures pour un tiers sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_CA_TOTAL_LIGTH_PERIODE_PAR_TIERS, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " sum(f.netHtCalc),sum(f.netTvaCalc),sum(f.netTtcCalc)) "
					+ " from TaAvoir f  "
					+ " where f.dateDocument between :dateDebut and :dateFin and f.taTiers.codeTiers like :codeTiers "),
//		// Renvoi les totaux de l'ensemble des factures pour un article sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_CA_TOTAL_LIGTH_PERIODE_PAR_ARTICLE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " sum(f.netHtCalc),sum(f.netTvaCalc),sum(f.netTtcCalc)) "
					+ "  from TaAvoir f left join f.taTiers t left join f.lignes lf left join lf.taArticle art  "
					+ " where art.codeArticle = :codearticle and f.dateDocument between :dateDebut and :dateFin group by art.codeArticle"),
		
		@NamedQuery(name=TaAvoir.QN.SUM_AFFECTATION_JOUR_LIGTH_PERIODE_TOTALEMENTAFFECTE, 
		query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
				+ " extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument), "
				+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0), coalesce(sum(f.netTtcCalc),0)) "
				+ " from TaAvoir f  "
				+ " where f.dateDocument between :dateDebut and :dateFin  "
				+ " and f.taTiers.codeTiers like :codeTiers"
				+ " and f.taEtat is null "
				+ " and coalesce((f.netTtcCalc),0)<=(" 
				+"	select coalesce(sum(ra.affectation),0) from TaAvoir f3  left join f3.taRAvoirs ra   "  
				+"	where f3.idDocument=f.idDocument group by f3.idDocument )"
				+ " group by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument)"
				+ " order by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument)"),		
		@NamedQuery(name=TaAvoir.QN.SUM_AFFECTATION_MOIS_LIGTH_PERIODE_TOTALEMENTAFFECTE, 
		query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
				+ " extract(month from f.dateDocument),extract(year from f.dateDocument), "
				+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0), coalesce(sum(f.netTtcCalc),0)) "
				+ " from TaAvoir f  "
				+ " where f.dateDocument between :dateDebut and :dateFin  "
				+ " and f.taTiers.codeTiers like :codeTiers"
				+ " and f.taEtat is null "
				+ " and coalesce((f.netTtcCalc),0)<=(" 
				+"	select coalesce(sum(ra.affectation),0) from TaAvoir f3  left join f3.taRAvoirs ra   "  
				+"	where f3.idDocument=f.idDocument group by f3.idDocument )"
				+ " group by extract(month from f.dateDocument),extract(year from f.dateDocument)"
				+ " order by extract(month from f.dateDocument),extract(year from f.dateDocument)"),
		@NamedQuery(name=TaAvoir.QN.SUM_AFFECTATION_ANNEE_LIGTH_PERIODE_TOTALEMENTAFFECTE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(year from f.dateDocument),"
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0), coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAvoir f  "
					+ " where f.dateDocument between :dateDebut and :dateFin  "
					+ " and f.taTiers.codeTiers like :codeTiers"
					+ " and f.taEtat is null "
					+ " and coalesce((f.netTtcCalc),0)<=(" 
					+"	select coalesce(sum(ra.affectation),0) from TaAvoir f3   left join f3.taRAvoirs ra   "  
					+"	where f3.idDocument=f.idDocument group by f3.idDocument )"
					+ " group by extract(year from f.dateDocument)"
					+ " order by extract(year from f.dateDocument)"),
		// Renvoi le total à relancer car date échéance dépassée du ca ht, des affectations des règlements+des affectations des avoirs, et du reste à règler des factures sur la période dateDebut à dateFin
		@NamedQuery(name=TaAvoir.QN.SUM_AFFECTATION_TOTAL_LIGHT_PERIODE_TOTALEMENTAFFECTE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0), coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAvoir f  "
					+ " where f.dateDocument between :dateDebut and :dateFin  "
					+ " and f.taTiers.codeTiers like :codeTiers"
					+ " and f.taEtat is null "
					+ " and coalesce((f.netTtcCalc),0)<=(" 
					+"	select coalesce(sum(ra.affectation),0) from TaAvoir f3 left join f3.taRAvoirs ra   "  
					+"	where f3.idDocument=f.idDocument group by f3.idDocument )"
					+ " group by true")	
		
		})


@NamedNativeQueries({
	@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_JOUR_LIGTH_PERIODE, 
			query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
					" select extract(day from f.date_Document)as jour,extract(month from f.date_Document)as mois,extract(year from f.date_Document)as annee,"+
					" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
					" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
					" join ta_tiers t on t.id_tiers=f.id_tiers " + 
					" join (" + 
					" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
					" group by f.id_document )as s2 " + 
					" on s2.id_document=f.id_document" +  
					" where f.date_Document between :dateDebut and :dateFin " + 
					" and t.code_Tiers like :codeTiers" + 
					" and f.id_Etat is null " + 
					" and coalesce((f.net_Ttc_Calc),0)>(" + 
					" select coalesce(sum(ra.affectation),0) from ta_avoir f3   left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
					" where f3.id_Document=f.id_Document group by f3.id_Document )" + 
					" group by extract(day from f.date_Document),extract(month from f.date_Document),extract(year from f.date_Document),s2.affectationAvoir" + 
					" order by extract(day from f.date_Document),extract(month from f.date_Document),extract(year from f.date_Document))as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),	
	@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_MOIS_LIGTH_PERIODE, 
			query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
					" select (0)as jour,extract(month from f.date_Document)as mois,extract(year from f.date_Document)as annee,"+
			" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
			" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
			" join ta_tiers t on t.id_tiers=f.id_tiers " + 
			" join (" + 
			" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
			" group by f.id_document )as s2 " + 
			" on s2.id_document=f.id_document" +  
			" where f.date_Document between :dateDebut and :dateFin " + 
			" and t.code_Tiers like :codeTiers" + 
			" and f.id_Etat is null " + 
			" and coalesce((f.net_Ttc_Calc),0)>(" + 
			" select coalesce(sum(ra.affectation),0) from ta_avoir f3  left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
			" where f3.id_Document=f.id_Document group by f3.id_Document )" + 
			" group by extract(month from f.date_Document),extract(year from f.date_Document),s2.affectationAvoir" + 
			" order by extract(month from f.date_Document),extract(year from f.date_Document))as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),			
	@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_ANNEE_LIGTH_PERIODE, 
			query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
					" select (0)as jour,(0)as mois,extract(year from f.date_Document)as annee,"+
				" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
				" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
				" join ta_tiers t on t.id_tiers=f.id_tiers " + 
				" join (" + 
				" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
				" group by f.id_document )as s2 " + 
				" on s2.id_document=f.id_document" +  
				" where f.date_Document between :dateDebut and :dateFin " + 
				" and t.code_Tiers like :codeTiers" + 
				" and f.id_Etat is null " + 
				" and coalesce((f.net_Ttc_Calc),0)>(" + 
				" select coalesce(sum(ra.affectation),0) from ta_avoir f3   left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
				" where f3.id_Document=f.id_Document group by f3.id_Document )" + 
				" group by extract(year from f.date_Document),s2.affectationAvoir" + 
				" order by extract(year from f.date_Document))as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),	
	// Renvoi le total du ca ht, des affectations des règlements+des affectations des avoirs, et du reste à règler des factures sur la période dateDebut à dateFin
	@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_TOTAL_LIGTH_PERIODE, 
			query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
					" select (0)as jour,(0)as mois,(0)as annee,"+
				" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
				" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
				" join ta_tiers t on t.id_tiers=f.id_tiers " + 
				" join (" + 
				" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
				" group by f.id_document )as s2 " + 
				" on s2.id_document=f.id_document" +  
				" where f.date_Document between :dateDebut and :dateFin " + 
				" and t.code_Tiers like :codeTiers" + 
				" and f.id_Etat is null " + 
				" and coalesce((f.net_Ttc_Calc),0)>(" + 
				" select coalesce(sum(ra.affectation),0) from ta_avoir f3   left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
				" where f3.id_Document=f.id_Document group by f3.id_Document )" + 
				" group by s2.affectationAvoir)as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),			
		
	@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_JOUR_LIGTH_PERIODE_A_RELANCER, 
	query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
			" select extract(day from f.date_Document)as jour,extract(month from f.date_Document)as mois,extract(year from f.date_Document)as annee,"+
			" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
			" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
			" join ta_tiers t on t.id_tiers=f.id_tiers " + 
			" join (" + 
			" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
			" group by f.id_document )as s2 " + 
			" on s2.id_document=f.id_document" +  
			" where f.date_Document between :dateDebut and :dateFin  and f.date_Ech_Document < :datejour " + 
			" and t.code_Tiers like :codeTiers" + 
			" and f.id_Etat is null " + 
			" and coalesce((f.net_Ttc_Calc),0)>(" + 
			" select coalesce(sum(ra.affectation),0) from ta_avoir f3  left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
			" where f3.id_Document=f.id_Document group by f3.id_Document )" + 
			" group by extract(day from f.date_Document),extract(month from f.date_Document),extract(year from f.date_Document),s2.affectationAvoir" + 
			" order by extract(day from f.date_Document),extract(month from f.date_Document),extract(year from f.date_Document))as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),	
@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_MOIS_LIGTH_PERIODE_A_RELANCER, 
	query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
			" select (0)as jour,extract(month from f.date_Document)as mois,extract(year from f.date_Document)as annee,"+
	" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
	" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
	" join ta_tiers t on t.id_tiers=f.id_tiers " + 
	" join (" + 
	" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
	" group by f.id_document )as s2 " + 
	" on s2.id_document=f.id_document" +  
	" where f.date_Document between :dateDebut and :dateFin  and f.date_Ech_Document < :datejour " + 
	" and t.code_Tiers like :codeTiers" + 
	" and f.id_Etat is null " + 
	" and coalesce((f.net_Ttc_Calc),0)>(" + 
	" select coalesce(sum(ra.affectation),0) from ta_avoir f3  left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
	" where f3.id_Document=f.id_Document group by f3.id_Document )" + 
	" group by extract(month from f.date_Document),extract(year from f.date_Document),s2.affectationAvoir" + 
	" order by extract(month from f.date_Document),extract(year from f.date_Document))as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),			
@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_ANNEE_LIGTH_PERIODE_A_RELANCER, 
	query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
			" select (0)as jour,(0)as mois,extract(year from f.date_Document)as annee,"+
		" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
		" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
		" join ta_tiers t on t.id_tiers=f.id_tiers " + 
		" join (" + 
		" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
		" group by f.id_document )as s2 " + 
		" on s2.id_document=f.id_document" +  
		" where f.date_Document between :dateDebut and :dateFin  and f.date_Ech_Document < :datejour " + 
		" and t.code_Tiers like :codeTiers" + 
		" and f.id_Etat is null " + 
		" and coalesce((f.net_Ttc_Calc),0)>(" + 
		" select coalesce(sum(ra.affectation),0) from ta_avoir f3  left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
		" where f3.id_Document=f.id_Document group by f3.id_Document )" + 
		" group by extract(year from f.date_Document),s2.affectationAvoir" + 
		" order by extract(year from f.date_Document))as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),	
// Renvoi le total du ca ht, des affectations des règlements+des affectations des avoirs, et du reste à règler des factures sur la période dateDebut à dateFin
@NamedNativeQuery(name=TaAvoir.QN.SUM_RESTE_A_AFFECTER_TOTAL_LIGTH_PERIODE_A_RELANCER, 
	query = "select res.jour,res.mois,res.annee,true as typeReglement,sum(res.mtHtCalc)as mtHtCalc ,sum(res.mtTvaCalc)as mtTvaCalc, sum(res.mtTtcCalc)as mtTtcCalc,sum(res.affectationTotale)as affectationTotale,sum(res.resteARegler)as resteARegler from("+
			" select (0)as jour,(0)as mois,(0)as annee,"+
		" true as typeReglement,coalesce(sum(f.net_Ht_Calc),0)as mtHtCalc ,coalesce(sum(f.net_Tva_Calc),0)as mtTvaCalc, coalesce(sum(f.net_Ttc_Calc),0)as mtTtcCalc," + 
		" (s2.affectationAvoir)as affectationTotale,(coalesce(sum(f.net_Ttc_Calc),0)-(s2.affectationAvoir))as resteARegler from ta_avoir f " + 
		" join ta_tiers t on t.id_tiers=f.id_tiers " + 
		" join (" + 
		" select f.id_document,(coalesce(sum(ra.affectation),0))as affectationAvoir from ta_avoir f left join ta_r_avoir ra on ra.id_avoir=f.id_document " + 
		" group by f.id_document )as s2 " + 
		" on s2.id_document=f.id_document" +  
		" where f.date_Document between :dateDebut and :dateFin  and f.date_Ech_Document < :datejour " + 
		" and t.code_Tiers like :codeTiers" + 
		" and f.id_Etat is null " + 
		" and coalesce((f.net_Ttc_Calc),0)>(" + 
		" select coalesce(sum(ra.affectation),0) from ta_avoir f3  left join ta_R_Avoir ra  on ra.id_avoir=f.id_document  " + 
		" where f3.id_Document=f.id_Document group by f3.id_Document )" + 

		" group by s2.affectationAvoir)as res group by res.jour,res.mois,res.annee", resultSetMapping = "DocumentChiffreAffaireDTO"),			
})

public class TaAvoir extends SWTDocument implements ChangeModeListener, 
java.io.Serializable, IDocumentTiers,IDocumentTiersComplet, IDocumentCalcul{

	private static final long serialVersionUID = 5667378116594597831L;
	
	public static final String TYPE_DOC = "Avoir";
	public static final String PATH_ICONE_COULEUR = "dashboard/facture-avoir.svg";
	public static final String PATH_ICONE_BLANC = "";
	public static final String PATH_ICONE_GRIS = "";
	public static class QN {
		public static final String FIND_BY_DATEEXPORT_LIGHT = "TaAvoir.findDateExporteLight";     
		public static final String FIND_BY_TIERS_AND_DATE_LIGHT = "TaAvoir.findTiersEntre2DateLight";
		public static final String FIND_BY_DATE_EXPORT_LIGHT = "TaAvoir.findEntre2DateExporteLight";
		public static final String FIND_BY_DATE = "TaAvoir.findEntre2Date";
		public static final String FIND_BY_DATE_LIGHT = "TaAvoir.findEntre2DateLight";
		public static final String FIND_BY_TIERS_AND_CODE_LIGHT = "TaAvoir.findEntre2CodeParCodeLight";
		public static final String FIND_BY_DATE_PARDATE = "TaAvoir.findEntre2DateParDate";
		public static final String FIND_BY_CODE = "TaAvoir.findEntre2Code";
		public static final String FIND_BY_TIERS_AND_CODE = "TaAvoir.findEntre2CodeParCode";
		public static final String FIND_BY_DATE_NON_EXPORT = "TaAvoir.findEntre2DateNonExporte";
		public static final String FIND_BY_CODE_NON_EXPORT = "TaAvoir.findEntre2CodeNonExporte";
		public static final String FIND_BY_DATE_NON_EXPORT_PARDATE = "TaAvoir.findEntre2DateNonExporteParDate";
		public static final String FIND_BY_DATE_NON_EXPORT_LIGHT = "TaAvoir.findEntre2DateNonExporteLight";
		public static final String FIND_BY_CODE_NON_EXPORT_LIGHT = "TaAvoir.findEntre2CodeNonExporteLight";
		public static final String FIND_BY_DATE_NON_EXPORT_PARDATE_LIGHT = "TaAvoir.findEntre2DateNonExporteParDateLight";
		public static final String FIND_BY_DATE_EXPORT = "TaAvoir.findEntre2DateExporte";
		public static final String FIND_BY_CODE_EXPORT = "TaAvoir.findEntre2CodeExporte";
		public static final String FIND_BY_TIERS_AND_DATE = "TaAvoir.findTiersEntre2Date";
		public static final String FIND_BY_DATEEXPORT = "TaAvoir.findDateExporte";
//		public static final String FIND_BY_ETAT_DATE = "TaAvoir.findEtatDate";
		public static final String FIND_ALL_LIGHT = "TaAvoir.findAllLight";
		
		public static final String FIND_ALL_LIGHT_PERIODE = "TaAvoir.findAllLightPeriode";
		public static final String FIND_AFFECTE_LIGHT_PERIODE = "TaAvoir.findAvoirAffectePeriodeDTO";
		public static final String FIND_NON_AFFECTE_LIGHT_PERIODE = "TaAvoir.findAvoirNonAffecteDTO";		
		public static final String FIND_NON_AFFECTE_ARELANCER_LIGHT_PERIODE = "TaAvoir.findAvoirNonAffecteARelancerDTO";
		
		public static final String SUM_CA_JOUR_LIGTH_PERIODE = "TaAvoir.caAvoirJourPeriodeDTO";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE = "TaAvoir.caAvoirMoisPeriodeDTO";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE = "TaAvoir.caAvoirAnneePeriodeDTO";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE = "TaAvoir.caAvoirTotalPeriodeDTO";

		public static final String SUM_RESTE_A_AFFECTER_JOUR_LIGTH_PERIODE = "TaAvoir.resteAReglerAvoirJourPeriodeDTO";
		public static final String SUM_RESTE_A_AFFECTER_MOIS_LIGTH_PERIODE = "TaAvoir.resteAReglerAvoirMoisPeriodeDTO";
		public static final String SUM_RESTE_A_AFFECTER_ANNEE_LIGTH_PERIODE = "TaAvoir.resteAReglerAvoirAnneePeriodeDTO";
		public static final String SUM_RESTE_A_AFFECTER_TOTAL_LIGTH_PERIODE = "TaAvoir.resteAReglerAvoirTotalPeriodeDTO";
		
		public static final String SUM_RESTE_A_AFFECTER_JOUR_LIGTH_PERIODE_A_RELANCER = "TaAvoir.caAvoirJourPeriodeDTONonAffecte";
		public static final String SUM_RESTE_A_AFFECTER_MOIS_LIGTH_PERIODE_A_RELANCER = "TaAvoir.caAvoirMoisPeriodeDTONonAffecte";
		public static final String SUM_RESTE_A_AFFECTER_ANNEE_LIGTH_PERIODE_A_RELANCER = "TaAvoir.caAvoirAnneePeriodeDTONonAffecte";
		public static final String SUM_RESTE_A_AFFECTER_TOTAL_LIGTH_PERIODE_A_RELANCER = "TaAvoir.caAvoirTotalPeriodeDTONonAffecte";

		public static final String SUM_AFFECTATION_JOUR_LIGTH_PERIODE_TOTALEMENTAFFECTE = "TaAvoir.caAvoirJourPeriodeDTOAffecte";
		public static final String SUM_AFFECTATION_MOIS_LIGTH_PERIODE_TOTALEMENTAFFECTE = "TaAvoir.caAvoirMoisPeriodeDTOAffecte";
		public static final String SUM_AFFECTATION_ANNEE_LIGTH_PERIODE_TOTALEMENTAFFECTE = "TaAvoir.caAvoirAnneePeriodeDTOAffecte";
		public static final String SUM_AFFECTATION_TOTAL_LIGHT_PERIODE_TOTALEMENTAFFECTE = "TaAvoir.caAvoirTotalPeriodeDTOAffecte";
		
		public static final String SUM_CA_TOTAL_LIGHT_PERIODE_PAYE = "TaAvoir.caFactureTotalPeriodeDTOPaye";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE_PAR_TIERS = "TaAvoir.caTotalLightPeriodeParTiers";

		public static final String SUM_CA_TOTAL_LIGTH_PERIODE_PAR_ARTICLE = "TaAvoir.caTotalLightPeriodeParArticle";
		public static final String FIND_BY_DATE_NON_VERROUILLE = "TaAvoir.findEntre2DateNonVerrouille";
		public static final String FIND_BY_CODE_NON_VERROUILLE = "TaAvoir.findEntre2CodeNonVerrouille";
		public static final String FIND_BY_DATE_VERROUILLE = "TaAvoir.findEntre2DateVerrouille";
		public static final String FIND_BY_CODE_VERROUILLE = "TaAvoir.findEntre2CodeVerrouille";
	}

//	private int idDocument;
	private String version;
	private TaTPaiement taTPaiement;
	private TaTiers taTiers;
	//private TaCPaiement taCPaiement;

	private String codeDocument;
	private Date dateDocument;
	private Date dateEchDocument;
	private Date dateLivDocument;
	private Date dateExport;
	private String libelleDocument;
	private BigDecimal regleDocument = new BigDecimal(0);
	private BigDecimal remHtDocument = new BigDecimal(0);
	private BigDecimal txRemHtDocument = new BigDecimal(0);
	private BigDecimal remTtcDocument = new BigDecimal(0);
	private BigDecimal txRemTtcDocument = new BigDecimal(0);
	private Integer nbEDocument = 0;
	private Integer ttc = 0;
//	private Integer export = 0;
	private String commentaire;
	private Boolean mouvementerStock = true;
	private Boolean mouvementerCRD = true;
	private Boolean gestionLot = false;

	private Date dateVerrouillage;
	private String ipAcces;
//	private Integer versionObj;
	private TaGrMouvStock taGrMouvStock;
//	private TaEtat taEtat;
	private TaInfosAvoir taInfosDocument;
	private TaMiseADisposition taMiseADisposition;
	private Set<TaRDocument> taRDocuments = new HashSet<TaRDocument>(0);
	private Set<TaRAcompte> taRAcomptes = new HashSet<TaRAcompte>(0);
	private Set<TaRAvoir> taRAvoirs = new HashSet<TaRAvoir>(0);
	private Set<TaREtat> taREtats = new HashSet<TaREtat>(0);
	private Set<TaHistREtat> taHistREtats = new HashSet<TaHistREtat>(0);
	private TaEtat taEtat;
	protected Integer nbDecimalesPrix;
	protected Integer nbDecimalesQte;
	
	@Transient
	private ArrayList<LigneTva> lignesTVA = null; //ensemble des lignes de tva du document
	@Transient
	private boolean gestionTVA = true;
	@Transient
	static Logger logger = Logger.getLogger(TaAvoir.class.getName());

//	@Transient
	private BigDecimal mtTtcCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal mtHtCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal mtTvaCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netTtcCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netHtCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netTvaCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netAPayer = new BigDecimal(0);
//	@Transient
	private BigDecimal mtTtcAvantRemiseGlobaleCalc = new BigDecimal(0);
	
//	@Transient
//	private BigDecimal resteARegler = new BigDecimal(0);
	
	@Transient	
	private BigDecimal resteAAffecter = new BigDecimal(0);
	
	@Transient
	private BigDecimal remTtcIntermediaireDocument = new BigDecimal(0);
	
    @Transient
	private int etatDeSuppression = 0;
	
	@Transient
	private String typeDocument;
	
	@Transient
	private BigDecimal regleCompletDocument = new BigDecimal(0);
	
	@Transient
	private BigDecimal resteAReglerComplet = new BigDecimal(0);
    
	@Transient
	private boolean legrain = false;
	
	protected Boolean utiliseUniteSaisie = true;

	private Set<TaRReglementLiaison> taRReglementLiaisons = new HashSet<TaRReglementLiaison>(0);

	
//	private String tgOperation;
	
	public TaAvoir(boolean legrain) {
		this.legrain = legrain;
		lignes = new ArrayList<TaLAvoir>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}

	public TaAvoir() {
		lignes = new ArrayList<TaLAvoir>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}

	public TaAvoir(int idAvoir) {
		this.idDocument = idAvoir;
		lignes = new ArrayList<TaLAvoir>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}

	public TaAvoir(String oldCodeAvoir) {
		super(oldCodeAvoir);
		legrain = true;
		lignes = new ArrayList<TaLAvoir>(0);
		this.lignesTVA = new ArrayList<LigneTva>();
		//passage ejb
//		this.modeDocument = EnumModeObjet.C_MO_INSERTION;
	}

	public TaAvoir(int idAvoir, TaTPaiement taTPaiement, TaTiers taTiers,
			TaCPaiement taCPaiement, TaAdresse taAdresseByIdAdresse,
			TaAdresse taAdresseByIdAdresseLiv, String codeAvoir,
			Date dateAvoir, Date dateEchAvoir, Date dateLivAvoir,
			String libelleAvoir, BigDecimal regleAvoir,
			BigDecimal remHtAvoir, BigDecimal txRemHtAvoir,
			BigDecimal remTtcAvoir, BigDecimal txRemTtcAvoir,
			Integer nbEAvoir, Integer ttc, Integer export, String commentaire,
			String quiCreeAvoir, Date quandCreeAvoir,
			String quiModifAvoir, Date quandModifAvoir, String ipAcces,
			Integer versionObj, List<TaLAvoir> taLAvoirs,
			TaInfosAvoir taInfosAvoirs, Set<TaRDocument> taRDocuments) {
		this.idDocument = idAvoir;
		this.taTPaiement = taTPaiement;
		this.taTiers = taTiers;
		//this.taCPaiement = taCPaiement;
		this.codeDocument = codeAvoir;
		this.dateDocument = dateAvoir;
		this.dateEchDocument = dateEchAvoir;
		this.dateLivDocument = dateLivAvoir;
		this.libelleDocument = libelleAvoir;
		this.regleDocument = regleAvoir;
		this.remHtDocument = remHtAvoir;
		this.txRemHtDocument = txRemHtAvoir;
		this.remTtcDocument = remTtcAvoir;
		this.txRemTtcDocument = txRemTtcAvoir;
		this.nbEDocument = nbEAvoir;
		this.ttc = ttc;
//		this.export = export;
		this.commentaire = commentaire;
		this.quiCree = quiCreeAvoir;
		this.quandCree = quandCreeAvoir;
		this.quiModif = quiModifAvoir;
		this.quandModif = quandModifAvoir;
		this.ipAcces = ipAcces;
		this.versionObj = versionObj;
		this.lignes = taLAvoirs;
		this.taInfosDocument = taInfosAvoirs;
		this.taRDocuments = taRDocuments;
	}


//	@Id
//	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "gen_avoir")
//	@Column(name = "id_document", unique = true, nullable = false)
//	@LgrHibernateValidated(champ = "id_document",table = "ta_avoir",clazz = TaAvoir.class)
//	public int getIdDocument() {
//		return this.idDocument;
//	}
//
//	public void setIdAvoir(int idAvoir) {
//		setIdDocument(idAvoir);
//	}

	public void setIdDocument(int idAvoir) {
		this.idDocument = idAvoir;
	}

	@Column(name = "version", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_t_paiement")
	@LgrHibernateValidated(champBd = "id_t_paiement",table = "ta_t_paiement",champEntite="TaTPaiement.idTPaiement",clazz = TaTPaiement.class)
	public TaTPaiement getTaTPaiement() {
		return this.taTPaiement;
	}

	public void setTaTPaiement(TaTPaiement taTPaiement) {
		this.taTPaiement = taTPaiement;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_tiers")
	@LgrHibernateValidated(champBd = "id_tiers",table = "ta_tiers",champEntite="TaTiers.idTiers",clazz = TaTiers.class)
	public TaTiers getTaTiers() {
		return this.taTiers;
	}

	public void setTaTiers(TaTiers taTiers) {
//		if(taRAcomptes.size()==0 || rechercheSiMemeTiers(taTiers)) // => Passage EJB
			this.taTiers = taTiers;
	}

	public boolean rechercheSiMemeTiers(TaTiers taTiers){
		for (TaRAcompte acompte : taRAcomptes) {
			if(acompte.getTaAcompte().getTaTiers()!=null)
				if (!acompte.getTaAcompte().getTaTiers().equals(taTiers))
					return false;
		}
		return true;
	}

//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "id_c_paiement")
//	@LgrHibernateValidated(champ = "id_c_paiement",table = "ta_c_paiement",clazz = TaCPaiement.class)
//	public TaCPaiement getTaCPaiement() {
//		return this.taCPaiement;
//	}
//
//	public void setTaCPaiement(TaCPaiement taCPaiement) {
//		this.taCPaiement = taCPaiement;
//	}


	@Column(name = "code_document", unique = true, length = 20)
	@LgrHibernateValidated(champBd = "code_document",table = "ta_avoir",champEntite="codeDocument",clazz = TaAvoir.class)
	public String getCodeDocument() {
		return this.codeDocument;
	}


	public void setCodeDocument(String codeAvoir) {
		this.codeDocument = codeAvoir;
	}


	@Temporal(TemporalType.DATE)
	@Column(name = "date_document", length = 19)
	@LgrHibernateValidated(champBd = "date_document",table = "ta_avoir",champEntite="dateDocument",clazz = TaAvoir.class)
	public Date getDateDocument() {
		return this.dateDocument;
	}


	public void setDateDocument(Date dateFacture) {
		if(this.oldDate==null)this.oldDate=dateFacture;
		else
		if(this.dateDocument==null||
				this.dateDocument.compareTo(dateFacture)!=0)
			this.oldDate=this.dateDocument;
		this.dateDocument = dateFacture;
	}


	@Temporal(TemporalType.DATE)
	@Column(name = "date_ech_document", length = 19)
	@LgrHibernateValidated(champBd = "date_ech_document",table = "ta_avoir",champEntite="dateEchDocument",clazz = TaAvoir.class)
	public Date getDateEchDocument() {
		return this.dateEchDocument;
	}

	public void setDateEchDocument(Date dateEchAvoir) {
		this.dateEchDocument = dateEchAvoir;
	}


	@Temporal(TemporalType.DATE)
	@Column(name = "date_liv_document", length = 19)
	@LgrHibernateValidated(champBd = "date_liv_document",table = "ta_avoir",champEntite="dateLivDocument",clazz = TaAvoir.class)
	public Date getDateLivDocument() {
		return this.dateLivDocument;
	}

	public void setDateLivDocument(Date dateLivAvoir) {
		this.dateLivDocument = dateLivAvoir;
	}



	@Column(name = "libelle_document")
	@LgrHibernateValidated(champBd = "libelle_document",table = "ta_avoir",champEntite="libelleDocument",clazz = TaAvoir.class)
	public String getLibelleDocument() {
		return this.libelleDocument;
	}


	public void setLibelleDocument(String libelleAvoir) {
		this.libelleDocument = libelleAvoir;
	}



//	@Column(name = "regle_document", precision = 15)
//	@LgrHibernateValidated(champ = "regle_document",table = "ta_avoir",clazz = TaAvoir.class)
	@Transient
	public BigDecimal getRegleDocument() {
		return this.getRegleCompletDocument();
	}

	@Transient
	public void setRegleDocument(BigDecimal regleAvoir) {
		if(regleDocument==null)regleDocument=new BigDecimal(0);
		if(this.regleDocument!=null && this.regleDocument.compareTo(regleDocument)!=0){	
			this.regleDocument = regleAvoir;		
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier Avoir");
				//passage ejb => dans TaAvoirService
//				calculTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}	


	@Column(name = "rem_ht_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_ht_document",table = "ta_avoir",champEntite="remHtDocument",clazz = TaAvoir.class)
	public BigDecimal getRemHtDocument() {
		return this.remHtDocument;
	}

	public void setRemHtDocument(BigDecimal remHtAvoir) {
		this.remHtDocument = remHtAvoir;
	}


	@Column(name = "tx_rem_ht_document", precision = 15)
	@LgrHibernateValidated(champBd = "tx_rem_ht_document",table = "ta_avoir",champEntite="txRemHtDocument",clazz = TaAvoir.class)
	public BigDecimal getTxRemHtDocument() {
		return this.txRemHtDocument;
	}


	public void setTxRemHtDocument(BigDecimal txRemHtAvoir) {
		if(txRemHtAvoir==null)txRemHtAvoir=new BigDecimal(0);
		if(this.txRemHtDocument!=null && this.txRemHtDocument.compareTo(txRemHtAvoir)!=0){		
			this.txRemHtDocument = txRemHtAvoir;
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier Avoir");
				//passage ejb => dans TaAvoirService
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}


	@Column(name = "rem_ttc_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_ttc_document",table = "ta_avoir",champEntite="remTtcDocument",clazz = TaAvoir.class)
	public BigDecimal getRemTtcDocument() {
		return this.remTtcDocument;
	}

	public void setRemTtcDocument(BigDecimal remTtcAvoir) {
		this.remTtcDocument = remTtcAvoir;
	}

	@Column(name = "tx_rem_ttc_document", precision = 15)
	@LgrHibernateValidated(champBd = "tx_rem_ttc_document",table = "ta_avoir",champEntite="txRemTtcDocument",clazz = TaAvoir.class)
	public BigDecimal getTxRemTtcDocument() {
		return this.txRemTtcDocument;
	}


	public void setTxRemTtcDocument(BigDecimal txRemTtcAvoir) {
		if(txRemTtcAvoir==null)txRemTtcAvoir=new BigDecimal(0);
		if(this.txRemTtcDocument!=null && this.txRemTtcDocument.compareTo(txRemTtcAvoir)!=0){	
			this.txRemTtcDocument = txRemTtcAvoir;
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier Avoir");
				//passage ejb => dans TaAvoirService
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this,"txRemTtcDocument"));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "nb_e_document")
	@LgrHibernateValidated(champBd = "nb_e_document",table = "ta_avoir",champEntite="nbEDocument",clazz = TaAvoir.class)
	public Integer getNbEDocument() {
		return this.nbEDocument;
	}

	public void setNbEDocument(Integer nbEAvoir) {
		this.nbEDocument = nbEAvoir;
	}

	@Column(name = "ttc")
	@LgrHibernateValidated(champBd = "ttc",table = "ta_avoir",champEntite="ttc",clazz = TaAvoir.class)
	public Integer getTtc() {
		return this.ttc;
	}

	public void setTtc(Integer ttc) {
		this.ttc = ttc;
	}
//
//	@Column(name = "export")
//	@LgrHibernateValidated(champBd = "export",table = "ta_avoir",champEntite="export",clazz = TaAvoir.class)
//	public Integer getExport() {
//		return this.export;
//	}
//
//	public void setExport(Integer export) {
//		this.export = export;
//	}

	@Column(name = "commentaire", length = 2000)
	@LgrHibernateValidated(champBd = "commentaire",table = "ta_avoir",champEntite="commentaire",clazz = TaAvoir.class)
	public String getCommentaire() {
		return this.commentaire;
	}

	public void setCommentaire(String commentaire) {
		if(this.commentaire==null||(commentaire!=null &&
				this.commentaire.compareTo(commentaire)!=0)){
			this.commentaire = commentaire;		
			if(legrain) {
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}


	@Column(name = "qui_cree", length = 50)
	public String getQuiCree() {
		return this.quiCree;
	}


	public void setQuiCree(String quiCreeAvoir) {
		this.quiCree = quiCreeAvoir;
	}



	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_cree", length = 19)
	public Date getQuandCree() {
		return this.quandCree;
	}


	public void setQuandCree(Date quandCreeAvoir) {
		this.quandCree = quandCreeAvoir;
	}


	@Column(name = "qui_modif", length = 50)
	public String getQuiModif() {
		return this.quiModif;
	}


	public void setQuiModif(String quiModifAvoir) {
		this.quiModif = quiModifAvoir;
	}


	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_modif", length = 19)
	public Date getQuandModif() {
		return this.quandModif;
	}


	public void setQuandModif(Date quandModifAvoir) {
		this.quandModif = quandModifAvoir;
	}

	@Column(name = "ip_acces", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}

//	@Version
//	@Column(name = "version_obj")
//	public Integer getVersionObj() {
//		return this.versionObj;
//	}
//
//	public void setVersionObj(Integer versionObj) {
//		this.versionObj = versionObj;
//	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taDocument", orphanRemoval=true)
	@OrderBy("numLigneLDocument")
	@Fetch(FetchMode.SUBSELECT)
	public List<TaLAvoir> getLignes() {
		return this.lignes;
	}

	public void setLignes(List<TaLAvoir> taLAvoirs) {
		this.lignes = taLAvoirs;
	}

//	@javax.persistence.OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taDocument")
	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL , orphanRemoval=true, optional=false)
	@JoinColumn(name = "id_infos_document")
	public TaInfosAvoir getTaInfosDocument() {
		return this.taInfosDocument;
	}

	public void setTaInfosDocument(TaInfosAvoir taInfosAvoirs) {
		this.taInfosDocument = taInfosAvoirs;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAvoir", orphanRemoval=true)
	public Set<TaRDocument> getTaRDocuments() {
		return this.taRDocuments;
	}

	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		this.taRDocuments = taRDocuments;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taAvoir", orphanRemoval=true)
	public Set<TaRAvoir> getTaRAvoirs() {
		return taRAvoirs;
	}

	public void setTaRAvoirs(Set<TaRAvoir> taRAvoirs) {
		this.taRAvoirs = taRAvoirs;
	}
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taAvoir", orphanRemoval=true)
	public Set<TaRAcompte> getTaRAcomptes(){
		return this.taRAcomptes;
	}

	public void setTaRAcomptes(Set<TaRAcompte> taRAcomptes) {
		this.taRAcomptes = taRAcomptes;
	}
	/**
	 * Initialisation des propriétés de la facture en fonction du tiers
	 */
	public void changementDeTiers() {
//		if(this.taTiers!=null && this.taTiers.getTaTTvaDoc()!=null && 
//				this.taTiers.getTaTTvaDoc().getCodeTTvaDoc()!=null){
//			if(!this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("F")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("UE")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("HUE")
//			)
//				setGestionTVA(false);
//			else setGestionTVA(true);
//		}else
//			setGestionTVA(true);
	}

	/*
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 * *********************************************************************************************************************************
	 */
//	public Integer typeLigne(String CodeTypeLigne) throws SQLException{		
//		Integer idTLigne;
//		return  idTLigne =LibConversion.stringToInteger(ibApplication.selectCleEtrangere(Const.C_NOM_TA_T_LIGNE,
//				Const.C_ID_T_LIGNE, Variant.STRING, Const.C_CODE_T_LIGNE, CodeTypeLigne));		
//	}

	@Override
	protected boolean beforeAjoutLigne(SWTLigneDocument ligne) {
		// TODO Raccord de méthode auto-généré
		return true;
	}

	@Override
	protected void afterAjoutLigne(SWTLigneDocument ligne) throws ExceptLgr {
		System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier Avoir");
		//passage ejb => dans TaAvoirService
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
	}

	@Override
	protected boolean beforeRemoveLigne(SWTLigneDocument ligne) {
		// TODO Raccord de méthode auto-généré
		return true;
	}

	@Override
	protected void afterRemoveLigne(SWTLigneDocument ligne) throws ExceptLgr {
		System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier Avoir");
		//passage ejb => dans TaAvoirService
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
	}

	@Transient
	public boolean isGestionTVA() {
		return gestionTVA;
	}

	public void setGestionTVA(boolean gestionTVA) {
		this.gestionTVA = gestionTVA;
	}

	@Transient
	public ArrayList<LigneTva> getLignesTVA() {
		return lignesTVA;
	}

	public void setLignesTVA(ArrayList<LigneTva> lignesTVA) {
		this.lignesTVA = lignesTVA;
	}

	@Override
	protected boolean beforeEnregistrerEntete() {
		// TODO Raccord de méthode auto-généré
		return false;
	}

	@Override
	protected void afterEnregistrerEntete() throws ExceptLgr {
		// TODO Raccord de méthode auto-généré

	}

	@Override
	protected boolean beforeModifierEntete() {
		// TODO Raccord de méthode auto-généré
		return false;
	}

	@Override
	protected void afterModifierEntete() throws ExceptLgr {
		// TODO Raccord de méthode auto-généré

	}

	@Override
	protected boolean beforeSupprimerEntete() {
		// TODO Raccord de méthode auto-généré
		return false;
	}

	@Override
	protected void afterSupprimerEntete() throws ExceptLgr {
		// TODO Raccord de méthode auto-généré

	}



	public void changementMode(ChangeModeEvent evt) {
		// TODO Raccord de méthode auto-généré
		switch (evt.getNouveauMode()) {
		case C_MO_CONSULTATION:
			break;
		case C_MO_EDITION:
			//S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_INSERTION:
//			S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_SUPPRESSION:
			break;
		}

	}
	
//	@Transient
	@Column(name = "mt_ttc_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_calc",table = "ta_avoir",champEntite="mtTtcCalc",clazz = TaAvoir.class)
	public BigDecimal getMtTtcCalc() {
		return mtTtcCalc;
	}

	public void setMtTtcCalc(BigDecimal mtTtcCalc) {
		this.mtTtcCalc = LibCalcul.arrondi(mtTtcCalc);
	}

	//@Transient
	@Column(name = "mt_ht_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ht_calc",table = "ta_avoir",champEntite="mtHtCalc",clazz = TaAvoir.class)
	public BigDecimal getMtHtCalc() {
		return mtHtCalc;
	}

	public void setMtHtCalc(BigDecimal mtHtCalc) {
		this.mtHtCalc = LibCalcul.arrondi(mtHtCalc);
	}

	//@Transient
	@Column(name = "mt_tva_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_tva_calc",table = "ta_avoir",champEntite="mtTvaCalc",clazz = TaAvoir.class)
	public BigDecimal getMtTvaCalc() {
		return mtTvaCalc;
	}

	public void setMtTvaCalc(BigDecimal mtTvaCalc) {
		this.mtTvaCalc = LibCalcul.arrondi(mtTvaCalc);
	}

	//@Transient
	@Column(name = "net_ttc_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_ttc_calc",table = "ta_avoir",champEntite="netTtcCalc",clazz = TaAvoir.class)
	public BigDecimal getNetTtcCalc() {
		return netTtcCalc;
	}

	public void setNetTtcCalc(BigDecimal netTtcCalc) {
		this.netTtcCalc = LibCalcul.arrondi(netTtcCalc);
	}

	//@Transient
	@Column(name = "net_ht_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_ht_calc",table = "ta_avoir",champEntite="netHtCalc",clazz = TaAvoir.class)
	public BigDecimal getNetHtCalc() {
		return netHtCalc;
	}

	public void setNetHtCalc(BigDecimal netHtCalc) {
		this.netHtCalc = LibCalcul.arrondi(netHtCalc);
	}

	//@Transient
	@Column(name = "net_tva_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_tva_calc",table = "ta_avoir",champEntite="netTvaCalc",clazz = TaAvoir.class)
	public BigDecimal getNetTvaCalc() {
		return netTvaCalc;
	}

	public void setNetTvaCalc(BigDecimal netTvaCalc) {
		this.netTvaCalc = LibCalcul.arrondi(netTvaCalc);
	}

	//@Transient
	@Column(name = "net_a_payer", precision = 15)
	@LgrHibernateValidated(champBd = "net_a_payer",table = "ta_avoir",champEntite="netAPayer",clazz = TaAvoir.class)
	public BigDecimal getNetAPayer() {
		return netAPayer;
	}

	public void setNetAPayer(BigDecimal netAPayer) {
		this.netAPayer = LibCalcul.arrondi(netAPayer);
	}

//	public void addLigne(TaLAvoir taLAvoir) {
//		this.getLignes().add(taLAvoir);
//	}

//	public void removeLigne(TaLAvoir taLAvoir){
//		this.getLignes().remove(taLAvoir);
//	}

//	/**
//	 * Reparti le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
//	 */
//	public void dispatcherTva() {
//
//		BigDecimal tvaLigne = new BigDecimal(0);
//		BigDecimal totalTemp = new BigDecimal(0);
//
//		for (LigneTva ligneTva : lignesTVA) {
//
//			if (ligneTva.getMtTva()!=null) {
//				int lignepasse=1;
//				BigDecimal tvaTmp = ligneTva.getMtTva();
//				BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
//				BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());
//
//				for (Object ligne : lignes) {
//					if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(Const.C_CODE_T_LIGNE_H)) {
//						if(((TaLAvoir)ligne).getCodeTvaLDocument()!=null&&
//								((TaLAvoir)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//							if (ligneTva.getMontantTotalHt().signum()==0) 
//								tvaLigne = ((TaLAvoir)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
//							else {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//									tvaLigne = tvaTmp;
//								else {
//									if(ttc==1){
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
//											tvaLigne=BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTva().multiply(((TaLAvoir)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//									else{
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
//											tvaLigne =BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTva().multiply(((TaLAvoir)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//								}
//							}
//							tvaTmp =  tvaTmp.subtract(tvaLigne);
//							totalTemp = totalTemp.add(((TaLAvoir)ligne).getMtHtLDocument());
//
//							if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//									((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
//									((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
//								} else {
//									((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().subtract(((TaLAvoir)ligne).getMtHtLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//									((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(((TaLAvoir)ligne).getMtTtcLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//								}
////								ttcTmp =  ttcTmp.subtract(((TaLAvoir)ligne).getMtTtcLFacture());
////								htTmp =  htTmp.subtract(((TaLAvoir)ligne).getMtHtLFacture());
//							} else {
//								if(ttc==1)
//									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//										((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
//									}else{
//										((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(tvaLigne));
//									}
//								else
//									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
//									}else {
//										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().add(tvaLigne));
//									}
//
//							}
//							ttcTmp =  ttcTmp.subtract(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument());
//							htTmp =  htTmp.subtract(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument());
//
//							lignepasse++;
//						}
//					}
//					setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))));						
//
////					setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						
//
//				}
//			}
//		}
////		}
//
//	}
	
	//passage ejb => dans TaAvoirService
//	
//	/**
//	 * Repartir le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
//	 */
//	public void dispatcherTva() {
//		
//		BigDecimal tvaLigne = new BigDecimal(0); //Montant de TVA de la ligne du document courante
//		BigDecimal totalTemp = new BigDecimal(0); //Somme des montants HT des lignes du document (mis à jour au fil des iterations)
//
//		
//		boolean derniereLignePourTVA = false;
//		
//		for (Object ligne : lignes) {
//			if(((TaLAvoir)ligne).getMtHtLDocument()!=null)
//				totalTemp = totalTemp.add(((TaLAvoir)ligne).getMtHtLDocument());
//		}
//		if(totalTemp!=null && txRemHtDocument!=null)
//			setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));	
//		
//		for (TaLAvoir ligne : getLignes()) {
//			if(txRemHtDocument!=null && txRemHtDocument.signum()>0 && ligne.getMtHtLDocument()!=null  && ligne.getMtTtcLDocument()!=null) {
//				if(ttc==1){
//					((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(((TaLAvoir)ligne).getMtTtcLDocument()
//							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//					((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument());
//					
//				}else{
//					((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().subtract(((TaLAvoir)ligne).getMtHtLDocument()
//							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//					((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument());	
//				}
//			}
//		}
//		
//		//pour chaque ligne/code TVA
//		for (LigneTva ligneTva : lignesTVA) { 
//
//			if (ligneTva.getMtTva()!=null) {
//				int lignepasse=1;
//				BigDecimal tvaTmp = ligneTva.getMtTva(); //montant total de la TVA pour cette ligne/code TVA décrémenter du montant de TVA des lignes du documents deja traite
//				BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
//				BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());
//				BigDecimal tvaCalcule = new BigDecimal(0);
//				
//				//TaLAvoir derniereLigneFactureAvecMontantDifferentDeZero = null;
//				derniereLignePourTVA = false;
//
//				//pour chaque ligne du document
//				for (Object ligne : lignes) {
//					//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
//					if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(C_CODE_T_LIGNE_H)) {
//						//si le code TVA de la ligne correspond à celui traite (boucle superieure)
//						if(((TaLAvoir)ligne).getCodeTvaLDocument()!=null&&((TaLAvoir)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//							tvaLigne = prorataMontantTVALigne((TaLAvoir)ligne, ligneTva);
//							
//							tvaTmp =  tvaTmp.subtract(tvaLigne);
//							if(tvaTmp.compareTo(resteTVA(ligneTva))==0  && !derniereLignePourTVA) {
//								//Le reste de TVA a traiter correspond a la difference d'arrondi,
//								//les lignes de documents suivantes (s'il en reste) ont un montant HT nul
//								//c'est donc la derniere ligne sur laquelle on peut mettre de la TVA => on ajoute le reliquat
//								tvaLigne = tvaLigne.add(tvaTmp);
//								derniereLignePourTVA = true;
//							}
//							totalTemp = totalTemp.add(((TaLAvoir)ligne).getMtHtLDocument());
//
//							//===Correction des totaux après remise de la ligne du document
//							if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//									((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
//									((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
//								} else {
//									if(ttc==1){
//										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(((TaLAvoir)ligne).getMtTtcLDocument()
//												.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//										((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument().divide(BigDecimal.valueOf(1).add(
//												 (((TaLAvoir)ligne).getTauxTvaLDocument().divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(3,BigDecimal.ROUND_HALF_UP)
//											)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP));
//										
//									}else{
//										((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().subtract(((TaLAvoir)ligne).getMtHtLDocument()
//												.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//										tvaCalcule = (((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument().
//										multiply(((TaLAvoir)ligne).getTauxTvaLDocument().divide(new BigDecimal(100),MathContext.DECIMAL128))).setScale(2,BigDecimal.ROUND_HALF_UP);
//										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument().add(tvaCalcule));	
//									}
////									((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().subtract(((TaLAvoir)ligne).getMtHtLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
////									((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(((TaLAvoir)ligne).getMtTtcLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
//								}
//
//							} else {
//								if(ttc==1)
//									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//										((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
//									}else{
//										((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(tvaLigne));
//									}
//								else
//									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
//										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
//									}else {
//										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().add(tvaLigne));
//									}
//
//							}
//							ttcTmp =  ttcTmp.subtract(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument());
//							htTmp =  htTmp.subtract(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument());
//
//							lignepasse++;
//						}
//					}
//					setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));						
//
//////					setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						
//
//				}
//			}
//
//		}
//
//
//	}
//	
//	/**
//	 * Calcule le montant de TVA d'une ligne du document par rapport au montant total de TVA pour un code TVA donnee
//	 * @param ligne - 
//	 * @param ligneTva
//	 * @return
//	 */
//	public BigDecimal prorataMontantTVALigne(TaLAvoir ligne, LigneTva ligneTva) {
//		BigDecimal tvaLigne = new BigDecimal(0);
//		
//		if (ligneTva.getMontantTotalHt().signum()==0) 
//			tvaLigne = ((TaLAvoir)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
//		else {
////			if  (lignepasse>= ligneTva.getNbLigneDocument()) //si c'est la deniere ligne, on prend tout ce qui reste
////				tvaLigne = tvaTmp;
////			else {
//				if(ttc==1){ //si saisie TTC
//					if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
//						tvaLigne=BigDecimal.valueOf(0);
//					else
//						tvaLigne = (ligneTva.getMtTva().multiply(((TaLAvoir)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//				}
//				else{
//					if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
//						tvaLigne =BigDecimal.valueOf(0);
//					else
//						tvaLigne = (ligneTva.getMtTva().multiply(((TaLAvoir)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//				}
////			}
//		}
//		return tvaLigne;
//	}
//	
//	/**
//	 * Calcule le montant de TVA qui reste après répartion de la TVA sur les lignes au prorata du monant HT.
//	 * Ce montant de TVA restant de 1 ou 2 centimes provient des arrondis successifs.
//	 * @param ligneTva
//	 * @return
//	 */
//	public BigDecimal resteTVA(LigneTva ligneTva) {
//		BigDecimal resteTVA = ligneTva.getMtTva();
//		for (Object ligne : lignes) {
//			//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
//			if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(C_CODE_T_LIGNE_H)) {
//				//si le code TVA de la ligne correspond à celui traite (boucle superieure)
//				if(((TaLAvoir)ligne).getCodeTvaLDocument()!=null&&((TaLAvoir)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//					resteTVA = resteTVA.subtract(prorataMontantTVALigne(((TaLAvoir)ligne),ligneTva));
//				}
//			}
//		}
//		return resteTVA;
//	}
//	/**
//	 * Lance la fonction de calcul du montant sur chacunes des lignes du document.
//	 */
//	public void calculMontantLigneDocument() {
//		for (Object ligne : lignes) {
//			((TaLAvoir)ligne).calculMontant();
//		}
//	}
//	
//	/**
//	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
//	 * Mise à jour de la propriété <code>lignesTVA</code>
//	 * et mise à jour du montant de la TVA dans les lignes du document
//	 */
//	public void calculTvaTotal() {
//		calculMontantLigneDocument();
//		calculLignesTva();
//		dispatcherTva();
//	}
//	
//	/**
//	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
//	 * Mise à jour de la propriété <code>lignesTVA</code>
//	 */
//	public void calculLignesTva() {
//
//		Map<String,BigDecimal> montantTotalHt = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> montantTotalTtc = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> montantTotalHtAvecRemise = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> montantTotalTtcAvecRemise = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> mtTVA = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> tauxTVA = new HashMap<String,BigDecimal>();
//		Map<String,Integer> nbLigne = new HashMap<String,Integer>();
//		String codeTVA = null;
//		TaTvaDAO taTvaDAO = new TaTvaDAO();
//		
//		/*
//		 * calcul de la TVA different en fonction de la propriete TTC
//		 */
//		BigDecimal ttcLigne = null;
//		BigDecimal htLigne = null;
//		for (Object ligne : lignes) {
//			//en commentaire pour ne pas refaire les calculs pendants les editions, 
//			//((TaLAvoir)ligne).calculMontant();
//			codeTVA = ((TaLAvoir)ligne).getCodeTvaLDocument();
//			if(codeTVA!=null && !codeTVA.equals("")) {
//				ttcLigne = ((TaLAvoir)ligne).getMtTtcLDocument();
//				htLigne = ((TaLAvoir)ligne).getMtHtLDocument();
//				if(montantTotalHt.containsKey(codeTVA)) {
//					montantTotalTtc.put(codeTVA,montantTotalTtc.get(codeTVA).add(ttcLigne));
//					montantTotalHt.put(codeTVA,montantTotalHt.get(codeTVA).add(htLigne));
//					montantTotalTtcAvecRemise.put(codeTVA,montantTotalTtcAvecRemise.get(codeTVA).add(ttcLigne));
//					montantTotalHtAvecRemise.put(codeTVA,montantTotalHtAvecRemise.get(codeTVA).add(htLigne));
//					nbLigne.put(codeTVA,nbLigne.get(codeTVA)+1);
//				} else {
//					montantTotalTtc.put(codeTVA,ttcLigne);
//					montantTotalHt.put(codeTVA,htLigne);
//					montantTotalTtcAvecRemise.put(codeTVA,ttcLigne);
//					montantTotalHtAvecRemise.put(codeTVA,htLigne);
//					tauxTVA.put(codeTVA,((TaLAvoir)ligne).getTauxTvaLDocument());
//					nbLigne.put(codeTVA,1);
//				}
//			}
//		}
//
//		for (String codeTva : montantTotalTtc.keySet()) {
//			//les 2 maps ont les meme cles
//			BigDecimal mtTtcTotal = montantTotalTtc.get(codeTva);
//			BigDecimal mtHtTotal = montantTotalHt.get(codeTva);
//			BigDecimal tva =null;
//			if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
////				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(     mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100))  )       ));
////				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract(    mtHtTotal.multiply( (txRemHtDocument.divide(new BigDecimal(100))))     ) ) ;
//				BigDecimal valeurInterTTC=mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(valeurInterTTC )) ;
//				BigDecimal valeurInterHT=mtHtTotal.multiply( txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract( valeurInterHT )) ;
//				montantTotalTtcAvecRemise.put(codeTva, mtTtcTotal);
//				montantTotalHtAvecRemise.put(codeTva, mtHtTotal);
//			} 
//
//			if (ttc==1) {
//				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
//				mtTVA.put(codeTva, tva);
//				montantTotalHtAvecRemise.put(codeTva, mtTtcTotal.subtract(tva));
//			} else {
//				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
//				mtTVA.put(codeTva, tva );
//				montantTotalTtcAvecRemise.put(codeTva, mtHtTotal.add(tva));
//			}
//		}
//
//		lignesTVA.clear();
//		for (String codeTva : mtTVA.keySet()) {
//			LigneTva ligneTva = new LigneTva();
//			ligneTva.setCodeTva(codeTva);
//			ligneTva.setTauxTva(tauxTVA.get(codeTva));
//			ligneTva.setMtTva(mtTVA.get(codeTva));
//			ligneTva.setMontantTotalHt(montantTotalHt.get(codeTva));
//			ligneTva.setMontantTotalTtc(montantTotalTtc.get(codeTva));
//			ligneTva.setMontantTotalHtAvecRemise(montantTotalHtAvecRemise.get(codeTva));
//			ligneTva.setMontantTotalTtcAvecRemise(montantTotalTtcAvecRemise.get(codeTva));
//			ligneTva.setLibelle(taTvaDAO.findByCode(codeTva).getLibelleTva());
//			ligneTva.setNbLigneDocument(nbLigne.get(codeTva));
//			lignesTVA.add(ligneTva);
//		}
//		
//		//dispatcherTva();
//	}
//	
//	/**
//	 * Calcul des totaux de la facture
//	 */
//	public void calculTotaux() {
//		
////			    MT_TVA Numeric(15,2),
//			setMtHtCalc(new BigDecimal(0));
//			setNetHtCalc(new BigDecimal(0));
//			setMtTtcCalc(new BigDecimal(0));
//			setMtTtcAvantRemiseGlobaleCalc(new BigDecimal(0));
//			for (Object ligne : lignes) {
//				if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(C_CODE_T_LIGNE_H)) {
//					if(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument()!=null)
//						setNetHtCalc(getNetHtCalc().add(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument()));
//					if(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
//						setMtTtcCalc(getMtTtcCalc().add(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument()));
//					if(((TaLAvoir)ligne).getMtHtLDocument()!=null)
//						setMtHtCalc(getMtHtCalc().add(((TaLAvoir)ligne).getMtHtLDocument()));
//					if(((TaLAvoir)ligne).getMtTtcLDocument()!=null)
//						setMtTtcAvantRemiseGlobaleCalc(getMtTtcAvantRemiseGlobaleCalc().add(((TaLAvoir)ligne).getMtTtcLDocument()));
//				}
//				
//			}
//			
//			setNetTvaCalc(getMtTtcCalc().subtract(getNetHtCalc()));
//			BigDecimal tva = new BigDecimal(0);
//			for (LigneTva ligneTva : lignesTVA) {
//				tva = tva.add(ligneTva.getMtTva());
//			}
//			if(tva.compareTo(getNetTvaCalc())!=0) {
//				logger.error("Montant de la TVA incorrect : "+getNetTvaCalc()+" ** "+tva);
//			}
//			
//			//setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getRemTtcFacture().divide(new BigDecimal(100)))));
//			//setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100)))));
//			setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP)));
//			
//			/*
//			 * remise HT déjà calculée dans dispatcherTva()
//			 */
//			//setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()));
//			setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()).setScale(2,BigDecimal.ROUND_HALF_UP));
//			
//			setNetAPayer(getNetTtcCalc().subtract(getRegleDocument()));
//			
//			//TODO A Finir ou a supprimer
////			select sum(f.mt_tva_recup) from calcul_tva_direct(:module,:id_document,:taux_r_ht,:ttc) f into :MTNETTVA;
////			tva=:mtnettva;
////			mt_ttc=:totalttc;
////			mt_tva=:mt_ttc-:mt_ht;
////			if (ttc=1) {
////			       txremiseht = taux_r_ht;
////			       mtnetttc=:mt_ttc - (:mt_ttc*(:txremiseht/100));
////			       MTNETHT=:mtnetttc - :MTNETTVA;
////			       remise_ht =  :totalttc - :mtnetttc ;
////			} else {
////			      txremiseht = taux_r_ht;
////			      MTNETHT=:mt_ht-(:mt_ht*(:txremiseht/100));
////			      mtnetttc=:MTNETHT + :MTNETTVA;
////			      remise_ht = mt_ht - mtnetht;
////			}
////			  txremisettc = taux_r_ttc;
////			  remise_ttc = (:mtnetttc * (:txremisettc/100));
////			  mtnetttc = :mtnetttc -:remise_ttc;
////			  netapayer = :mtnetttc - :regle;
//	}
//	
//	public void calculeTvaEtTotaux(){
//		calculTvaTotal();
//		calculTotaux();
//	}
	
	public void propertyChange(PropertyChangeEvent evt) {
		if(evt.getPropertyName().equals("qteLAvoir")
				|| evt.getPropertyName().equals("qte2LAvoir")
				|| evt.getPropertyName().equals("prixULAvoir")
				|| evt.getPropertyName().equals("remTxLAvoir")
				){
			System.err.println("modification du recalcul pour ejb");
			System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier Avoir");
			//passage ejb => dans TaAvoirService
			calculeTvaEtTotaux();
			try {
				fireModificationDocument(new SWTModificationDocumentEvent(this));
			} catch (Exception e) {
				logger.error("",e);
			}
		}
	}
	

	public void setLegrain(boolean legrain) {
		this.legrain = legrain;
		for (TaLAvoir ligne : getLignes()) {
			ligne.setLegrain(legrain);
		}		
	}

	@Transient
	public boolean isLegrain() {
		return legrain;
	}
	
	@Override
	protected void reinitialiseNumLignes() {
//		for (Object ligne : lignes) {
//			((TaLAvoir)ligne).setNumLigneLDocument(
//					((TaLAvoir) ligne).getNUM_LIGNE());
//		}
		
	}
	
	//@Transient
	@Column(name = "mt_ttc_avt_rem_globale_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_avt_rem_globale_calc",table = "ta_avoir",champEntite="", clazz = TaAvoir.class)
	public BigDecimal getMtTtcAvantRemiseGlobaleCalc() {
		return mtTtcAvantRemiseGlobaleCalc;
	}

	public void setMtTtcAvantRemiseGlobaleCalc(
			BigDecimal mtTtcAvantRemiseGlobaleCalc) {
		this.mtTtcAvantRemiseGlobaleCalc = mtTtcAvantRemiseGlobaleCalc;
	}

	
	@OneToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval=true , mappedBy ="taAvoir")
	//Attention si FetchType.EAGER => à cause d'autre EAGER, génère des outter join et duplique les lignes,
	//si EAGER il faut donc gérer ce problème ou remplacer la List des lignes par un Set
	@JoinColumn(name = "id_gr_mouv_stock")
//	@Fetch(FetchMode.SUBSELECT)
	@LgrHibernateValidated(champBd = "id_gr_mouvement_stock",table = "ta_gr_mouv_stock", champEntite="taGrMouvStock.idGrMouvStock", clazz = TaGrMouvStock.class)
	@XmlTransient //peut etre à modifier si on doit utiliser les mouvements dans les web services
	public TaGrMouvStock getTaGrMouvStock() {
		return taGrMouvStock;
	}
	public void setTaGrMouvStock(TaGrMouvStock taGrMouvStock) {
		this.taGrMouvStock = taGrMouvStock;
	}
	
//	@ManyToOne(fetch = FetchType.EAGER)
//	@JoinColumn(name = "id_etat")
//	@LgrHibernateValidated(champBd = "id_etat",table = "ta_etat",champEntite="TaEtat.idEtat", clazz = TaEtat.class)
//	public TaEtat getTaEtat() {
//		return this.taEtat;
//	}
//
//	public void setTaEtat(TaEtat taEtat) {
//		this.taEtat = taEtat;
//	}
	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codeDocument == null) ? 0 : codeDocument.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TaAvoir other = (TaAvoir) obj;
		if (codeDocument == null) {
			if (other.codeDocument != null)
				return false;
		} else if (!codeDocument.equals(other.codeDocument))
			return false;
		if (commentaire == null) {
			if (other.commentaire != null)
				return false;
		} else if (!commentaire.equals(other.commentaire))
			return false;
		if (dateDocument == null) {
			if (other.dateDocument != null)
				return false;
		} else if (!dateDocument.equals(other.dateDocument))
			return false;
		if (dateEchDocument == null) {
			if (other.dateEchDocument != null)
				return false;
		} else if (!dateEchDocument.equals(other.dateEchDocument))
			return false;
		if (dateLivDocument == null) {
			if (other.dateLivDocument != null)
				return false;
		} else if (!dateLivDocument.equals(other.dateLivDocument))
			return false;
		if (dateExport == null) {
			if (other.dateExport != null)
				return false;
		} else if (!dateExport.equals(other.dateExport))
			return false;
		if (gestionTVA != other.gestionTVA)
			return false;
		if (ipAcces == null) {
			if (other.ipAcces != null)
				return false;
		} else if (!ipAcces.equals(other.ipAcces))
			return false;
		if (legrain != other.legrain)
			return false;
		if (libelleDocument == null) {
			if (other.libelleDocument != null)
				return false;
		} else if (!libelleDocument.equals(other.libelleDocument))
			return false;
		if (lignesTVA == null) {
			if (other.lignesTVA != null)
				return false;
		} else if (!lignesTVA.equals(other.lignesTVA))
			return false;
		if (mtHtCalc == null) {
			if (other.mtHtCalc != null)
				return false;
		} else if (!mtHtCalc.equals(other.mtHtCalc))
			return false;
		if (mtTtcAvantRemiseGlobaleCalc == null) {
			if (other.mtTtcAvantRemiseGlobaleCalc != null)
				return false;
		} else if (!mtTtcAvantRemiseGlobaleCalc
				.equals(other.mtTtcAvantRemiseGlobaleCalc))
			return false;
		if (mtTtcCalc == null) {
			if (other.mtTtcCalc != null)
				return false;
		} else if (!mtTtcCalc.equals(other.mtTtcCalc))
			return false;
		if (mtTvaCalc == null) {
			if (other.mtTvaCalc != null)
				return false;
		} else if (!mtTvaCalc.equals(other.mtTvaCalc))
			return false;
		if (nbEDocument == null) {
			if (other.nbEDocument != null)
				return false;
		} else if (!nbEDocument.equals(other.nbEDocument))
			return false;
		if (netAPayer == null) {
			if (other.netAPayer != null)
				return false;
		} else if (!netAPayer.equals(other.netAPayer))
			return false;
		if (netHtCalc == null) {
			if (other.netHtCalc != null)
				return false;
		} else if (!netHtCalc.equals(other.netHtCalc))
			return false;
		if (netTtcCalc == null) {
			if (other.netTtcCalc != null)
				return false;
		} else if (!netTtcCalc.equals(other.netTtcCalc))
			return false;
		if (netTvaCalc == null) {
			if (other.netTvaCalc != null)
				return false;
		} else if (!netTvaCalc.equals(other.netTvaCalc))
			return false;
		if (quandCree == null) {
			if (other.quandCree != null)
				return false;
		} else if (!quandCree.equals(other.quandCree))
			return false;
		if (quandModif == null) {
			if (other.quandModif != null)
				return false;
		} else if (!quandModif.equals(other.quandModif))
			return false;
		if (quiCree == null) {
			if (other.quiCree != null)
				return false;
		} else if (!quiCree.equals(other.quiCree))
			return false;
		if (quiModif == null) {
			if (other.quiModif != null)
				return false;
		} else if (!quiModif.equals(other.quiModif))
			return false;
		if (regleDocument == null) {
			if (other.regleDocument != null)
				return false;
		} else if (!regleDocument.equals(other.regleDocument))
			return false;
		if (remHtDocument == null) {
			if (other.remHtDocument != null)
				return false;
		} else if (!remHtDocument.equals(other.remHtDocument))
			return false;
		if (remTtcDocument == null) {
			if (other.remTtcDocument != null)
				return false;
		} else if (!remTtcDocument.equals(other.remTtcDocument))
			return false;
		if (taInfosDocument == null) {
			if (other.taInfosDocument != null)
				return false;
		} else if (!taInfosDocument.equals(other.taInfosDocument))
			return false;
		if (taRDocuments == null) {
			if (other.taRDocuments != null)
				return false;
		} else if (!taRDocuments.equals(other.taRDocuments))
			return false;
		if (taTPaiement == null) {
			if (other.taTPaiement != null)
				return false;
		} else if (!taTPaiement.equals(other.taTPaiement))
			return false;
		if (taTiers == null) {
			if (other.taTiers != null)
				return false;
		} else if (!taTiers.equals(other.taTiers))
			return false;
		if (ttc == null) {
			if (other.ttc != null)
				return false;
		} else if (!ttc.equals(other.ttc))
			return false;
		if (txRemHtDocument == null) {
			if (other.txRemHtDocument != null)
				return false;
		} else if (!txRemHtDocument.equals(other.txRemHtDocument))
			return false;
		if (txRemTtcDocument == null) {
			if (other.txRemTtcDocument != null)
				return false;
		} else if (!txRemTtcDocument.equals(other.txRemTtcDocument))
			return false;
		if (version == null) {
			if (other.version != null)
				return false;
		} else if (!version.equals(other.version))
			return false;
		return true;
	}
	
	@Override
	@Transient
	public String getTypeDocument() {
		// TODO Auto-generated method stub
		return TYPE_DOC;
	}
	@Transient
	public BigDecimal getRemTtcIntermediaireDocument() {
		return mtTtcAvantRemiseGlobaleCalc.subtract(mtTtcCalc);
	}
	
	//passage ejb => dans TaAvoirService
//	public void calculDateEcheanceAbstract(Integer report, Integer finDeMois){
//		calculDateEcheance(report,finDeMois);
//	}
//	public Date calculDateEcheance(Integer report, Integer finDeMois) {
//		TaTCPaiementDAO taTCPaiementDAO = new TaTCPaiementDAO();
//		TaTCPaiement typeCP = taTCPaiementDAO.findByCode(TaTCPaiement.C_CODE_TYPE_AVOIR);
//		TaCPaiement conditionDoc = null;
//		TaCPaiement conditionTiers = null;
//		TaCPaiement conditionSaisie = null;
//		
//		if(typeCP!=null) conditionDoc = typeCP.getTaCPaiement();
//		if(getTaTiers()!=null) conditionTiers = getTaTiers().getTaCPaiement();
//
//		if(report!=null || finDeMois!=null) { 
//			conditionSaisie = new TaCPaiement();
//			if(report!=null)
//				conditionSaisie.setReportCPaiement(report);
//			if(finDeMois!=null)
//				conditionSaisie.setFinMoisCPaiement(finDeMois);
//		}
//		
//		//on applique toute les conditions par ordre décroissant de priorité, la derniere valide est conservée
//		Date nouvelleDate = getDateDocument();
//		if(conditionDoc!=null) {
//			nouvelleDate = conditionDoc.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionTiers!=null) {
//			nouvelleDate = conditionTiers.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionSaisie!=null) {
//			nouvelleDate = conditionSaisie.calculeNouvelleDate(getDateDocument());
//		}
//		setDateEchDocument(nouvelleDate);
//		return nouvelleDate;
//	}


	public BigDecimal calculResteARegler(){
		//return BigDecimal.valueOf(100);
		return getNetTtcCalc().subtract(calculSommeAvoirs());
	}
	
	
	public BigDecimal calculSommeAffectationAvecDocument(TaAvoir taDocument){
		BigDecimal sommeAvoir = new BigDecimal(0);
		for (TaRAvoir taRAvoir : getTaRAvoirs()) {
			if(taRAvoir.getTaAvoir()!=null && (taRAvoir.getEtat()&IHMEtat.suppression)==0 && taDocument!=null && taRAvoir.getTaAvoir()!=null &&
					taRAvoir.getTaAvoir().getCodeDocument().equals(taDocument.getCodeDocument()))
				sommeAvoir=sommeAvoir.add(taRAvoir.getAffectation());
		}
		return sommeAvoir;
	}
	
	public BigDecimal calculSommeAvoirs(){
		BigDecimal sommeAvoir = new BigDecimal(0);
		for (TaRAvoir taRAvoir : getTaRAvoirs()) {
			if((taRAvoir.getEtat()&IHMEtat.suppression)==0)
				sommeAvoir=sommeAvoir.add(taRAvoir.getAffectation());
		}
		return sommeAvoir;
	}

//	@Transient
//	public BigDecimal getResteARegler() {
//		return resteARegler;
//	}
//	public void setResteARegler(BigDecimal resteARegler) {
//		this.resteARegler = resteARegler;
//	}

	public void addRAvoir(TaRAvoir taRAvoir){
		if(!this.getTaRAvoirs().contains(taRAvoir))
			this.getTaRAvoirs().add(taRAvoir);		
	}
	public void removeRAvoir(TaRAvoir taRAvoir){
		this.getTaRAvoirs().remove(taRAvoir);	
	}

	@Transient
	public int getEtatDeSuppression() {
		return etatDeSuppression;
	}
	
	@Transient
	public void setEtatDeSuppression(int etatDeSuppression) {
		etatDeSuppression = etatDeSuppression;
	}

	
	@Transient
	public BigDecimal getResteAAffecter() {
		resteAAffecter=getNetTtcCalc().subtract(calculSommeAvoirs());
		return resteAAffecter;
	}

	public void setResteAAffecter(BigDecimal resteAAffecter) {
		if(resteAAffecter==null || this.resteAAffecter==null || this.resteAAffecter.compareTo(resteAAffecter)!=0){
			this.resteAAffecter = resteAAffecter;
		}
	}

	public BigDecimal calculAffectationEnCoursReel(TaAvoir taDocument){
		BigDecimal retour = BigDecimal.valueOf(0);

			Iterator<TaRAvoir> ite = taRAvoirs.iterator();
			boolean trouve = false;
			TaRAvoir taRAvoir = null;
			while(ite.hasNext() && !trouve) {
				taRAvoir = ite.next();
				if(taRAvoir!=null && taRAvoir.getTaAvoir().getCodeDocument().equals(taDocument.getCodeDocument())) {
					retour = taRAvoir.getAffectation();
					trouve = true;
				}
			}

		return retour;
	}
	
	public BigDecimal calculAffectationEnCoursReel(TaFacture taDocument){
		BigDecimal retour = BigDecimal.valueOf(0);

			Iterator<TaRAvoir> ite = taRAvoirs.iterator();
			boolean trouve = false;
			TaRAvoir taRAvoir = null;
			while(ite.hasNext() && !trouve) {
				taRAvoir = ite.next();
				if(taRAvoir!=null && taRAvoir.getTaFacture().getCodeDocument().equals(taDocument.getCodeDocument())) {
					retour = taRAvoir.getAffectation();
					trouve = true;
				}
			}

		return retour;
	}
	
	public BigDecimal calculAffectationEnCoursReel(TaTicketDeCaisse taDocument){
		BigDecimal retour = BigDecimal.valueOf(0);

			Iterator<TaRAvoir> ite = taRAvoirs.iterator();
			boolean trouve = false;
			TaRAvoir taRAvoir = null;
			while(ite.hasNext() && !trouve) {
				taRAvoir = ite.next();
				if(taRAvoir!=null && taRAvoir.getTaFacture().getCodeDocument().equals(taDocument.getCodeDocument())) {
					retour = taRAvoir.getAffectation();
					trouve = true;
				}
			}

		return retour;
	}
	
	public BigDecimal calculAffectationEnCours(TaAvoir taDocument){
		BigDecimal retour = BigDecimal.valueOf(0);
		if(this.getIdDocument()==0) {
			//return getAffectation();
			Iterator<TaRAvoir> ite = taRAvoirs.iterator();
			boolean trouve = false;
			TaRAvoir taRAvoir = null;
			while(ite.hasNext() && !trouve) {
				taRAvoir = ite.next();
				if(taRAvoir!=null && taRAvoir.getTaAvoir().getCodeDocument().equals(taDocument.getCodeDocument())) {
					retour = taRAvoir.getAffectation();
					trouve = true;
				}
			}
		} else
			return BigDecimal.valueOf(0);
		return retour;
	}
	
	public BigDecimal calculAffectationTotale(TaRAvoir taRAvoir){
		BigDecimal retour = BigDecimal.valueOf(0);
		for (TaRAvoir taRAvoirTmp : taRAvoirs) {
			if(taRAvoir==null || taRAvoir.getId()!=taRAvoirTmp.getId())
				retour=retour.add(taRAvoirTmp.getAffectation());
		}
		return retour;
	}
	public BigDecimal calculAffectationTotale(){
		BigDecimal retour = BigDecimal.valueOf(0);
		for (TaRAvoir taRAvoirTmp : taRAvoirs) {
			retour=retour.add(taRAvoirTmp.getAffectation());
		}
		return retour;
	}





	@Transient
	public BigDecimal getRegleCompletDocument() {
		// TODO Auto-generated method stub
		return calculSommeAvoirs();
	}

	@Transient
	public BigDecimal getResteAReglerComplet() {
		resteAReglerComplet=getNetTtcCalc().subtract(calculSommeAvoirs());
		return resteAReglerComplet;
	}



	@Transient
	public void setRegleCompletDocument(BigDecimal regleCompletDocument) {
		// TODO Auto-generated method stub
		this.regleCompletDocument = regleCompletDocument;
	}

	@Transient
	public void setResteAReglerComplet(BigDecimal resteAReglerComplet) {
		// TODO Auto-generated method stub
		this.resteAReglerComplet = resteAReglerComplet;
	}

	@Transient
	public void setTypeDocument(String typeDocument) {
		// TODO Auto-generated method stub
		this.typeDocument=TYPE_DOC;
	}

	
	
	@Transient
	public List<ILigneDocumentTiers> getLignesGeneral(){
		return this.lignes;
	}
	
	@Override
	@JsonIgnore
	public void setTaInfosDocument(IInfosDocumentTiers infosDocumentTiers) {
		this.taInfosDocument =  (TaInfosAvoir) infosDocumentTiers;
		
	}

	
	/****** calculs */
	
	public void calculeTvaEtTotaux(){
		calculTvaTotal();
		calculTotaux();
	}
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 * et mise à jour du montant de la TVA dans les lignes du document
	 */
	public void calculTvaTotal() {
		calculMontantLigneDocument();
		calculLignesTva();
		dispatcherTvaAvantRemise();
		dispatcherTva();
	}
	
	/**
	 * Calcul des totaux de la facture
	 */
	public void calculTotaux() {
		
//			    MT_TVA Numeric(15,2),
			setMtHtCalc(new BigDecimal(0));
			setNetHtCalc(new BigDecimal(0));
			setMtTtcCalc(new BigDecimal(0));
			setMtTtcAvantRemiseGlobaleCalc(new BigDecimal(0));
			for (Object ligne : lignes) {
				if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H) && ((TaLAvoir)ligne).getTaArticle()!=null) {
					if(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument()!=null) {
						setNetHtCalc(getNetHtCalc().add(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument()));
					}if(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
						setMtTtcCalc(getMtTtcCalc().add(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument()));
					if(((TaLAvoir)ligne).getMtHtLDocument()!=null)
						setMtHtCalc(getMtHtCalc().add(((TaLAvoir)ligne).getMtHtLDocument()));
					if(((TaLAvoir)ligne).getMtTtcLDocument()!=null)
						setMtTtcAvantRemiseGlobaleCalc(getMtTtcAvantRemiseGlobaleCalc().add(((TaLAvoir)ligne).getMtTtcLDocument()));
				}
				
			}
			setRemHtDocument(getMtHtCalc().subtract(getNetHtCalc())); // passage ejb 3/8/2016
			setNetTvaCalc(getMtTtcCalc().subtract(getNetHtCalc()));
			BigDecimal tva = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tva = tva.add(ligneTva.getMtTva());
			}
			if(tva.compareTo(getNetTvaCalc())!=0) {
				logger.error("Montant de la TVA incorrect : "+getNetTvaCalc()+" ** "+tva);
			}
			BigDecimal tvaAvantRemise = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tvaAvantRemise = tvaAvantRemise.add(ligneTva.getMtTvaAvantRemise());
			}
			setMtTvaCalc(tvaAvantRemise);
			setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP)));
			/*
			 * remise HT déjà calculée dans dispatcherTva()
			 */
			setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()).setScale(2,BigDecimal.ROUND_HALF_UP));
			setNetAPayer(getNetTtcCalc().subtract(getRegleDocument()));
	}

	
	/**
	 * Lance la fonction de calcul du montant sur chacunes des lignes du document.
	 */
	public void calculMontantLigneDocument() {
		for (Object ligne : lignes) {
			((TaLAvoir)ligne).calculMontant();
		}
	}
	
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 */
	public void calculLignesTva() {
		Map<String,BigDecimal> montantTotalHt = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtc = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalHtAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtcAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVA = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVAAvantRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> tauxTVA = new HashMap<String,BigDecimal>();
		Map<String,Integer> nbLigne = new HashMap<String,Integer>();
		Map<String,String> libelleLignesTVA = new HashMap<String,String>();
		String codeTVA = null;
//		TaTvaDAO taTvaDAO = new TaTvaDAO();
		
		/*
		 * calcul de la TVA different en fonction de la propriete TTC
		 */
		BigDecimal ttcLigne = null;
		BigDecimal htLigne = null;
		for (Object ligne : lignes) {
			//en commentaire pour ne pas refaire les calculs pendants les editions, 
			//((TaLAvoir)ligne).calculMontant();
			codeTVA = ((TaLAvoir)ligne).getCodeTvaLDocument();
			if(codeTVA!=null && !codeTVA.equals("")) {
				ttcLigne = ((TaLAvoir)ligne).getMtTtcLDocument();
				htLigne = ((TaLAvoir)ligne).getMtHtLDocument();
				if(montantTotalHt.containsKey(codeTVA)) {
					montantTotalTtc.put(codeTVA,montantTotalTtc.get(codeTVA).add(ttcLigne));
					montantTotalHt.put(codeTVA,montantTotalHt.get(codeTVA).add(htLigne));
					montantTotalTtcAvecRemise.put(codeTVA,montantTotalTtcAvecRemise.get(codeTVA).add(ttcLigne));
					montantTotalHtAvecRemise.put(codeTVA,montantTotalHtAvecRemise.get(codeTVA).add(htLigne));
					nbLigne.put(codeTVA,nbLigne.get(codeTVA)+1);
				} else {
					montantTotalTtc.put(codeTVA,ttcLigne);
					montantTotalHt.put(codeTVA,htLigne);
					montantTotalTtcAvecRemise.put(codeTVA,ttcLigne);
					montantTotalHtAvecRemise.put(codeTVA,htLigne);
					tauxTVA.put(codeTVA,((TaLAvoir)ligne).getTauxTvaLDocument());
					nbLigne.put(codeTVA,1);
					libelleLignesTVA.put(codeTVA, ((TaLAvoir)ligne).getLibTvaLDocument());
//					libelleLignesTVA.put(codeTVA, ((TaLAvoir)ligne).getLibLDocument());
				}
			}
		}

		for (String codeTva : montantTotalTtc.keySet()) {
			//les 2 maps ont les meme cles
			BigDecimal mtTtcTotal = montantTotalTtc.get(codeTva);
			BigDecimal mtHtTotal = montantTotalHt.get(codeTva);
			BigDecimal tva =null;
			//traitement tva avant remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVAAvantRemise.put(codeTva, tva);
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVAAvantRemise.put(codeTva, tva );
			}
			//traitement remise
			if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(     mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100))  )       ));
//				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract(    mtHtTotal.multiply( (txRemHtDocument.divide(new BigDecimal(100))))     ) ) ;
				BigDecimal valeurInterTTC=mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(valeurInterTTC )) ;
				BigDecimal valeurInterHT=mtHtTotal.multiply( txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract( valeurInterHT )) ;
				montantTotalTtcAvecRemise.put(codeTva, mtTtcTotal);
				montantTotalHtAvecRemise.put(codeTva, mtHtTotal);
			} 
			//traitement tva après remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVA.put(codeTva, tva);
				montantTotalHtAvecRemise.put(codeTva, mtTtcTotal.subtract(tva));
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVA.put(codeTva, tva );
				montantTotalTtcAvecRemise.put(codeTva, mtHtTotal.add(tva));
			}
		}

		lignesTVA.clear();
		for (String codeTva : mtTVA.keySet()) {
			LigneTva ligneTva = new LigneTva();
			ligneTva.setCodeTva(codeTva);
			ligneTva.setTauxTva(tauxTVA.get(codeTva));
			ligneTva.setMtTva(mtTVA.get(codeTva));
			ligneTva.setMtTvaAvantRemise(mtTVAAvantRemise.get(codeTva));
			ligneTva.setMontantTotalHt(montantTotalHt.get(codeTva));
			ligneTva.setMontantTotalTtc(montantTotalTtc.get(codeTva));
			ligneTva.setMontantTotalHtAvecRemise(montantTotalHtAvecRemise.get(codeTva));
			ligneTva.setMontantTotalTtcAvecRemise(montantTotalTtcAvecRemise.get(codeTva));
//			ligneTva.setLibelle(taTvaDAO.findByCode(codeTva).getLibelleTva());
			ligneTva.setLibelle(libelleLignesTVA.get(codeTva));
			ligneTva.setNbLigneDocument(nbLigne.get(codeTva));
			lignesTVA.add(ligneTva);
		}
		
		//dispatcherTva();
	}

	public void dispatcherTvaAvantRemise() {
		BigDecimal tvaLigne = new BigDecimal(0);
		
		boolean derniereLignePourTVA = false;

		for (LigneTva ligneTva : lignesTVA) {
			if (ligneTva.getMtTvaAvantRemise()!=null) {
				int lignepasse=1;
				BigDecimal tvaAvantRemiseTmp = ligneTva.getMtTvaAvantRemise();
				
				derniereLignePourTVA = false;

				for (Object ligne : lignes) {
					if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H)&& 
							((TaLAvoir)ligne).getMtHtLDocument()!=null && ((TaLAvoir)ligne).getMtHtLDocument().signum()!=0) {
						if(((TaLAvoir)ligne).getCodeTvaLDocument()!=null&&((TaLAvoir)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//							if (ligneTva.getMontantTotalHt().signum()==0) 
//								tvaLigne = ((TaLAvoir)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
//							else {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//									tvaLigne = tvaAvantRemiseTmp;
//								else {
//									if(ttc==1){
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()).signum()<=0)
//											tvaLigne=BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLAvoir)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//									else{
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalHt()).signum()<=0)
//											tvaLigne =BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLAvoir)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHt()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//								}
//							}
							tvaLigne = prorataMontantTVALigneAvantRemise((TaLAvoir)ligne, ligneTva);
							
							tvaAvantRemiseTmp =  tvaAvantRemiseTmp.subtract(tvaLigne);
							
							if(tvaAvantRemiseTmp.compareTo(resteTVA(ligneTva))==0) {
								//Le reste de TVA a traiter correspond a la difference d'arrondi,
								//les lignes de documents suivantes (s'il en reste) ont un montant HT nul
								//c'est donc la derniere ligne sur laquelle on peut mettre de la TVA => on ajoute le reliquat
								tvaLigne = tvaLigne.add(tvaAvantRemiseTmp);
								derniereLignePourTVA = true;
							}

							if(ttc==1)
								((TaLAvoir)ligne).setMtHtLDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(tvaLigne));
							else
								((TaLAvoir)ligne).setMtTtcLDocument(((TaLAvoir)ligne).getMtHtLDocument().add(tvaLigne));

							lignepasse++;
						}
					}

				}
			}
		}
	}

	//passage ejb => dans TaAvoirService
		/**
		 * Repartir le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
		 */
		public void dispatcherTva() {
			
			BigDecimal tvaLigne = new BigDecimal(0); //Montant de TVA de la ligne du document courante
			BigDecimal totalTemp = new BigDecimal(0); //Somme des montants HT des lignes du document (mis à jour au fil des iterations)

			boolean derniereLignePourTVA = false;

			for (Object ligne : lignes) {
				if(((TaLAvoir)ligne).getMtHtLDocument()!=null)
					totalTemp = totalTemp.add(((TaLAvoir)ligne).getMtHtLDocument());
			}
			if(totalTemp!=null && txRemHtDocument!=null)
				setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));	
			
			for (TaLAvoir ligne : getLignes()) {
				if(txRemHtDocument!=null && txRemHtDocument.signum()>0 && ligne.getMtHtLDocument()!=null  && ligne.getMtTtcLDocument()!=null) {
					if(ttc==1){
						((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(((TaLAvoir)ligne).getMtTtcLDocument()
								.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
						((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument());
						
					}else{
						((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().subtract(((TaLAvoir)ligne).getMtHtLDocument()
								.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
						((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument());	
					}
				}
			}
			
			
			//pour chaque ligne/code TVA
			for (LigneTva ligneTva : lignesTVA) { 

				if (ligneTva.getMtTva()!=null) {
					int lignepasse=1;
					BigDecimal tvaTmp = ligneTva.getMtTva(); //montant total de la TVA pour cette ligne/code TVA décrémenter du montant de TVA des lignes du documents deja traite
					BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
					BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());
					BigDecimal tvaCalcule = new BigDecimal(0);
					
					//TaLAvoir derniereLigneFactureAvecMontantDifferentDeZero = null;
					derniereLignePourTVA = false;

					//pour chaque ligne du document
					for (Object ligne : lignes) {
						//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
						if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H)) {
							//si le code TVA de la ligne correspond à celui traite (boucle superieure)
							if(((TaLAvoir)ligne).getCodeTvaLDocument()!=null&&((TaLAvoir)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
								tvaLigne = prorataMontantTVALigne((TaLAvoir)ligne, ligneTva);
								
								tvaTmp =  tvaTmp.subtract(tvaLigne);
								if(tvaTmp.compareTo(resteTVA(ligneTva))==0 && !derniereLignePourTVA) {
									//Le reste de TVA a traiter correspond a la difference d'arrondi,
									//les lignes de documents suivantes (s'il en reste) ont un montant HT nul
									//c'est donc la derniere ligne sur laquelle on peut mettre de la TVA => on ajoute le reliquat
									tvaLigne = tvaLigne.add(tvaTmp);
									derniereLignePourTVA = true;
								}
								totalTemp = totalTemp.add(((TaLAvoir)ligne).getMtHtLDocument());

								//===Correction des totaux après remise de la ligne du document
								if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
									} else {
										if(ttc==1){
											((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(((TaLAvoir)ligne).getMtTtcLDocument()
													.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
											((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument().divide(BigDecimal.valueOf(1).add(
													 (((TaLAvoir)ligne).getTauxTvaLDocument().divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(3,BigDecimal.ROUND_HALF_UP)
												)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP));
											
										}else{
											((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().subtract(((TaLAvoir)ligne).getMtHtLDocument()
													.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
											tvaCalcule = (((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument().
											multiply(((TaLAvoir)ligne).getTauxTvaLDocument().divide(new BigDecimal(100),MathContext.DECIMAL128))).setScale(2,BigDecimal.ROUND_HALF_UP);
											((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument().add(tvaCalcule));	
										}
//										((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(((TaLAvoir)ligne).getMtTtcLDocument()
//												.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
									}

								} else {
									if(ttc==1)
										if  (lignepasse>= ligneTva.getNbLigneDocument()) {
											((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
										}else{
											((TaLAvoir)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtTtcLDocument().subtract(tvaLigne));
										}
									else
										if  (lignepasse>= ligneTva.getNbLigneDocument()) {
											((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
										}else {
											((TaLAvoir)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAvoir)ligne).getMtHtLDocument().add(tvaLigne));
										}

								}
//								ttcTmp =  ttcTmp.subtract(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument());
//								htTmp =  htTmp.subtract(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument());
								if(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
									ttcTmp =  ttcTmp.subtract(((TaLAvoir)ligne).getMtTtcLApresRemiseGlobaleDocument());
								if(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument()!=null)
									htTmp =  htTmp.subtract(((TaLAvoir)ligne).getMtHtLApresRemiseGlobaleDocument());
								lignepasse++;
							}
						}
						setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));						

////						setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						

					}
				}

			}


		}
		
		/**
		 * Calcule le montant de TVA d'une ligne du document par rapport au montant total de TVA pour un code TVA donnee <b>avant remise</b>
		 * @param ligne
		 * @param ligneTva
		 * @return
		 */
		public BigDecimal prorataMontantTVALigneAvantRemise(TaLAvoir ligne, LigneTva ligneTva) {
			BigDecimal tvaLigne = new BigDecimal(0);
			
			if (ligneTva.getMontantTotalHt().signum()==0) 
				tvaLigne = ((TaLAvoir)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
			else {
//				if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//					tvaLigne = tvaAvantRemiseTmp;
//				else {
					if(ttc==1){
						if(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()).signum()<=0)
							tvaLigne=BigDecimal.valueOf(0);
						else
							tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLAvoir)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
					}
					else{
						if(LibCalcul.arrondi(ligneTva.getMontantTotalHt()).signum()<=0)
							tvaLigne =BigDecimal.valueOf(0);
						else
							tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLAvoir)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHt()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
					}
//				}
			}
			return tvaLigne;
		}	

		/**
		 * Calcule le montant de TVA qui reste après répartion de la TVA sur les lignes au prorata du monant HT.
		 * Ce montant de TVA restant de 1 ou 2 centimes provient des arrondis successifs.
		 * @param ligneTva
		 * @return
		 */
		public BigDecimal resteTVAAvantRemise(LigneTva ligneTva) {
			BigDecimal resteTVA = ligneTva.getMtTva();
			for (Object ligne : lignes) {
				//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
				if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H)) {
					//si le code TVA de la ligne correspond à celui traite (boucle superieure)
					if(((TaLAvoir)ligne).getCodeTvaLDocument()!=null&&((TaLAvoir)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
						resteTVA = resteTVA.subtract(prorataMontantTVALigneAvantRemise(((TaLAvoir)ligne),ligneTva));
					}
				}
			}
			return resteTVA;
		}
		
		/**
		 * Calcule le montant de TVA qui reste après répartion de la TVA sur les lignes au prorata du monant HT.
		 * Ce montant de TVA restant de 1 ou 2 centimes provient des arrondis successifs.
		 * @param ligneTva
		 * @return
		 */
		public BigDecimal resteTVA(LigneTva ligneTva) {
			BigDecimal resteTVA = ligneTva.getMtTva();
			for (Object ligne : lignes) {
				//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
				if(((TaLAvoir)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H)
						&& ((TaLAvoir)ligne).getMtHtLDocument()!=null && ((TaLAvoir)ligne).getMtHtLDocument().signum()!=0) {
					//si le code TVA de la ligne correspond à celui traite (boucle superieure)
					if(((TaLAvoir)ligne).getCodeTvaLDocument()!=null&&((TaLAvoir)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
						resteTVA = resteTVA.subtract(prorataMontantTVALigne(((TaLAvoir)ligne),ligneTva));
					}
				}
			}
			return resteTVA;
		}

		/**
		 * Calcule le montant de TVA d'une ligne du document par rapport au montant total de TVA pour un code TVA donnee
		 * @param ligne - 
		 * @param ligneTva
		 * @return
		 */
		public BigDecimal prorataMontantTVALigne(TaLAvoir ligne, LigneTva ligneTva) {
			BigDecimal tvaLigne = new BigDecimal(0);
			
			if (ligneTva.getMontantTotalHt().signum()==0) 
				tvaLigne = ((TaLAvoir)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
			else {
//				if  (lignepasse>= ligneTva.getNbLigneDocument()) //si c'est la deniere ligne, on prend tout ce qui reste
//					tvaLigne = tvaTmp;
//				else {
					if(ttc==1){ //si saisie TTC
						if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
							tvaLigne=BigDecimal.valueOf(0);
						else
							tvaLigne = (ligneTva.getMtTva().multiply(((TaLAvoir)ligne).getMtTtcLDocument())).divide(LibCalcul.
									arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
					}
					else{
						if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
							tvaLigne =BigDecimal.valueOf(0);
						else
							tvaLigne = (ligneTva.getMtTva().multiply(((TaLAvoir)ligne).getMtHtLDocument())).divide(LibCalcul.
									arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
					}
//				}
			}
			return tvaLigne;
		}
		
		
		
		
		public Object cloneCentralisation() throws CloneNotSupportedException {
			TaAvoir doc = new TaAvoir(false);
			try {
				doc.setIdDocument(0);
				doc.setVersion(version);
				//doc.setTaTPaiement(taTPaiement);
				doc.setTaTiers(taTiers);
				//doc.setTaCPaiement(taCPaiement);
				doc.setCodeDocument("");
				doc.setDateDocument(dateDocument);
				doc.setDateEchDocument(dateEchDocument);
				doc.setDateLivDocument(dateLivDocument);
				doc.setLibelleDocument("");

				doc.setRemHtDocument(remHtDocument);
				doc.setTxRemHtDocument(txRemHtDocument);
				doc.setRemTtcDocument(remTtcDocument);
				doc.setTxRemTtcDocument(txRemTtcDocument);
				doc.setNbEDocument(nbEDocument);
				doc.setTtc(ttc);
				doc.setDateExport(dateExport);
				doc.setCommentaire(commentaire);
				doc.setQuiCree(quiCree);
				doc.setQuandCree(quandCree);
				doc.setQuiModif(quiModif);
				doc.setQuandModif(quandModif);
				doc.setIpAcces(ipAcces);
				doc.setVersionObj(versionObj);
				
				doc.setNbDecimalesPrix(nbDecimalesPrix);
				doc.setNbDecimalesQte(nbDecimalesQte);
				
				TaInfosAvoir infos = getTaInfosDocument().clone();
				infos.setTaDocument(doc);
				doc.setTaInfosDocument(infos);
			} catch(Exception cnse) {
				logger.error("",cnse);
			}
			// on renvoie le clone
			return doc;
		}

		
  	
		public TaLAvoir contientMemeParametreCompte(TaLAvoir ligneCompare){
			for (TaLAvoir obj : getLignes()) {
				if(obj.equalParamTva(ligneCompare))	return obj;	
				}
			return null;
		}
		
		@OneToOne(fetch = FetchType.EAGER, cascade = {CascadeType.ALL} , orphanRemoval=true )
		@JoinColumn(name = "id_mise_a_disposition")
		public TaMiseADisposition getTaMiseADisposition() {
			return taMiseADisposition;
		}

		public void setTaMiseADisposition(TaMiseADisposition taMiseADisposition) {
			this.taMiseADisposition = taMiseADisposition;
		}

		@Temporal(TemporalType.TIMESTAMP)
		@Column(name = "date_export")
		@LgrHibernateValidated(champBd = "date_export",table = "ta_avoir",champEntite="dateExport", clazz = TaAvoir.class)
		public Date getDateExport() {
			return dateExport;
		}

		public void setDateExport(Date dateExport) {
			this.dateExport = dateExport;
		}

//		@ManyToOne(fetch = FetchType.EAGER)
//		@JoinColumn(name = "id_etat")
//		@LgrHibernateValidated(champBd = "id_etat",table = "ta_etat",champEntite="TaEtat.idEtat", clazz = TaEtat.class)
//		public TaEtat getTaEtat() {
//			return this.taEtat;
//		}
//
//		public void setTaEtat(TaEtat taEtat) {
//			this.taEtat = taEtat;
//		}

		
		@Column(name = "date_verrouillage")
		public Date getDateVerrouillage() {
			return dateVerrouillage;
		}

		public void setDateVerrouillage(Date dateVerrouillage) {
			this.dateVerrouillage=dateVerrouillage;
		}

		@Column(name = "mouvementer_stock")
		public Boolean getMouvementerStock() {
			return mouvementerStock;
		}

		public void setMouvementerStock(Boolean mouvementerStock) {
			this.mouvementerStock = mouvementerStock;
		}
		
		@Column(name = "gestion_lot")
		public Boolean getGestionLot() {
			return gestionLot;
		}

		public void setGestionLot(Boolean gestionLot) {
			this.gestionLot = gestionLot;
		}


		
		
		@Column(name = "nb_decimales_qte")
		public Integer getNbDecimalesQte() {
			return nbDecimalesQte;
		}

		public void setNbDecimalesQte(Integer nbDecimalesQte) {
			this.nbDecimalesQte = nbDecimalesQte;
		}

		@Column(name = "nb_decimales_prix")
		public Integer getNbDecimalesPrix() {
			return nbDecimalesPrix;
		}

		public void setNbDecimalesPrix(Integer nbDecimalesPrix) {
			this.nbDecimalesPrix = nbDecimalesPrix;
		}


		@PrePersist
		public void PrePersist() throws Exception{
			verifInfoDocument();
		}
		
		@PreUpdate
		public void PreUpdate() throws Exception{
			verifInfoDocument();
		}

		
		@ManyToOne(fetch = FetchType.EAGER)
		@JoinColumn(name = "id_etat")
		@LgrHibernateValidated(champBd = "id_etat",table = "ta_etat",champEntite="TaEtat.idEtat", clazz = TaEtat.class)
		public TaEtat getTaEtat() {
			return this.taEtat;
		}
	
		public void setTaEtat(TaEtat taEtat) {
//			this.taEtat = taEtat;
		}

		
		@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAvoir", orphanRemoval = true)
		public Set<TaREtat> getTaREtats() {
			return this.taREtats;
		}

		public void setTaREtats(Set<TaREtat> taREtats) {
			this.taREtats = taREtats;
		}
		

		
		@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAvoir", orphanRemoval = true)
		public Set<TaHistREtat> getTaHistREtats() {
			return this.taHistREtats;
		}

		public void setTaHistREtats(Set<TaHistREtat> taHistREtats) {
			this.taHistREtats = taHistREtats;
		}

		
		public void addREtat(TaEtat taEtat) {
			TaHistREtat hist=new TaHistREtat();
			TaREtat rEtat=getTaREtat();
			if(rEtat!=null) {
				hist.setTaEtat(getTaREtat().getTaEtat());
				hist.setTaAvoir(this);
				this.getTaHistREtats().add(hist);
			}else rEtat=new TaREtat();
			
			rEtat.setTaEtat(taEtat);
			rEtat.setTaAvoir(this);
			this.setTaREtat(rEtat);
			this.getTaREtats().add(rEtat);
		}

		@Override
		public Boolean gereStock() {
			// TODO Auto-generated method stub
			return this.getTaGrMouvStock()!=null;
		}

		
		
		@OneToMany(cascade = CascadeType.ALL,fetch = FetchType.LAZY, mappedBy = "taAvoir", orphanRemoval=true)
		public Set<TaRReglementLiaison> getTaRReglementLiaisons() {
			return taRReglementLiaisons;
		}

		public void setTaRReglementLiaisons(Set<TaRReglementLiaison> taRReglementLiaisons) {
			this.taRReglementLiaisons = taRReglementLiaisons;
		}
		
		public void addRReglementLiaison(TaRReglementLiaison taReglementLiaison){
			if(!this.getTaRReglementLiaisons().contains(taReglementLiaison)){
				taReglementLiaison.setTaAvoir(this);
				this.getTaRReglementLiaisons().add(taReglementLiaison);	
			}
		}
		public void removeReglementLiaison(TaRReglementLiaison taRReglementLiaison){
			this.getTaRReglementLiaisons().remove(taRReglementLiaison);
		}

		@Transient
		public String getNumeroCommandeFournisseur() {
			// TODO Auto-generated method stub
			return null;
		}
		
		@Column(name = "utilise_unite_saisie")
		public Boolean getUtiliseUniteSaisie() {
			return utiliseUniteSaisie;
		}

		public void setUtiliseUniteSaisie(Boolean utiliseUniteSaisie) {
			this.utiliseUniteSaisie = utiliseUniteSaisie;
		}

		@Column(name = "mouvementer_crd")
		public Boolean getMouvementerCRD() {
			return mouvementerCRD;
		}

		public void setMouvementerCRD(Boolean mouvementerCRD) {
			this.mouvementerCRD = mouvementerCRD;
		}

}
