package fr.legrain.document.model;
// Generated Apr 9, 2009 2:12:06 PM by Hibernate Tools 3.2.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OrderBy;
import javax.persistence.PreRemove;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.persistence.Version;

import org.apache.log4j.Logger;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import fr.legrain.droits.model.TaUtilisateur;
import fr.legrain.tiers.model.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaFlash generated by hbm2java
 */
@Entity
@Table(name = "ta_flash", uniqueConstraints = @UniqueConstraint(columnNames = "code_flash"))

public class TaFlash  implements  java.io.Serializable  {

	private static final long serialVersionUID = -3124862746875290086L;
	
	public static final String TYPE_DOC = "Flash";
	public static final String PATH_ICONE_COULEUR = "dashboard/flash.svg";
	public static final String PATH_ICONE_BLANC = "";
	public static final String PATH_ICONE_GRIS = "";
	

//	private String version;
	private int idFlash;

	private TaTiers taTiers;
	private String codeFlash;
	private String numeroCommandeFournisseur;
	private Date dateFlash;
	private Date dateTransfert;
	private String libelleFlash;
	protected Integer versionObj;
//	protected String quiCree;
//	protected Date quandCree;
//	protected String quiModif;
//	protected Date quandModif;
	protected TaTDoc taTDoc;
	protected TaGroupePreparation taGroupePreparation; 
	private String commentaire;
//	private String ipAcces;
	private String codeTiers;
	private String codeTDoc;
	private Integer idUtilisateur;
	private String emailUtilisateur ;
	private String  username ;
	private TaREtat taREtat;
	@Transient
	private Boolean accepte = false;
	private Boolean gestionLot = false;
	protected  List<TaLFlash> lignes = null;
	protected Integer nbDecimalesQte;
	private Set<TaREtat> taREtats = new HashSet<TaREtat>(0);
	private Set<TaHistREtat> taHistREtats = new HashSet<TaHistREtat>(0);
	private Set<TaRDocument> taRDocuments = new HashSet<TaRDocument>(0);
	
	@Transient
	static Logger logger = Logger.getLogger(TaFlash.class.getName());

	public TaFlash() {
		lignes=new LinkedList<TaLFlash>(); 
	}
	
	public TaFlash(int idFlash) {
		this.idFlash = idFlash;
	}

	
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "id_flash", unique = true, nullable = false)
	public int getIdFlash() {
		return this.idFlash;
	}

	public void setIdFlash(int idFlash) {
		this.idFlash = idFlash;
	}



	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_tiers")
	public TaTiers getTaTiers() {
		return this.taTiers;
	}

	public void setTaTiers(TaTiers taTiers) {
		this.taTiers = taTiers;
	}


	@Column(name = "code_flash", unique = true, length = 20)
	public String getCodeFlash() {
		return this.codeFlash;
	}

	public void setCodeFlash(String codeFlash) {
		this.codeFlash = codeFlash;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_flash", length = 19)
	public Date getDateFlash() {
		return this.dateFlash;
	}

	public void setDateFlash(Date dateFacture) {
		this.dateFlash = dateFacture;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_transfert", length = 19)
	public Date getDateTransfert() {
		return this.dateTransfert;
	}

	public void setDateTransfert(Date dateTransfert) {
		this.dateTransfert = dateTransfert;
	}

	@Column(name = "libelle_flash")
	public String getLibelleFlash() {
		return this.libelleFlash;
	}

	public void setLibelleFlash(String libelleFlash) {
		this.libelleFlash = libelleFlash;
	}

	


	@Column(name = "username")
	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}


	@Column(name = "commentaire", length = 2000)
	public String getCommentaire() {
		return this.commentaire;
	}

	public void setCommentaire(String commentaire) {
		if(this.commentaire==null||(commentaire!=null &&
				this.commentaire.compareTo(commentaire)!=0)){
			this.commentaire = commentaire;			
		}
	}

	


	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taFlash", orphanRemoval=true)
	@Fetch(FetchMode.SUBSELECT)
	public List<TaLFlash> getLignes() {
		return this.lignes;
	}

	public void setLignes(List<TaLFlash> taLFlash) {
		this.lignes = taLFlash;
	}
	






	

	@Transient
	public String getTypeDocument() {
		// TODO Auto-generated method stub
		return TYPE_DOC;
	}
	



	
	@Column(name = "num_cmd_fournisseur")
	public String getNumeroCommandeFournisseur() {
		return numeroCommandeFournisseur;
	}
	public void setNumeroCommandeFournisseur(String numeroCommandeFournisseur) {
		this.numeroCommandeFournisseur = numeroCommandeFournisseur;
	}
	
	@Column(name = "gestion_lot")
	public Boolean getGestionLot() {
		return gestionLot;
	}
	public void setGestionLot(Boolean gestionLot) {
		this.gestionLot = gestionLot;
	}

	
	@ManyToOne(fetch = FetchType.EAGER, cascade = {/*CascadeType.PERSIST, CascadeType.MERGE,*/ CascadeType.REFRESH})
	@JoinColumn(name = "id_groupe_preparation")
	public TaGroupePreparation getTaGroupePreparation() {
		return taGroupePreparation;
	}
	public void setTaGroupePreparation(TaGroupePreparation taGroupePreparation) {
		this.taGroupePreparation = taGroupePreparation;
	}
	
	
	@Column(name = "nb_decimales_qte")
	public Integer getNbDecimalesQte() {
		return nbDecimalesQte;
	}

	public void setNbDecimalesQte(Integer nbDecimalesQte) {
		this.nbDecimalesQte = nbDecimalesQte;
	}



	@Version
	@Column(name = "version_obj")
	public Integer getVersionObj() {
		return this.versionObj;
	}

	public void setVersionObj(Integer versionObj) {
		this.versionObj = versionObj;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_t_doc")
	public TaTDoc getTaTDoc() {
		return taTDoc;
	}

	public void setTaTDoc(TaTDoc taTDoc) {
		this.taTDoc = taTDoc;
	}

	@Column(name = "code_tiers")
	public String getCodeTiers() {
		return codeTiers;
	}

	public void setCodeTiers(String codeTiers) {
		this.codeTiers = codeTiers;
	}

	@Column(name = "code_t_doc")
	public String getCodeTDoc() {
		return codeTDoc;
	}

	public void setCodeTDoc(String codeTDoc) {
		this.codeTDoc = codeTDoc;
	}

	@Column(name = "id_utilisateur")
	public Integer getIdUtilisateur() {
		return idUtilisateur;
	}

	public void setIdUtilisateur(Integer idUtilisateur) {
		this.idUtilisateur = idUtilisateur;
	}
	
	@Column(name = "email_utilisateur")
	public String getEmailUtilisateur() {
		return emailUtilisateur;
	}

	public void setEmailUtilisateur(String emailUtilisateur) {
		this.emailUtilisateur = emailUtilisateur;
	}

	@Transient
	public boolean getAccepte() {
		return accepte;
	}

	@Transient
	public void setAccepte(boolean accepte) {
		this.accepte = accepte;
	}


	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taFlash", orphanRemoval = true)
	public Set<TaREtat> getTaREtats() {
		return this.taREtats;
	}

	public void setTaREtats(Set<TaREtat> taREtats) {
		this.taREtats = taREtats;
	}
	

	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taFlash", orphanRemoval = true)
	public Set<TaHistREtat> getTaHistREtats() {
		return this.taHistREtats;
	}

	public void setTaHistREtats(Set<TaHistREtat> taHistREtats) {
		this.taHistREtats = taHistREtats;
	}
	
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_r_etat")
	@LgrHibernateValidated(champBd = "id_r_etat",table = "ta_r_etat",champEntite="TaREtat.idREtat", clazz = TaREtat.class)
	public TaREtat getTaREtat() {
		return this.taREtat;
	}

	public void setTaREtat(TaREtat taREtat) {
		this.taREtat = taREtat;
	}
	
	public void addREtat(TaEtat taEtat) {
		TaHistREtat hist=new TaHistREtat();
		TaREtat rEtat=getTaREtat();
		if(rEtat!=null) {
			hist.setTaEtat(getTaREtat().getTaEtat());
			hist.setTaFlash(this);
			this.getTaHistREtats().add(hist);
		}else rEtat=new TaREtat();
		
		rEtat.setTaEtat(taEtat);
		rEtat.setTaFlash(this);
		this.setTaREtat(rEtat);
		this.getTaREtats().add(rEtat);
	}


	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taFlash", orphanRemoval=true)
	public Set<TaRDocument> getTaRDocuments() {
		return this.taRDocuments;
	}

	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		this.taRDocuments = taRDocuments;
	}


}
