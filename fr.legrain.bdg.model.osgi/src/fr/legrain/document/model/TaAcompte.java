package fr.legrain.document.model;

// Generated Apr 9, 2009 2:12:06 PM by Hibernate Tools 3.2.0.CR1

import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlTransient;

import org.apache.log4j.Logger;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnore;

import fr.legrain.document.dto.IDocumentCalcul;
import fr.legrain.document.dto.IDocumentPayableCB;
import fr.legrain.document.dto.IDocumentTiers;
import fr.legrain.document.dto.IInfosDocumentTiers;
import fr.legrain.document.dto.ILigneDocumentTiers;
import fr.legrain.document.events.SWTModificationDocumentEvent;
import fr.legrain.lib.data.ChangeModeEvent;
import fr.legrain.lib.data.ChangeModeListener;
import fr.legrain.lib.data.EnumModeObjet;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.lib.data.IHMEtat;
import fr.legrain.lib.data.LibCalcul;
import fr.legrain.tiers.model.TaAdresse;
import fr.legrain.tiers.model.TaCPaiement;
import fr.legrain.tiers.model.TaCompteBanque;
import fr.legrain.tiers.model.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaAcompte generated by hbm2java
 */
@Entity
@EntityListeners(SwtDocumentListener.class)
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "ta_acompte", uniqueConstraints = @UniqueConstraint(columnNames = "code_document"))
//@SequenceGenerator(name = "gen_acompte", sequenceName = "num_id_acompte", allocationSize = 1)
@NamedQueries(value = { 
		@NamedQuery(name=TaAcompte.QN.FIND_BY_DATE, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.dateDocument between :dateDeb and :dateFin order by a.dateDocument, a.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_DATE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like :codeTiers and f.dateDocument between :dateDebut and :dateFin order by f.dateDocument, f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_TIERS_AND_CODE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like :codeTiers and f.codeDocument like :codeDocument order by f.dateDocument, f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_TIERS_AND_CODE, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.codeDocument between :dateDeb and :dateFin order by a.dateDocument, a.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_CODE, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.codeDocument between :dateDeb and :dateFin order by a.dateDocument, a.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_DATE_PARDATE, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.dateDocument between :dateDeb and :dateFin order by a.dateDocument, a.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_DATE_NON_EXPORT, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.dateDocument between :dateDeb and :dateFin  and a.dateExport is null order by a.dateDocument, a.codeDocument"), 
		@NamedQuery(name=TaAcompte.QN.FIND_BY_CODE_NON_EXPORT, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.codeDocument between :dateDeb and :dateFin and a.dateExport is null order by a.dateDocument, a.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_DATE_NON_EXPORT_LIGHT, query="select new fr.legrain.document.dto.TaAcompteDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers where f.taTiers.codeTiers like :codeTiers " +
				"and f.dateDocument between :dateDeb and :dateFin  and f.dateExport is null order by f.dateDocument, f.codeDocument"), 
		@NamedQuery(name=TaAcompte.QN.FIND_BY_CODE_NON_EXPORT_LIGHT, query="select new fr.legrain.document.dto.TaAcompteDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers where f.taTiers.codeTiers like :codeTiers " +
				"and f.codeDocument between :dateDeb and :dateFin and f.dateExport is null order by f.dateDocument, f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_DATE_EXPORT, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.dateDocument between :dateDeb and :dateFin  and a.dateExport is not null order by a.dateDocument, a.codeDocument"), 
		@NamedQuery(name=TaAcompte.QN.FIND_BY_CODE_EXPORT, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.codeDocument between :dateDeb and :dateFin and a.dateExport is not null order by a.dateDocument, a.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_BY_TIERS_AND_DATE, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers " +
				"and a.dateDocument between :dateDeb and :dateFin order by a.dateDocument, a.codeDocument"),
//		@NamedQuery(name=TaAcompte.QN.FIND_ALL_LIGHT, query="select new fr.legrain.document.dto.TaAcompteDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc) from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers order by f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_ALL_LIGHT, query="select new fr.legrain.document.dto.TaAcompteDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers,"
				+ " infos.nomEntreprise,f.dateEchDocument,f.netHtCalc,f.netTvaCalc,f.netTtcCalc,f.dateExport,f.dateVerrouillage, mad.accessibleSurCompteClient, mad.envoyeParEmail, mad.imprimePourClient) from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers  left join f.taMiseADisposition mad order by f.dateDocument DESC, f.codeDocument DESC"),
		
		@NamedQuery(name=TaAcompte.QN.FIND_ALL_LIGHT_PERIODE, query="select new fr.legrain.document.dto.TaAcompteDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
				+ " from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers "
				+ " where f.dateDocument between :dateDebut and :dateFin   and f.taTiers.codeTiers like :codeTiers  "
				+ " order by f.dateDocument, f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_TRANSFORME_LIGHT_PERIODE, 
		query="select new fr.legrain.document.dto.TaAcompteDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
				+ " from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers where f.dateDocument between :dateDebut and :dateFin   and f.taTiers.codeTiers like :codeTiers  "
				+ " and exists (select r from TaRDocument r where r.taAcompte = f) order by f.dateDocument, f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_NON_TRANSFORME_LIGHT_PERIODE, 
			query="select new fr.legrain.document.dto.TaAcompteDTO("
					+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
					+ " from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers where f.dateDocument between :dateDebut and :dateFin   and f.taTiers.codeTiers like :codeTiers  "
					+ " and not exists (select r from TaRDocument r where r.taAcompte = f) order by f.dateDocument, f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.FIND_NON_TRANSFORME_ARELANCER_LIGHT_PERIODE, 
			query="select new fr.legrain.document.dto.TaAcompteDTO("
					+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) "
					+ " from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers "
					+ " where f.dateDocument between :dateDebut and :dateFin and f.dateEchDocument <= :dateref and f.dateEchDocument >= :datejour   and f.taTiers.codeTiers like :codeTiers "
					+ " and not exists (select r from TaRDocument r where r.taAcompte = f) order by f.dateDocument, f.codeDocument"),
		@NamedQuery(name=TaAcompte.QN.SUM_CA_TOTAL_NON_TRANSFORME_ARELANCER_LIGHT_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f join f.taInfosDocument infos join f.taTiers tiers "
					+ " where f.dateDocument between :dateDebut and :dateFin and f.dateEchDocument <= :dateref and f.dateEchDocument >= :datejour "
					+ " and f.taTiers.codeTiers like :codeTiers "
					+ " and not exists (select r from TaRDocument r where r.taAcompte = f)"),
		//@NamedQuery(name=TaDevis.QN.FIND_NON_TRANSFORME_ARELANCER_LIGHT_PERIODE, query="select new fr.legrain.document.dto.TaDevisDTO(f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.export,f.netHtCalc,f.netTvaCalc,f.netTtcCalc) from TaDevis f join f.taInfosDocument infos join f.taTiers tiers where f.dateDocument between :dateDebut and :dateFin and f.dateEchDocument <= :dateref and f.dateEchDocument >= :datejour and not exists (select r from TaRDocument r where r.taDevis = f and (taFacture IS NOT NULL OR taBonliv IS NOT NULL OR taBoncde IS NOT NULL OR taAcompte IS NOT NULL)) order by f.codeDocument"),
		// Renvoi les totaux de l'ensemble des Acompte groupé par jour sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_JOUR_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+ " group by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte groupé par mois sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_MOIS_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+ " group by  extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(month from f.dateDocument),extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte groupé par année sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_ANNEE_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
//					+ "extract(day from f.dateDocument),extract(month from f.dateDocument),"
					+ " extract(year from f.dateDocument),coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers "
					+ " group by  extract(year from f.dateDocument) "
					+ " order by extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_TOTAL_LIGTH_PERIODE, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"),
		
		// Renvoi les totaux de l'ensemble des Acompte NON transformés groupé par jour sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_JOUR_LIGTH_PERIODE_NON_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers "
					+"  and not exists (select r " 
					+"  from TaRDocument r " 
					+"  where r.taAcompte = f) "
					+ " group by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte NON transformés groupé par mois sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_MOIS_LIGTH_PERIODE_NON_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+" and not exists (select r " 
					+" from TaRDocument r " 
					+" where r.taAcompte = f) "
					+ " group by  extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(month from f.dateDocument),extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte NON transformés groupé par année sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_ANNEE_LIGTH_PERIODE_NON_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
//					+ "extract(day from f.dateDocument),extract(month from f.dateDocument),"
					+ " extract(year from f.dateDocument),coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+"  and not exists (select r " 
					+" from TaRDocument r " 
					+" where r.taAcompte = f) "
					+ " group by  extract(year from f.dateDocument) "
					+ " order by extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte NON transformés sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_TOTAL_LIGTH_PERIODE_NON_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+" and not exists (select r " 
					+" from TaRDocument r " 
					+" where r.taAcompte = f) "),
		 
		// Renvoi les totaux de l'ensemble des Acompte transformés groupé par jour sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_JOUR_LIGTH_PERIODE_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+" and exists (select r " 
					+" from TaRDocument r " 
					+" where r.taAcompte = f) "
					+ " group by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(day from f.dateDocument),extract(month from f.dateDocument),extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte transformés groupé par mois sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_MOIS_LIGTH_PERIODE_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " extract(month from f.dateDocument),extract(year from f.dateDocument),"
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+" and exists (select r " 
					+" from TaRDocument r " 
					+" where r.taAcompte = f) "
					+ " group by  extract(month from f.dateDocument),extract(year from f.dateDocument) "
					+ " order by extract(month from f.dateDocument),extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte transformés groupé par année sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_ANNEE_LIGTH_PERIODE_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
//					+ "extract(day from f.dateDocument),extract(month from f.dateDocument),"
					+ " extract(year from f.dateDocument),coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+" and exists (select r " 
					+" from TaRDocument r " 
					+" where r.taAcompte = f) "
					+ " group by  extract(year from f.dateDocument) "
					+ " order by extract(year from f.dateDocument)"),
		// Renvoi les totaux de l'ensemble des Acompte transformés sur la période datedebut à datefin
		@NamedQuery(name=TaAcompte.QN.SUM_CA_TOTAL_LIGTH_PERIODE_TRANSFORME, 
			query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
					+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
					+ " from TaAcompte f  "
					+ " where f.dateDocument between :datedebut and :datefin and f.taTiers.codeTiers like :codeTiers"
					+" and exists (select r " 
					+" from TaRDocument r " 
					+" where r.taAcompte = f) "),
		
		@NamedQuery(name=TaAcompte.QN.FIND_BY_ETAT_TIERS_ENCOURS_DATE, query="select a from TaAcompte a where a.taTiers.codeTiers like :codeTiers and a.dateEchDocument < :date and a.taRDocuments is empty order by a.dateEchDocument")
		
		})
public class TaAcompte extends SWTDocument implements ChangeModeListener, java.io.Serializable, IDocumentTiers, IDocumentCalcul/*, IDocumentPayableCB*/ {

	private static final long serialVersionUID = 1281065426303318968L;
	
	public static final String TYPE_DOC = "Acompte";
	public static final String PATH_ICONE_COULEUR = "dashboard/fact-acompte.svg";
	public static final String PATH_ICONE_BLANC = "";
	public static final String PATH_ICONE_GRIS = "";
	public static class QN {
		public static final String FIND_BY_DATE = "TaAcompte.findEntre2Date";
		public static final String FIND_BY_TIERS_AND_CODE_LIGHT = "TaAcompte.findEntre2CodeParCodeLight";
		public static final String FIND_BY_DATE_LIGHT = "TaAcompte.findEntre2DateLight";
		public static final String FIND_BY_TIERS_AND_CODE = "TaAcompte.findEntre2CodeParCode";
		public static final String FIND_BY_DATE_PARDATE = "TaAcompte.findEntre2DateParDate";
		public static final String FIND_BY_CODE = "TaAcompte.findEntre2Code";
		public static final String FIND_BY_DATE_NON_EXPORT = "TaAcompte.findEntre2DateNonExporte";
		public static final String FIND_BY_CODE_NON_EXPORT = "TaAcompte.findEntre2CodeNonExporte";
		public static final String FIND_BY_DATE_NON_EXPORT_LIGHT = "TaAcompte.findEntre2DateNonExporteLight";
		public static final String FIND_BY_CODE_NON_EXPORT_LIGHT = "TaAcompte.findEntre2CodeNonExporteLight";		
		public static final String FIND_BY_DATE_EXPORT = "TaAcompte.findEntre2DateExporte";
		public static final String FIND_BY_CODE_EXPORT = "TaAcompte.findEntre2CodeExporte";
		public static final String FIND_BY_TIERS_AND_DATE = "TaAcompte.findTiersEntre2Date";
		public static final String FIND_ALL_LIGHT = "TaAcompte.findAllLight";
		
		public static final String FIND_BY_ETAT_TIERS_ENCOURS_DATE = "TaAcompte.findTiersEtatEnCoursDate";
		public static final String FIND_ALL_LIGHT_PERIODE = "TaAcompte.findAllLightPeriode";
		public static final String FIND_TRANSFORME_LIGHT_PERIODE = "TaAcompte.findAcompteTransfoPeriodeDTO";
		public static final String FIND_NON_TRANSFORME_LIGHT_PERIODE = "TaAcompte.findAcompteNonTransfosDTO";
		public static final String FIND_NON_TRANSFORME_ARELANCER_LIGHT_PERIODE = "TaAcompte.findAcompteNonTransfosARelancerDTO";
		public static final String SUM_CA_TOTAL_NON_TRANSFORME_ARELANCER_LIGHT_PERIODE = "TaAcompte.CaAcompteNonTransfosARelancerDTO";
		
		public static final String SUM_CA_JOUR_LIGTH_PERIODE = "TaAcompte.caAcompteJourPeriodeDTO";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE = "TaAcompte.caAcompteMoisPeriodeDTO";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE = "TaAcompte.caAcompteAnneePeriodeDTO";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE = "TaAcompte.caAcompteTotalPeriodeDTO";

		public static final String SUM_CA_JOUR_LIGTH_PERIODE_NON_TRANSFORME = "TaAcompte.caAcompteJourPeriodeDTONonTransforme";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE_NON_TRANSFORME = "TaAcompte.caAcompteMoisPeriodeDTONonTransforme";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE_NON_TRANSFORME = "TaAcompte.caAcompteAnneePeriodeDTONonTransforme";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE_NON_TRANSFORME = "TaAcompte.caAcompteTotalPeriodeDTONonTransforme";

		public static final String SUM_CA_JOUR_LIGTH_PERIODE_NON_TRANSFORME_A_RELANCER = "TaAcompte.caAcompteJourPeriodeDTONonTransformeARelancer";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE_NON_TRANSFORME_A_RELANCER = "TaAcompte.caAcompteMoisPeriodeDTONonTransformeARelancer";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE_NON_TRANSFORME_A_RELANCER = "TaAcompte.caAcompteAnneePeriodeDTONonTransformeARelancer";
		
		public static final String SUM_CA_JOUR_LIGTH_PERIODE_TRANSFORME = "TaAcompte.caAcompteJourPeriodeDTOTransforme";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE_TRANSFORME = "TaAcompte.caAcompteMoisPeriodeDTOTransforme";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE_TRANSFORME = "TaAcompte.caAcompteAnneePeriodeDTOTransforme";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE_TRANSFORME = "TaAcompte.caAcompteTotalPeriodeDTOTransforme";
	}

//	private int idDocument;
	private String version;
	private TaTPaiement taTPaiement;
	private TaTiers taTiers;
	private String codeDocument;
	private Date dateDocument;
	private Date dateEchDocument;
	private Date dateLivDocument;
	private Date dateExport;
	private String libelleDocument;
	private BigDecimal remHtDocument= new BigDecimal(0);
	private BigDecimal txRemHtDocument= new BigDecimal(0);
	private BigDecimal remTtcDocument= new BigDecimal(0);
	private BigDecimal txRemTtcDocument= new BigDecimal(0);
	private Integer nbEDocument= 0;
	private Integer ttc= 0;
//	private Integer export= 0;
	private BigDecimal regleDocument = new BigDecimal(0);
	private String commentaire;

	private String ipAcces;
//	private Integer versionObj;

	private TaInfosAcompte taInfosDocument;
	private TaMiseADisposition taMiseADisposition;
	private Set<TaRDocument> taRDocuments = new HashSet<TaRDocument>(0);
	private Set<TaRAcompte> taRAcomptes = new HashSet<TaRAcompte>(0);
	private Set<TaREtat> taREtats = new HashSet<TaREtat>(0);
	private Set<TaHistREtat> taHistREtats = new HashSet<TaHistREtat>(0);
	private TaCompteBanque taCompteBanque;
	private TaEtat taEtat;
	
	protected Integer nbDecimalesPrix;
	protected Integer nbDecimalesQte;
	
	@Transient
	private TaReglement taReglement;
	
	@Transient
	private boolean creeReglement=true;
	
	@Transient
	private ArrayList<LigneTva> lignesTVA = null; //ensemble des lignes de tva du document


	private BigDecimal mtTtcAvantRemiseGlobaleCalc = new BigDecimal(0);
	@Transient
	private boolean gestionTVA = true;
	@Transient
	static Logger logger = Logger.getLogger(TaAcompte.class.getName());

	private BigDecimal mtTtcCalc = new BigDecimal(0);

	private BigDecimal mtHtCalc = new BigDecimal(0);

	private BigDecimal mtTvaCalc = new BigDecimal(0);

	private BigDecimal netTtcCalc = new BigDecimal(0);

	private BigDecimal netHtCalc = new BigDecimal(0);

	private BigDecimal netTvaCalc = new BigDecimal(0);

	private BigDecimal netAPayer = new BigDecimal(0);
	@Transient
	private BigDecimal resteARegler = new BigDecimal(0);
	
	@Transient
	private BigDecimal remTtcIntermediaireDocument = new BigDecimal(0);
	
	@Transient
	private boolean legrain = false;

    @Transient
	private int etatDeSuppression = 0;
	
	private Date dateVerrouillage;

	@Transient
	private TaRReglementLiaison taRReglementLiaison;
	
	@Transient
	private BigDecimal regleCompletDocument = new BigDecimal(0);
	@Transient
	private BigDecimal resteAReglerComplet = new BigDecimal(0);

	protected Boolean utiliseUniteSaisie = true;

	
	private Set<TaRReglementLiaison> taRReglementLiaisons = new HashSet<TaRReglementLiaison>(0);

	public TaAcompte(boolean legrain) {
		this.legrain = legrain;
		lignes = new ArrayList<TaLAcompte>(0);
		lignesTVA = new ArrayList<LigneTva>();
		
	}
	public TaAcompte() {
		lignes = new ArrayList<TaLAcompte>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}
	
	public TaAcompte(int idAcompte) {
		this.idDocument = idAcompte;
		lignes = new ArrayList<TaLAcompte>(0);
		lignesTVA = new ArrayList<LigneTva>();		
	}
	
	public TaAcompte(String oldCodeAcompte) {
		super(oldCodeAcompte);
		legrain = true;
		lignes = new ArrayList<TaLAcompte>(0);
		this.lignesTVA = new ArrayList<LigneTva>();
		//passage ejb
//		this.modeDocument = EnumModeObjet.C_MO_INSERTION;
	}
	
	public TaAcompte(int idAcompte, TaTPaiement taTPaiement, TaTiers taTiers,
			TaCPaiement taCPaiement,TaAdresse taAdresseByIdAdresse, 
			TaAdresse taAdresseByIdAdresseLiv,String codeAcompte,
			Date dateAcompte, Date dateEchAcompte,Date dateLivAcompte,
			String libelleAcompte, 
			BigDecimal remHtAcompte, BigDecimal txRemHtAcompte,
			BigDecimal remTtcAcompte, BigDecimal txRemTtcAcompte, Integer nbEAcompte,
			Integer ttc, Integer export, String commentaire, String quiCreeAcompte,
			Date quandCreeAcompte, String quiModifAcompte, Date quandModifAcompte,
			String ipAcces, Integer versionObj, List<TaLAcompte> taLAcompte,
			TaInfosAcompte taInfosAcomptees, Set<TaRDocument> taRDocuments, Set<TaRAcompte> taRAcomptes) {
		this.idDocument = idAcompte;
		this.taTPaiement = taTPaiement;
		this.taTiers = taTiers;
		this.codeDocument = codeAcompte;
		this.dateDocument = dateAcompte;
		this.dateEchDocument = dateEchAcompte;
		this.dateLivDocument = dateLivAcompte;
		this.libelleDocument = libelleAcompte;
		this.remHtDocument = remHtAcompte;
		this.txRemHtDocument = txRemHtAcompte;
		this.remTtcDocument = remTtcAcompte;
		this.txRemTtcDocument = txRemTtcAcompte;
		this.nbEDocument = nbEAcompte;
		this.ttc = ttc;
//		this.export = export;
		this.commentaire = commentaire;
		this.quiCree = quiCreeAcompte;
		this.quandCree = quandCreeAcompte;
		this.quiModif = quiModifAcompte;
		this.quandModif = quandModifAcompte;
		this.ipAcces = ipAcces;
		this.versionObj = versionObj;
		this.lignes = taLAcompte;
		this.taInfosDocument = taInfosAcomptees;
		this.taRDocuments = taRDocuments;
		this.taRAcomptes = taRAcomptes;
	}


	@Column(name = "version", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_t_paiement")
	@LgrHibernateValidated(champBd = "id_t_paiement",table = "ta_t_paiement",champEntite="TaTPaiement.idTPaiement",clazz = TaTPaiement.class)
	public TaTPaiement getTaTPaiement() {
		return this.taTPaiement;
	}

	public void setTaTPaiement(TaTPaiement taTPaiement) {
		this.taTPaiement = taTPaiement;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_tiers")
	@LgrHibernateValidated(champBd = "id_tiers",table = "ta_tiers",champEntite="TaTiers.idTiers",clazz = TaTiers.class)
	public TaTiers getTaTiers() {
		return this.taTiers;
	}

	public void setTaTiers(TaTiers taTiers) {
		if(taRAcomptes.size()==0 || rechercheSiMemeTiers(taTiers))
			this.taTiers = taTiers;
	}

	public boolean rechercheSiMemeTiers(TaTiers taTiers){
		for (TaRAcompte acompte : taRAcomptes) {
			if(acompte.getTaAcompte().getTaTiers()!=null)
				if (!acompte.getTaAcompte().getTaTiers().equals(taTiers))
					return false;
		}
		return true;
	}



	@Column(name = "code_document", unique = true, length = 20)
	@LgrHibernateValidated(champBd = "code_document",table = "ta_acompte",champEntite="codeDocument",clazz = TaAcompte.class)
	public String getCodeDocument() {
		return this.codeDocument;
	}

	public void setCodeDocument(String codeAcompte) {
		this.codeDocument = codeAcompte;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_document", length = 19)
	@LgrHibernateValidated(champBd = "date_document",table = "ta_acompte",champEntite="dateDocument",clazz = TaAcompte.class)
	public Date getDateDocument() {
		return this.dateDocument;
	}

	public void setDateDocument(Date dateFacture) {
		if(this.oldDate==null)this.oldDate=dateFacture;
		else
		if(this.dateDocument==null||
				this.dateDocument.compareTo(dateFacture)!=0)
			this.oldDate=this.dateDocument;
		this.dateDocument = dateFacture;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_ech_document", length = 19)
	@LgrHibernateValidated(champBd = "date_ech_document",table = "ta_acompte",champEntite="dateEchDocument",clazz = TaAcompte.class)
	public Date getDateEchDocument() {
		return this.dateEchDocument;
	}

	public void setDateEchDocument(Date dateEchAcompte) {
		this.dateEchDocument = dateEchAcompte;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_liv_document", length = 19)
	@LgrHibernateValidated(champBd = "date_liv_document",table = "ta_acompte",champEntite="dateLivDocument",clazz = TaAcompte.class)
	public Date getDateLivDocument() {
		return this.dateLivDocument;
	}

	public void setDateLivDocument(Date dateLivAcompte) {
		this.dateLivDocument = dateLivAcompte;
	}

	@Column(name = "libelle_document")
	@LgrHibernateValidated(champBd = "libelle_document",table = "ta_acompte",champEntite="libelleDocument",clazz = TaAcompte.class)
	public String getLibelleDocument() {
		return this.libelleDocument;
	}

	public void setLibelleDocument(String libelleAcompte) {
		this.libelleDocument = libelleAcompte;
	}

	
	
	@Column(name = "rem_ht_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_ht_document",table = "ta_acompte",champEntite="remHtDocument",clazz = TaAcompte.class)
	public BigDecimal getRemHtDocument() {
		return this.remHtDocument;
	}

	public void setRemHtDocument(BigDecimal remHtAcompte) {
		this.remHtDocument = remHtAcompte;
	}

	@Column(name = "tx_rem_ht_document", precision = 15)
	@LgrHibernateValidated(champBd = "tx_rem_ht_document",table = "ta_acompte",champEntite="txRemHtDocument",clazz = TaAcompte.class)
	public BigDecimal getTxRemHtDocument() {
		return this.txRemHtDocument;
	}

	public void setTxRemHtDocument(BigDecimal txRemHtAcompte) {
		if(txRemHtAcompte==null)txRemHtAcompte=new BigDecimal(0);
		if(this.txRemHtDocument!=null && this.txRemHtDocument.compareTo(txRemHtAcompte)!=0){	
			this.txRemHtDocument = txRemHtAcompte;
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
				//passage ejb => dans TaAcompteService
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "rem_ttc_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_ttc_document",table = "ta_acompte",champEntite="remTtcDocument",clazz = TaAcompte.class)
	public BigDecimal getRemTtcDocument() {
		return this.remTtcDocument;
	}

	public void setRemTtcDocument(BigDecimal remTtcAcompte) {
		this.remTtcDocument = remTtcAcompte;
	}

	@Column(name = "tx_rem_ttc_document", precision = 15)
	@LgrHibernateValidated(champBd = "tx_rem_ttc_document",table = "ta_acompte",champEntite="txRemTtcDocument",clazz = TaAcompte.class)
	public BigDecimal getTxRemTtcDocument() {
		return this.txRemTtcDocument;
	}

	public void setTxRemTtcDocument(BigDecimal txRemTtcAcompte) {
		if(txRemTtcAcompte==null)txRemTtcAcompte=new BigDecimal(0);
		if(this.txRemTtcDocument!=null && this.txRemTtcDocument.compareTo(txRemTtcAcompte)!=0){	
			this.txRemTtcDocument = txRemTtcAcompte;
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
				//passage ejb => dans TaAcompteService
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this,"txRemTtcDocument"));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "nb_e_document")
	@LgrHibernateValidated(champBd = "nb_e_document",table = "ta_acompte",champEntite="nbEDocument",clazz = TaAcompte.class)
	public Integer getNbEDocument() {
		return this.nbEDocument;
	}

	public void setNbEDocument(Integer nbEAcompte) {
		this.nbEDocument = nbEAcompte;
	}

	@Column(name = "ttc")
	@LgrHibernateValidated(champBd = "ttc",table = "ta_acompte",champEntite="ttc",clazz = TaAcompte.class)
	public Integer getTtc() {
		return this.ttc;
	}

	public void setTtc(Integer ttc) {
		this.ttc = ttc;
	}

//	@Column(name = "export")
//	@LgrHibernateValidated(champBd = "export",table = "ta_acompte",champEntite="export",clazz = TaAcompte.class)
//	public Integer getExport() {
//		return this.export;
//	}
//
//	public void setExport(Integer export) {
//		this.export = export;
//	}

	@Column(name = "commentaire", length = 2000)
	@LgrHibernateValidated(champBd = "commentaire",table = "ta_acompte",champEntite="commentaire",clazz = TaAcompte.class)
	public String getCommentaire() {
		return this.commentaire;
	}

	public void setCommentaire(String commentaire) {
		if(this.commentaire==null||(commentaire!=null &&
				this.commentaire.compareTo(commentaire)!=0)){
			this.commentaire = commentaire;		
			if(legrain) {
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "qui_cree", length = 50)
	public String getQuiCree() {
		return this.quiCree;
	}

	public void setQuiCree(String quiCreeAcompte) {
		this.quiCree = quiCreeAcompte;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_cree", length = 19)
	public Date getQuandCree() {
		return this.quandCree;
	}

	public void setQuandCree(Date quandCreeAcompte) {
		this.quandCree = quandCreeAcompte;
	}

	@Column(name = "qui_modif", length = 50)
	public String getQuiModif() {
		return this.quiModif;
	}

	public void setQuiModif(String quiModifAcompte) {
		this.quiModif = quiModifAcompte;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_modif", length = 19)
	public Date getQuandModif() {
		return this.quandModif;
	}

	public void setQuandModif(Date quandModifAcompte) {
		this.quandModif = quandModifAcompte;
	}

	@Column(name = "ip_acces", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}
	
	@Column(name = "regle_document", precision = 15)
	@LgrHibernateValidated(champBd = "regle_document",table = "ta_acompte",champEntite="regleDocument",clazz = TaAcompte.class)
	public BigDecimal getRegleDocument() {
		return this.regleDocument;
	}

	public void setRegleDocument(BigDecimal regleDocument) {
		if(regleDocument==null)regleDocument=new BigDecimal(0);
		if(this.regleDocument!=null && this.regleDocument.compareTo(regleDocument)!=0){	
			this.regleDocument = regleDocument;		
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
				//passage ejb => dans TaAcompteService
				//calculTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}	



	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taDocument", orphanRemoval=true)
	@OrderBy("numLigneLDocument")
	@Fetch(FetchMode.SUBSELECT)
	public List<TaLAcompte> getLignes() {
		return this.lignes;
	}

	public void setLignes(List<TaLAcompte> taLAcompte) {
		this.lignes = taLAcompte;
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_compte_banque")
	@LgrHibernateValidated(champBd = "id_compte_banque",table = "ta_compte_banque",champEntite="TaCompteBanque.idCompteBanque",clazz = TaCompteBanque.class)
	public TaCompteBanque getTaCompteBanque() {
		return taCompteBanque;
	}
	public void setTaCompteBanque(TaCompteBanque taCompteBanque) {
		this.taCompteBanque = taCompteBanque;
	}
	
//	@javax.persistence.OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taDocument")
	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL , orphanRemoval=true, optional=false)
	@JoinColumn(name = "id_infos_document")
	public TaInfosAcompte getTaInfosDocument() {
		return this.taInfosDocument;
	}

	public void setTaInfosDocument(TaInfosAcompte taInfosAcomptees) {
		this.taInfosDocument = taInfosAcomptees;
	}

	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAcompte", orphanRemoval=true)
	public Set<TaRAcompte> getTaRAcomptes(){
		return this.taRAcomptes;
	}

	public void setTaRAcomptes(Set<TaRAcompte> taRAcomptes) {
		this.taRAcomptes = taRAcomptes;
	}
	
	

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAcompte", orphanRemoval=true)
	public Set<TaRDocument> getTaRDocuments() {
		return this.taRDocuments;
	}

	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		this.taRDocuments = taRDocuments;
	}

	/**
	 * Initialisation des propriétés de la facture en fonction du tiers
	 */
	public void changementDeTiers() {
//		if(this.taTiers!=null && this.taTiers.getTaTTvaDoc()!=null && 
//				this.taTiers.getTaTTvaDoc().getCodeTTvaDoc()!=null){
//			if(!this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("F")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("UE")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("HUE")
//			)
//				setGestionTVA(false);
//			else setGestionTVA(true);
//		}else
//			setGestionTVA(true);
	}
	
	@Override
	protected void afterAjoutLigne(SWTLigneDocument ligne) throws ExceptLgr {
		System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
		//passage ejb => dans TaAcompteService
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
	}

	@Override
	protected void afterEnregistrerEntete() throws ExceptLgr {
		System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
		//passage ejb => dans TaAcompteService
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
		
	}

	@Override
	protected void afterModifierEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void afterRemoveLigne(SWTLigneDocument ligne) throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void afterSupprimerEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected boolean beforeAjoutLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeEnregistrerEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeModifierEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeRemoveLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeSupprimerEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected void reinitialiseNumLignes() {
//		for (Object ligne : lignes) {
//			((TaLAcompte)ligne).setNumLigneLDocument(
//					((TaLAcompte) ligne).getNUM_LIGNE());
//		}		
	}

	@Override
	public void changementMode(ChangeModeEvent evt) {
		// TODO Raccord de méthode auto-généré
		switch (evt.getNouveauMode()) {
		case C_MO_CONSULTATION:
			break;
		case C_MO_EDITION:
			//S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_INSERTION:
//			S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
			break;
		case C_MO_SUPPRESSION:
			break;
		}

	}
	@Transient
	public ArrayList<LigneTva> getLignesTVA() {
		return lignesTVA;
	}

	public void setLignesTVA(ArrayList<LigneTva> lignesTVA) {
		this.lignesTVA = lignesTVA;
	}
//	@Transient
	@Column(name = "mt_ttc_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_calc",table = "ta_acompte",champEntite="mtTtcCalc",clazz = TaAcompte.class)
	public BigDecimal getMtTtcCalc() {
		return mtTtcCalc;
	}

	public void setMtTtcCalc(BigDecimal mtTtcCalc) {
		this.mtTtcCalc = LibCalcul.arrondi(mtTtcCalc);
	}

	//@Transient
	@Column(name = "mt_ht_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ht_calc",table = "ta_acompte",champEntite="mtHtCalc",clazz = TaAcompte.class)
	public BigDecimal getMtHtCalc() {
		return mtHtCalc;
	}

	public void setMtHtCalc(BigDecimal mtHtCalc) {
		this.mtHtCalc = LibCalcul.arrondi(mtHtCalc);
	}

	//@Transient
	@Column(name = "mt_tva_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_tva_calc",table = "ta_acompte",champEntite="mtTvaCalc",clazz = TaAcompte.class)
	public BigDecimal getMtTvaCalc() {
		return mtTvaCalc;
	}

	public void setMtTvaCalc(BigDecimal mtTvaCalc) {
		this.mtTvaCalc = LibCalcul.arrondi(mtTvaCalc);
	}

	//@Transient
	@Column(name = "net_ttc_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_ttc_calc",table = "ta_acompte",champEntite="netTtcCalc",clazz = TaAcompte.class)
	public BigDecimal getNetTtcCalc() {
		return netTtcCalc;
	}

	public void setNetTtcCalc(BigDecimal netTtcCalc) {
		this.netTtcCalc = LibCalcul.arrondi(netTtcCalc);
	}

	//@Transient
	@Column(name = "net_ht_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_ht_calc",table = "ta_acompte",champEntite="netHtCalc",clazz = TaAcompte.class)
	public BigDecimal getNetHtCalc() {
		return netHtCalc;
	}

	public void setNetHtCalc(BigDecimal netHtCalc) {
		this.netHtCalc = LibCalcul.arrondi(netHtCalc);
	}

	//@Transient
	@Column(name = "net_tva_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_tva_calc",table = "ta_acompte",champEntite="netTvaCalc",clazz = TaAcompte.class)
	public BigDecimal getNetTvaCalc() {
		return netTvaCalc;
	}

	public void setNetTvaCalc(BigDecimal netTvaCalc) {
		this.netTvaCalc = LibCalcul.arrondi(netTvaCalc);
	}

	//@Transient
	@Column(name = "net_a_payer", precision = 15)
	@LgrHibernateValidated(champBd = "net_a_payer",table = "ta_acompte",champEntite="netAPayer",clazz = TaAcompte.class)
	public BigDecimal getNetAPayer() {
		return netAPayer;
	}

	public void setNetAPayer(BigDecimal netAPayer) {
		this.netAPayer = LibCalcul.arrondi(netAPayer);
	}

	public void setLegrain(boolean legrain) {
		this.legrain = legrain;
		for (TaLAcompte ligne : getLignes()) {
			ligne.setLegrain(legrain);
		}		
	}
	
	@Transient
	public boolean isLegrain() {
		return legrain;
	}

//passage ejb => dans TaAcompteService
	
	public void calculeTvaEtTotaux(){
		calculTvaTotal();
		calculTotaux();
	}
	
	/**
	 * Calcul des totaux de la facture
	 */
	public void calculTotaux() {
		
//			    MT_TVA Numeric(15,2),
			setMtHtCalc(new BigDecimal(0));
			setNetHtCalc(new BigDecimal(0));
			setMtTtcCalc(new BigDecimal(0));
			setMtTtcAvantRemiseGlobaleCalc(new BigDecimal(0));
			for (Object ligne : lignes) {
				if(((TaLAcompte)ligne).getTaTLigne().getCodeTLigne().equals(C_CODE_T_LIGNE_H) && ((TaLAcompte)ligne).getTaArticle()!=null) {
					if(((TaLAcompte)ligne).getMtHtLApresRemiseGlobaleDocument()!=null)
						setNetHtCalc(getNetHtCalc().add(((TaLAcompte)ligne).getMtHtLApresRemiseGlobaleDocument()));
					if(((TaLAcompte)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
						setMtTtcCalc(getMtTtcCalc().add(((TaLAcompte)ligne).getMtTtcLApresRemiseGlobaleDocument()));
					if(((TaLAcompte)ligne).getMtHtLDocument()!=null)
						setMtHtCalc(getMtHtCalc().add(((TaLAcompte)ligne).getMtHtLDocument()));
					if(((TaLAcompte)ligne).getMtTtcLDocument()!=null)
						setMtTtcAvantRemiseGlobaleCalc(getMtTtcAvantRemiseGlobaleCalc().add(((TaLAcompte)ligne).getMtTtcLDocument()));
				}
				
			}
			
			setRemHtDocument(getMtHtCalc().subtract(getNetHtCalc())); // passage ejb 3/8/2016
			setNetTvaCalc(getMtTtcCalc().subtract(getNetHtCalc()));
			BigDecimal tva = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tva = tva.add(ligneTva.getMtTva());
			}
			if(tva.compareTo(getNetTvaCalc())!=0) {
				logger.error("Montant de la TVA incorrect : "+getNetTvaCalc()+" ** "+tva);
			}
			BigDecimal tvaAvantRemise = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tvaAvantRemise = tvaAvantRemise.add(ligneTva.getMtTvaAvantRemise());
			}
			setMtTvaCalc(tvaAvantRemise);
			setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP)));
			/*
			 * remise HT déjà calculée dans dispatcherTva()
			 */
			setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()).setScale(2,BigDecimal.ROUND_HALF_UP));
			setNetAPayer(getNetTtcCalc().subtract(getRegleDocument()));
			
//			setNetTvaCalc(getMtTtcCalc().subtract(getNetHtCalc()));
//			BigDecimal tva = new BigDecimal(0);
//			for (LigneTva ligneTva : lignesTVA) {
//				tva = tva.add(ligneTva.getMtTva());
//			}
//			if(tva.compareTo(getNetTvaCalc())!=0) {
//				logger.error("Montant de la TVA incorrect : "+getNetTvaCalc()+" ** "+tva);
//			}
//			
//			//setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getRemTtcFacture().divide(new BigDecimal(100)))));
//			//setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100)))));
//			setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP)));
//			
//			/*
//			 * remise HT déjà calculée dans dispatcherTva()
//			 */
//			//setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()));
//			setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()).setScale(2,BigDecimal.ROUND_HALF_UP));
//			
//			setNetAPayer(getNetTtcCalc());
			
			setResteARegler(getNetTtcCalc().subtract(getRegleDocument()).subtract(calculSommeAcomptes()));
	}

	/**
	 * Reparti le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
	 */
	public void dispatcherTva() {

		BigDecimal tvaLigne = new BigDecimal(0);
		BigDecimal totalTemp = new BigDecimal(0);

		for (Object ligne : lignes) {
			if(((TaLAcompte)ligne).getMtHtLDocument()!=null)
				totalTemp = totalTemp.add(((TaLAcompte)ligne).getMtHtLDocument());
		}
		if(totalTemp!=null && txRemHtDocument!=null)
			setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));	
		
		for (TaLAcompte ligne : getLignes()) {
		if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
				if(ttc==1){
					((TaLAcompte)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtTtcLDocument().subtract(((TaLAcompte)ligne).getMtTtcLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLAcompte)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtTtcLApresRemiseGlobaleDocument());
					
				}else{
					((TaLAcompte)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtHtLDocument().subtract(((TaLAcompte)ligne).getMtHtLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLAcompte)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtHtLApresRemiseGlobaleDocument());	
				}
			}
		}
		
		for (LigneTva ligneTva : lignesTVA) {

			if (ligneTva.getMtTva()!=null) {
				int lignepasse=1;
				BigDecimal tvaTmp = ligneTva.getMtTva();
				BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
				BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());

				for (Object ligne : lignes) {
					if(((TaLAcompte)ligne).getTaTLigne().getCodeTLigne().equals(C_CODE_T_LIGNE_H)) {
						if(((TaLAcompte)ligne).getCodeTvaLDocument()!=null&&((TaLAcompte)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//						if(((TaLAcompte)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
							if (ligneTva.getMontantTotalHt().signum()==0) 
								tvaLigne = ((TaLAcompte)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
							else {
								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
									tvaLigne = tvaTmp;
								else {
									if(ttc==1){
										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
											tvaLigne=BigDecimal.valueOf(0);
										else
											tvaLigne = (ligneTva.getMtTva().multiply(((TaLAcompte)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
									}
									else{
										if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
											tvaLigne =BigDecimal.valueOf(0);
										else
											tvaLigne = (ligneTva.getMtTva().multiply(((TaLAcompte)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
									}
								}
							}
							tvaTmp =  tvaTmp.subtract(tvaLigne);
							totalTemp = totalTemp.add(((TaLAcompte)ligne).getMtHtLDocument());

							if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
								if  (lignepasse>= ligneTva.getNbLigneDocument()) {
									((TaLAcompte)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									((TaLAcompte)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
								} else {
									((TaLAcompte)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtHtLDocument().subtract(((TaLAcompte)ligne).getMtHtLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
									((TaLAcompte)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtTtcLDocument().subtract(((TaLAcompte)ligne).getMtTtcLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
								}
//								ttcTmp =  ttcTmp.subtract(((TaLAcompte)ligne).getMtTtcLFacture());
//								htTmp =  htTmp.subtract(((TaLAcompte)ligne).getMtHtLFacture());
							} else {
								if(ttc==1)
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLAcompte)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									}else{
										((TaLAcompte)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtTtcLDocument().subtract(tvaLigne));
									}
								else
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLAcompte)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
									}else {
										((TaLAcompte)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAcompte)ligne).getMtHtLDocument().add(tvaLigne));
									}

							}
							if(((TaLAcompte)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
								ttcTmp =  ttcTmp.subtract(((TaLAcompte)ligne).getMtTtcLApresRemiseGlobaleDocument());

							if(((TaLAcompte)ligne).getMtHtLApresRemiseGlobaleDocument()!=null)
								htTmp =  htTmp.subtract(((TaLAcompte)ligne).getMtHtLApresRemiseGlobaleDocument());

							lignepasse++;
						}
					}
					setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))));						
	
//					setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						

				}
			}
		}
//		}

	}
	
	/**
	 * Lance la fonction de calcul du montant sur chacunes des lignes du document.
	 */
	public void calculMontantLigneDocument() {
		for (Object ligne : lignes) {
			((TaLAcompte)ligne).calculMontant();
		}
	}
	
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 * et mise à jour du montant de la TVA dans les lignes du document
	 */
	public void calculTvaTotal() {
		calculMontantLigneDocument();
		calculLignesTva();
		dispatcherTva();
	}
	
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 */
	public void calculLignesTva() {
		Map<String,BigDecimal> montantTotalHt = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtc = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalHtAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtcAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVA = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVAAvantRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> tauxTVA = new HashMap<String,BigDecimal>();
		Map<String,Integer> nbLigne = new HashMap<String,Integer>();
		Map<String,String> libelleLignesTVA = new HashMap<String,String>();
		String codeTVA = null;
//		TaTvaDAO taTvaDAO = new TaTvaDAO();
		
		/*
		 * calcul de la TVA different en fonction de la propriete TTC
		 */
		BigDecimal ttcLigne = null;
		BigDecimal htLigne = null;
		for (Object ligne : lignes) {
			//en commentaire pour ne pas refaire les calculs pendants les editions, 
			//((TaLAvoir)ligne).calculMontant();
			codeTVA = ((TaLAcompte)ligne).getCodeTvaLDocument();
			if(codeTVA!=null && !codeTVA.equals("")) {
				ttcLigne = ((TaLAcompte)ligne).getMtTtcLDocument();
				htLigne = ((TaLAcompte)ligne).getMtHtLDocument();
				if(montantTotalHt.containsKey(codeTVA)) {
					montantTotalTtc.put(codeTVA,montantTotalTtc.get(codeTVA).add(ttcLigne));
					montantTotalHt.put(codeTVA,montantTotalHt.get(codeTVA).add(htLigne));
					montantTotalTtcAvecRemise.put(codeTVA,montantTotalTtcAvecRemise.get(codeTVA).add(ttcLigne));
					montantTotalHtAvecRemise.put(codeTVA,montantTotalHtAvecRemise.get(codeTVA).add(htLigne));
					nbLigne.put(codeTVA,nbLigne.get(codeTVA)+1);
				} else {
					montantTotalTtc.put(codeTVA,ttcLigne);
					montantTotalHt.put(codeTVA,htLigne);
					montantTotalTtcAvecRemise.put(codeTVA,ttcLigne);
					montantTotalHtAvecRemise.put(codeTVA,htLigne);
					tauxTVA.put(codeTVA,((TaLAcompte)ligne).getTauxTvaLDocument());
					nbLigne.put(codeTVA,1);
					libelleLignesTVA.put(codeTVA, ((TaLAcompte)ligne).getLibTvaLDocument());
//					libelleLignesTVA.put(codeTVA, ((TaLAvoir)ligne).getLibLDocument());
				}
			}
		}

		for (String codeTva : montantTotalTtc.keySet()) {
			//les 2 maps ont les meme cles
			BigDecimal mtTtcTotal = montantTotalTtc.get(codeTva);
			BigDecimal mtHtTotal = montantTotalHt.get(codeTva);
			BigDecimal tva =null;
			//traitement tva avant remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVAAvantRemise.put(codeTva, tva);
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVAAvantRemise.put(codeTva, tva );
			}
			//traitement remise
			if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(     mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100))  )       ));
//				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract(    mtHtTotal.multiply( (txRemHtDocument.divide(new BigDecimal(100))))     ) ) ;
				BigDecimal valeurInterTTC=mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(valeurInterTTC )) ;
				BigDecimal valeurInterHT=mtHtTotal.multiply( txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract( valeurInterHT )) ;
				montantTotalTtcAvecRemise.put(codeTva, mtTtcTotal);
				montantTotalHtAvecRemise.put(codeTva, mtHtTotal);
			} 
			//traitement tva après remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVA.put(codeTva, tva);
				montantTotalHtAvecRemise.put(codeTva, mtTtcTotal.subtract(tva));
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVA.put(codeTva, tva );
				montantTotalTtcAvecRemise.put(codeTva, mtHtTotal.add(tva));
			}
		}

		lignesTVA.clear();
		for (String codeTva : mtTVA.keySet()) {
			LigneTva ligneTva = new LigneTva();
			ligneTva.setCodeTva(codeTva);
			ligneTva.setTauxTva(tauxTVA.get(codeTva));
			ligneTva.setMtTva(mtTVA.get(codeTva));
			ligneTva.setMtTvaAvantRemise(mtTVAAvantRemise.get(codeTva));
			ligneTva.setMontantTotalHt(montantTotalHt.get(codeTva));
			ligneTva.setMontantTotalTtc(montantTotalTtc.get(codeTva));
			ligneTva.setMontantTotalHtAvecRemise(montantTotalHtAvecRemise.get(codeTva));
			ligneTva.setMontantTotalTtcAvecRemise(montantTotalTtcAvecRemise.get(codeTva));
//			ligneTva.setLibelle(taTvaDAO.findByCode(codeTva).getLibelleTva());
			ligneTva.setLibelle(libelleLignesTVA.get(codeTva));
			ligneTva.setNbLigneDocument(nbLigne.get(codeTva));
			lignesTVA.add(ligneTva);
		}
		
		//dispatcherTva();
	}

//	/**
//	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
//	 * Mise à jour de la propriété <code>lignesTVA</code>
//	 */
//	public void calculLignesTva() {
//
//		Map<String,BigDecimal> montantTotalHt = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> montantTotalTtc = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> montantTotalHtAvecRemise = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> montantTotalTtcAvecRemise = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> mtTVA = new HashMap<String,BigDecimal>();
//		Map<String,BigDecimal> tauxTVA = new HashMap<String,BigDecimal>();
//		Map<String,Integer> nbLigne = new HashMap<String,Integer>();
//		Map<String,String> libelleLignesTVA = new HashMap<String,String>();
//		String codeTVA = null;
////		TaTvaDAO taTvaDAO = new TaTvaDAO();
//		
//		/*
//		 * calcul de la TVA different en fonction de la propriete TTC
//		 */
//		BigDecimal ttcLigne = null;
//		BigDecimal htLigne = null;
//		for (Object ligne : lignes) {
//			//en commentaire pour ne pas refaire les calculs pendants les editions, 
//			//((TaLAcompte)ligne).calculMontant();
//			codeTVA = ((TaLAcompte)ligne).getCodeTvaLDocument();
//			if(codeTVA!=null && !codeTVA.equals("")) {
//				ttcLigne = ((TaLAcompte)ligne).getMtTtcLDocument();
//				htLigne = ((TaLAcompte)ligne).getMtHtLDocument();
//				if(montantTotalHt.containsKey(codeTVA)) {
//					montantTotalTtc.put(codeTVA,montantTotalTtc.get(codeTVA).add(ttcLigne));
//					montantTotalHt.put(codeTVA,montantTotalHt.get(codeTVA).add(htLigne));
//					montantTotalTtcAvecRemise.put(codeTVA,montantTotalTtcAvecRemise.get(codeTVA).add(ttcLigne));
//					montantTotalHtAvecRemise.put(codeTVA,montantTotalHtAvecRemise.get(codeTVA).add(htLigne));
//					nbLigne.put(codeTVA,nbLigne.get(codeTVA)+1);
//				} else {
//					montantTotalTtc.put(codeTVA,ttcLigne);
//					montantTotalHt.put(codeTVA,htLigne);
//					montantTotalTtcAvecRemise.put(codeTVA,ttcLigne);
//					montantTotalHtAvecRemise.put(codeTVA,htLigne);
//					tauxTVA.put(codeTVA,((TaLAcompte)ligne).getTauxTvaLDocument());
//					libelleLignesTVA.put(codeTVA, ((TaLAcompte)ligne).getLibTvaLDocument());
//					nbLigne.put(codeTVA,1);
//				}
//			}
//		}
//
//		for (String codeTva : montantTotalTtc.keySet()) {
//			//les 2 maps ont les meme cles
//			BigDecimal mtTtcTotal = montantTotalTtc.get(codeTva);
//			BigDecimal mtHtTotal = montantTotalHt.get(codeTva);
//			BigDecimal tva =null;
//			if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
////				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(     mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100))  )       ));
////				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract(    mtHtTotal.multiply( (txRemHtDocument.divide(new BigDecimal(100))))     ) ) ;
//				BigDecimal valeurInterTTC=mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(valeurInterTTC )) ;
//				BigDecimal valeurInterHT=mtHtTotal.multiply( txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract( valeurInterHT )) ;
//				montantTotalTtcAvecRemise.put(codeTva, mtTtcTotal);
//				montantTotalHtAvecRemise.put(codeTva, mtHtTotal);
//			} 
//
//			if (ttc==1) {
//				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
//				mtTVA.put(codeTva, tva);
//				montantTotalHtAvecRemise.put(codeTva, mtTtcTotal.subtract(tva));
//			} else {
//				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
//				mtTVA.put(codeTva, tva );
//				montantTotalTtcAvecRemise.put(codeTva, mtHtTotal.add(tva));
//			}
//		}
//
//		lignesTVA.clear();
//		for (String codeTva : mtTVA.keySet()) {
//			LigneTva ligneTva = new LigneTva();
//			ligneTva.setCodeTva(codeTva);
//			ligneTva.setTauxTva(tauxTVA.get(codeTva));
//			ligneTva.setMtTva(mtTVA.get(codeTva));
//			ligneTva.setMontantTotalHt(montantTotalHt.get(codeTva));
//			ligneTva.setMontantTotalTtc(montantTotalTtc.get(codeTva));
//			ligneTva.setMontantTotalHtAvecRemise(montantTotalHtAvecRemise.get(codeTva));
//			ligneTva.setMontantTotalTtcAvecRemise(montantTotalTtcAvecRemise.get(codeTva));
////			ligneTva.setLibelle(taTvaDAO.findByCode(codeTva).getLibelleTva());
//			ligneTva.setLibelle(libelleLignesTVA.get(codeTva));
//			ligneTva.setNbLigneDocument(nbLigne.get(codeTva));
//			lignesTVA.add(ligneTva);
//		}
//		
//		//dispatcherTva();
//	}

//	public TaAcompte clone() {
//		TaAcompte doc = new TaAcompte(true);
//		try {
//			//doc = (TaAcompte)super.clone();
//			doc.setIdDocument(0);
//			doc.setVersion(version);
//			doc.setTaTPaiement(taTPaiement);
//			doc.setTaTiers(taTiers);
//			//doc.setTaCPaiement(taCPaiement);
//			doc.setCodeDocument("");
//			doc.setDateDocument(dateDocument);
//			doc.setDateEchDocument(dateEchDocument);
//			doc.setDateLivDocument(dateLivDocument);
//			doc.setLibelleDocument("");
//
//			doc.setRemHtDocument(remHtDocument);
//			doc.setTxRemHtDocument(txRemHtDocument);
//			doc.setRemTtcDocument(remTtcDocument);
//			doc.setTxRemTtcDocument(txRemTtcDocument);
//			doc.setNbEDocument(nbEDocument);
//			doc.setTtc(ttc);
//			doc.setExport(export);
//			doc.setCommentaire(commentaire);
//			doc.setQuiCreeDocument(quiCreeDocument);
//			doc.setQuandCreeDocument(quandCreeDocument);
//			doc.setQuiModifDocument(quiModifDocument);
//			doc.setQuandModifDocument(quandModifDocument);
//			doc.setIpAcces(ipAcces);
//			doc.setVersionObj(versionObj);
//			
//			for (TaLAcompte ligne : getLignes()) {
//				TaLAcompte temp =ligne.clone(); 
//				temp.setTaDocument(doc);
//				doc.addLigne(temp);
//			}
//			TaInfosAcompte infos = getTaInfosDocument().clone();
//			infos.setTaDocument(doc);
//			doc.setTaInfosDocument(infos);
//		} catch(Exception cnse) {
//			logger.error("",cnse);
//		}
//		// on renvoie le clone
//		return doc;
//	}
	
	//@Transient
	@Column(name = "mt_ttc_avt_rem_globale_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_avt_rem_globale_calc",table = "ta_acompte",champEntite="mtTtcAvantRemiseGlobaleCalc", clazz = TaAcompte.class)
	public BigDecimal getMtTtcAvantRemiseGlobaleCalc() {
		return mtTtcAvantRemiseGlobaleCalc;
	}

	public void setMtTtcAvantRemiseGlobaleCalc(
			BigDecimal mtTtcAvantRemiseGlobaleCalc) {
		this.mtTtcAvantRemiseGlobaleCalc = mtTtcAvantRemiseGlobaleCalc;
	}
	
	//@Column(name = "reste_a_regler", precision = 15)
	//@LgrHibernateValidated(champ = "reste_a_regler",table = "ta_acompte",clazz = TaAcompte.class)
	@Transient
	public BigDecimal getResteARegler() {
		return this.getNetTtcCalc().subtract(calculAffectationTotale());
//		return resteARegler;
	}
	public void setResteARegler(BigDecimal resteARegler) {
		this.resteARegler = resteARegler;
	}

	
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codeDocument == null) ? 0 : codeDocument.hashCode());
		return result;
	}
	
	
	public void addRAcompte(TaRAcompte taRAcompte){
		if(!this.getTaRAcomptes().contains(taRAcompte))
			this.getTaRAcomptes().add(taRAcompte);		
	}
	public void removeRAcompte(TaRAcompte taRAcompte){
		this.getTaRAcomptes().remove(taRAcompte);	
	}
	
	public BigDecimal calculSommeAcomptes(){
		BigDecimal sommeAcompte = new BigDecimal(0);
		for (TaRAcompte taRAcompte : getTaRAcomptes()) {
			if(taRAcompte.isEtatDeSuppression()==false)
				sommeAcompte=sommeAcompte.add(taRAcompte.getAffectation());
		}
		return sommeAcompte;
	}
	

	public BigDecimal calculResteARegler(){
		//return BigDecimal.valueOf(100);
		return getNetTtcCalc().subtract(calculSommeAcomptes());
	}
	
	public BigDecimal calculSommeAffectationAvecDocument(TaFacture taDocument){
		BigDecimal sommeAcompte = new BigDecimal(0);
		for (TaRAcompte taRAcompte : getTaRAcomptes()) {
			if(taRAcompte.getTaAcompte()!=null && taRAcompte.isEtatDeSuppression() && taDocument!=null && taRAcompte.getTaFacture()!=null &&
					taRAcompte.getTaFacture().getCodeDocument().equals(taDocument.getCodeDocument()))
				sommeAcompte=sommeAcompte.add(taRAcompte.getAffectation());
		}
		return sommeAcompte;
	}
	
	public BigDecimal calculAffectationTotale(TaRAcompte taRAcompte){
		BigDecimal retour = BigDecimal.valueOf(0);
		for (TaRAcompte taRAcompteTmp : taRAcomptes) {
			if(taRAcompte==null || taRAcompte.getId()!=taRAcompteTmp.getId())
				retour=retour.add(taRAcompteTmp.getAffectation());
		}
		return retour;
	}
	public BigDecimal calculAffectationTotale(){
		BigDecimal retour = BigDecimal.valueOf(0);
		for (TaRAcompte taRAcompteTmp : taRAcomptes) {
			retour=retour.add(taRAcompteTmp.getAffectation());
		}
		return retour;
	}
	
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TaAcompte other = (TaAcompte) obj;
		if (codeDocument == null) {
			if (other.codeDocument != null)
				return false;
		} else if (!codeDocument.equals(other.codeDocument))
			return false;
		if (commentaire == null) {
			if (other.commentaire != null)
				return false;
		} else if (!commentaire.equals(other.commentaire))
			return false;
		if (dateDocument == null) {
			if (other.dateDocument != null)
				return false;
		} else if (!dateDocument.equals(other.dateDocument))
			return false;
		if (dateEchDocument == null) {
			if (other.dateEchDocument != null)
				return false;
		} else if (!dateEchDocument.equals(other.dateEchDocument))
			return false;
		if (dateLivDocument == null) {
			if (other.dateLivDocument != null)
				return false;
		} else if (!dateLivDocument.equals(other.dateLivDocument))
			return false;
		if (dateExport == null) {
			if (other.dateExport != null)
				return false;
		} else if (!dateExport.equals(other.dateExport))
			return false;
		if (gestionTVA != other.gestionTVA)
			return false;
		if (ipAcces == null) {
			if (other.ipAcces != null)
				return false;
		} else if (!ipAcces.equals(other.ipAcces))
			return false;
		if (legrain != other.legrain)
			return false;
		if (libelleDocument == null) {
			if (other.libelleDocument != null)
				return false;
		} else if (!libelleDocument.equals(other.libelleDocument))
			return false;
		if (lignesTVA == null) {
			if (other.lignesTVA != null)
				return false;
		} else if (!lignesTVA.equals(other.lignesTVA))
			return false;
		if (mtHtCalc == null) {
			if (other.mtHtCalc != null)
				return false;
		} else if (!mtHtCalc.equals(other.mtHtCalc))
			return false;
		if (mtTtcAvantRemiseGlobaleCalc == null) {
			if (other.mtTtcAvantRemiseGlobaleCalc != null)
				return false;
		} else if (!mtTtcAvantRemiseGlobaleCalc
				.equals(other.mtTtcAvantRemiseGlobaleCalc))
			return false;
		if (mtTtcCalc == null) {
			if (other.mtTtcCalc != null)
				return false;
		} else if (!mtTtcCalc.equals(other.mtTtcCalc))
			return false;
		if (mtTvaCalc == null) {
			if (other.mtTvaCalc != null)
				return false;
		} else if (!mtTvaCalc.equals(other.mtTvaCalc))
			return false;
		if (nbEDocument == null) {
			if (other.nbEDocument != null)
				return false;
		} else if (!nbEDocument.equals(other.nbEDocument))
			return false;
		if (netAPayer == null) {
			if (other.netAPayer != null)
				return false;
		} else if (!netAPayer.equals(other.netAPayer))
			return false;
		if (netHtCalc == null) {
			if (other.netHtCalc != null)
				return false;
		} else if (!netHtCalc.equals(other.netHtCalc))
			return false;
		if (netTtcCalc == null) {
			if (other.netTtcCalc != null)
				return false;
		} else if (!netTtcCalc.equals(other.netTtcCalc))
			return false;
		if (netTvaCalc == null) {
			if (other.netTvaCalc != null)
				return false;
		} else if (!netTvaCalc.equals(other.netTvaCalc))
			return false;
		if (quandCree == null) {
			if (other.quandCree != null)
				return false;
		} else if (!quandCree.equals(other.quandCree))
			return false;
		if (quandModif == null) {
			if (other.quandModif != null)
				return false;
		} else if (!quandModif.equals(other.quandModif))
			return false;
		if (quiCree == null) {
			if (other.quiCree != null)
				return false;
		} else if (!quiCree.equals(other.quiCree))
			return false;
		if (quiModif == null) {
			if (other.quiModif != null)
				return false;
		} else if (!quiModif.equals(other.quiModif))
			return false;
		if (regleDocument == null) {
			if (other.regleDocument != null)
				return false;
		} else if (!regleDocument.equals(other.regleDocument))
			return false;
		if (remHtDocument == null) {
			if (other.remHtDocument != null)
				return false;
		} else if (!remHtDocument.equals(other.remHtDocument))
			return false;
		if (remTtcDocument == null) {
			if (other.remTtcDocument != null)
				return false;
		} else if (!remTtcDocument.equals(other.remTtcDocument))
			return false;
		if (taInfosDocument == null) {
			if (other.taInfosDocument != null)
				return false;
		} else if (!taInfosDocument.equals(other.taInfosDocument))
			return false;
		if (taRDocuments == null) {
			if (other.taRDocuments != null)
				return false;
		} else if (!taRDocuments.equals(other.taRDocuments))
			return false;
		if (taTPaiement == null) {
			if (other.taTPaiement != null)
				return false;
		} else if (!taTPaiement.equals(other.taTPaiement))
			return false;
		if (taTiers == null) {
			if (other.taTiers != null)
				return false;
		} else if (!taTiers.equals(other.taTiers))
			return false;
		if (ttc == null) {
			if (other.ttc != null)
				return false;
		} else if (!ttc.equals(other.ttc))
			return false;
		if (txRemHtDocument == null) {
			if (other.txRemHtDocument != null)
				return false;
		} else if (!txRemHtDocument.equals(other.txRemHtDocument))
			return false;
		if (txRemTtcDocument == null) {
			if (other.txRemTtcDocument != null)
				return false;
		} else if (!txRemTtcDocument.equals(other.txRemTtcDocument))
			return false;
		if (version == null) {
			if (other.version != null)
				return false;
		} else if (!version.equals(other.version))
			return false;
		return true;
	}
	@Transient
	public boolean isGestionTVA() {
		return gestionTVA;
	}
	public void setGestionTVA(boolean gestionTVA) {
		this.gestionTVA = gestionTVA;
	}

	@Transient
	public BigDecimal getRemTtcIntermediaireDocument() {
		return mtTtcAvantRemiseGlobaleCalc.subtract(mtTtcCalc);
	}
	
	
	@Override
	@Transient
	public String getTypeDocument() {
		// TODO Auto-generated method stub
		return TYPE_DOC;
	}
	
	@Transient
	public int getEtatDeSuppression() {
		return etatDeSuppression;
	}
	
	@Transient
	public void setEtatDeSuppression(int etatDeSuppression) {
		etatDeSuppression = etatDeSuppression;
	}

//passage ejb => dans TaAcompteService
	
//	public void calculDateEcheanceAbstract(Integer report, Integer finDeMois){
//		calculDateEcheance(report,finDeMois);
//	}
//	public Date calculDateEcheance(Integer report, Integer finDeMois) {
//		TaTCPaiementDAO taTCPaiementDAO = new TaTCPaiementDAO();
//		TaTCPaiement typeCP = taTCPaiementDAO.findByCode(TaTCPaiement.C_CODE_TYPE_ACOMPTE);
//		TaCPaiement conditionDoc = null;
//		TaCPaiement conditionTiers = null;
//		TaCPaiement conditionSaisie = null;
//		
//		if(typeCP!=null) conditionDoc = typeCP.getTaCPaiement();
//		if(getTaTiers()!=null) conditionTiers = getTaTiers().getTaCPaiement();
//
//		if(report!=null || finDeMois!=null) { 
//			conditionSaisie = new TaCPaiement();
//			if(report!=null)
//				conditionSaisie.setReportCPaiement(report);
//			if(finDeMois!=null)
//				conditionSaisie.setFinMoisCPaiement(finDeMois);
//		}
//		
//		//on applique toute les conditions par ordre décroissant de priorité, la derniere valide est conservée
//		Date nouvelleDate = getDateDocument();
//		if(conditionDoc!=null) {
//			nouvelleDate = conditionDoc.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionTiers!=null) {
//			nouvelleDate = conditionTiers.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionSaisie!=null) {
//			nouvelleDate = conditionSaisie.calculeNouvelleDate(getDateDocument());
//		}
//		setDateEchDocument(nouvelleDate);
//		return nouvelleDate;
//	}

	@Transient
	public List<ILigneDocumentTiers> getLignesGeneral(){
		return this.lignes;
	}
	

	@Override
	@JsonIgnore
	public void setTaInfosDocument(IInfosDocumentTiers infosDocumentTiers) {
		this.taInfosDocument = (TaInfosAcompte) infosDocumentTiers;
		
	}
	
	@OneToOne(fetch = FetchType.EAGER, cascade = {CascadeType.ALL} , orphanRemoval=true )
	@JoinColumn(name = "id_mise_a_disposition")
	public TaMiseADisposition getTaMiseADisposition() {
		return taMiseADisposition;
	}

	public void setTaMiseADisposition(TaMiseADisposition taMiseADisposition) {
		this.taMiseADisposition = taMiseADisposition;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_export")
	@LgrHibernateValidated(champBd = "date_export",table = "ta_acompte",champEntite="dateExport", clazz = TaAcompte.class)
	public Date getDateExport() {
		return dateExport;
	}

	public void setDateExport(Date dateExport) {
		this.dateExport = dateExport;
	}
	
	@Transient
	public TaReglement getTaReglement() {
		return taReglement;
	}
	public void setTaReglement(TaReglement reglement) {
		this.taReglement = reglement;
	}
	
	@Transient
	public boolean isCreeReglement() {
		return creeReglement;
	}
	public void setCreeReglement(boolean creeReglement) {
		this.creeReglement = creeReglement;
	}
	

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_etat")
	@LgrHibernateValidated(champBd = "id_etat",table = "ta_etat",champEntite="TaEtat.idEtat", clazz = TaEtat.class)
	public TaEtat getTaEtat() {
		return this.taEtat;
	}

	public void setTaEtat(TaEtat taEtat) {
//		this.taEtat = taEtat;
	}
	
	
	@Column(name = "date_verrouillage")
	public Date getDateVerrouillage() {
		return dateVerrouillage;
	}

	public void setDateVerrouillage(Date dateVerrouillage) {
		this.dateVerrouillage=dateVerrouillage;
	}
	

	@Transient
	public Boolean getGestionLot() {
		// TODO Auto-generated method stub
		return null;
	}
	@Transient
	public void setGestionLot(Boolean gestionLot) {
		// TODO Auto-generated method stub
		
	}



	
	
	@Column(name = "nb_decimales_qte")
	public Integer getNbDecimalesQte() {
		return nbDecimalesQte;
	}

	public void setNbDecimalesQte(Integer nbDecimalesQte) {
		this.nbDecimalesQte = nbDecimalesQte;
	}

	@Column(name = "nb_decimales_prix")
	public Integer getNbDecimalesPrix() {
		return nbDecimalesPrix;
	}

	public void setNbDecimalesPrix(Integer nbDecimalesPrix) {
		this.nbDecimalesPrix = nbDecimalesPrix;
	}


	@PrePersist
	public void PrePersist() throws Exception{
		verifInfoDocument();
	}
	
	@PreUpdate
	public void PreUpdate() throws Exception{
		verifInfoDocument();
	}

	
	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAcompte", orphanRemoval = true)
	public Set<TaREtat> getTaREtats() {
		return this.taREtats;
	}

	public void setTaREtats(Set<TaREtat> taREtats) {
		this.taREtats = taREtats;
	}
	

	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAcompte", orphanRemoval = true)
	public Set<TaHistREtat> getTaHistREtats() {
		return this.taHistREtats;
	}

	public void setTaHistREtats(Set<TaHistREtat> taHistREtats) {
		this.taHistREtats = taHistREtats;
	}
	
	
	public void addREtat(TaEtat taEtat) {
		TaHistREtat hist=new TaHistREtat();
		TaREtat rEtat=getTaREtat();
		if(rEtat!=null) {
			hist.setTaEtat(getTaREtat().getTaEtat());
			hist.setTaAcompte(this);
			this.getTaHistREtats().add(hist);
		}else rEtat=new TaREtat();
		
		rEtat.setTaEtat(taEtat);
		rEtat.setTaAcompte(this);
		this.setTaREtat(rEtat);
		this.getTaREtats().add(rEtat);
	}
	@Override
	public Boolean gereStock() {
		// TODO Auto-generated method stub
		return false;
	}


	
	
	@OneToMany(cascade = CascadeType.ALL,fetch = FetchType.LAZY, mappedBy = "taBonliv", orphanRemoval=true)
	public Set<TaRReglementLiaison> getTaRReglementLiaisons() {
		return taRReglementLiaisons;
	}

	public void setTaRReglementLiaisons(Set<TaRReglementLiaison> taRReglementLiaisons) {
		this.taRReglementLiaisons = taRReglementLiaisons;
	}

	
	@Transient
	@XmlTransient
	public TaRReglementLiaison getTaRReglementLiaison() {
		return taRReglementLiaison;
	}

	public void setTaRReglementLiaison(TaRReglementLiaison taRReglementLiaison) {
		this.taRReglementLiaison = taRReglementLiaison;
	}
	
	public void addRReglementLiaison(TaRReglementLiaison taReglementLiaison){
		if(!this.getTaRReglementLiaisons().contains(taReglementLiaison)){
			taReglementLiaison.setTaAcompte(this);
			this.getTaRReglementLiaisons().add(taReglementLiaison);	
		}
	}
	public void removeReglementLiaison(TaRReglementLiaison taRReglementLiaison){
		this.getTaRReglementLiaisons().remove(taRReglementLiaison);
	}
	
	

	public void calculRegleDocument(){
		System.out.println("===**calculRegleDocument**=== Transfert de code metier des entites vers les services, à bien vérifier Facture "+this.codeDocument);
			setRegleDocument(calculSommeReglementsIntegresEcran());
			setResteARegler(getNetTtcCalc().subtract(regleDocument));
		
	}

	public BigDecimal calculResteAReglerComplet(){
//		setRegleCompletDocument(calculSommeReglementsComplet());
		resteAReglerComplet=getNetTtcCalc().subtract(calculSommeReglementsComplet());
		return resteAReglerComplet;
	}

	public BigDecimal calculSommeReglementsComplet(){
		BigDecimal sommeReglements = new BigDecimal(0);
			for (TaRReglementLiaison taRReglementLiaison : getTaRReglementLiaisons()) {
				if(taRReglementLiaison.getTaAcompte()!=null 
						&& ((taRReglementLiaison.getEtatDeSuppression()&IHMEtat.suppression)==0))
					sommeReglements=sommeReglements.add(taRReglementLiaison.getAffectation());
			}
		
		return sommeReglements;
	}
	
	public BigDecimal calculSommeReglementsComplet(TaRReglementLiaison taRReglementEnCours){
		BigDecimal sommeReglements = new BigDecimal(0);

			for (TaRReglementLiaison taRReglementLiaison : getTaRReglementLiaisons()) {
				if(taRReglementLiaison.getTaAcompte()!=null 
						&& ((taRReglementLiaison.getEtatDeSuppression()&IHMEtat.suppression)==0) 
						&& taRReglementEnCours.getId()!=taRReglementLiaison.getId())
					sommeReglements=sommeReglements.add(taRReglementLiaison.getAffectation());
			}

		return sommeReglements;
	}


	
	
	public BigDecimal calculSommeReglementsIntegresEcran(){
		Integer nbReglement=0;
		BigDecimal sommeReglements = new BigDecimal(0);

		if(getTaRReglementLiaisons()!=null && getTaRReglementLiaisons().size()>0){			
		for (TaRReglementLiaison taRReglement : getTaRReglementLiaisons()) {
			if(taRReglement.getTaAcompte()!=null && (taRReglement.getEtat()&IHMEtat.integre)!=0 
					&& ((taRReglement.getEtatDeSuppression()&IHMEtat.suppression)==0))
				sommeReglements=sommeReglements.add(taRReglement.getAffectation());
			nbReglement++;
		}
		if(taRReglementLiaison!=null && !getTaRReglementLiaisons().contains(taRReglementLiaison)&& 
				!multiReglement())//((taRReglement.getEtatDeSuppression()&IHMEtat.multiple)==0)
			if(taRReglementLiaison.getAffectation()!=null){
				sommeReglements=sommeReglements.add(taRReglementLiaison.getAffectation());
				nbReglement++;
			}
		}
		logger.debug(sommeReglements);
		logger.debug(nbReglement);	
		return sommeReglements;
}
	

	public boolean multiReglement(){
		int nb=0;
		for (TaRReglementLiaison taReglement : getTaRReglementLiaisons()) {
			if (((taReglement.getEtatDeSuppression()&IHMEtat.suppression)==0)
					&& (taReglement.getEtat()&IHMEtat.integre)!=0)
			{
				nb++;
			}
		}		
		return nb>1;
	}
	
	public boolean multiReglementReel(){
		int nb =0;
		nb=getTaRReglementLiaisons().size();
		return nb>1;
	}

	
	@Transient
	@XmlTransient
	public BigDecimal getResteAReglerEcran() {		
		this.resteARegler= netTtcCalc.subtract(calculSommeReglementsIntegresEcran());
		return resteARegler;
	}
	
	@Transient
	public BigDecimal getRegleCompletDocument(TaRReglementLiaison taRReglementEnCours) {
		
		System.out.println("===**getRegleCompletDocument**=== Transfert de code metier des entites vers les services, à bien vérifier Facture "+this.codeDocument);
		//passage ejb => dans TaFactureService
		regleCompletDocument = calculSommeReglementsComplet(taRReglementEnCours);
		setResteAReglerComplet(getNetTtcCalc().subtract(regleCompletDocument));		
		
		return regleCompletDocument;
	}
	

	
	public void setRegleCompletDocument(BigDecimal regleCompletDocument) {
		this.regleCompletDocument = regleCompletDocument;
	}
	@Transient
	public BigDecimal getResteAReglerComplet() {
		
		System.out.println("===**getResteAReglerComplet**=== Transfert de code metier des entites vers les services, à bien vérifier Facture "+this.codeDocument);
		//passage ejb => dans TaFactureService
		resteAReglerComplet = getNetTtcCalc().subtract(calculSommeReglementsComplet());
		
		return resteAReglerComplet;
	}
	
	public void setResteAReglerComplet(BigDecimal resteAReglerComplet) {
		this.resteAReglerComplet = resteAReglerComplet;
	}

	public boolean reglementExistant(){
		boolean retour=false;
		for (TaRReglementLiaison rr : getTaRReglementLiaisons()) {
			retour=rr.getId()!=0;
			if(retour)return retour;
		};
		return retour;
	}
	public BigDecimal calculRegleDocumentComplet(){
		System.out.println("===**calculRegleDocumentComplet**=== Transfert de code metier des entites vers les services, à bien vérifier Facture "+this.codeDocument);
		regleCompletDocument=calculSommeReglementsComplet();
		setResteAReglerComplet(getNetTtcCalc().subtract(regleCompletDocument));
		return this.regleCompletDocument;
	}

	
	@Transient
	public BigDecimal getRegleCompletDocument() {
		
		System.out.println("===**getRegleCompletDocument**=== Transfert de code metier des entites vers les services, à bien vérifier Facture "+this.codeDocument);
		//passage ejb => dans TaFactureService
		regleCompletDocument = calculSommeReglementsComplet();
		setResteAReglerComplet(getNetTtcCalc().subtract(regleCompletDocument));		
		
		return regleCompletDocument;
	}
	@Transient
	public String getNumeroCommandeFournisseur() {
		// TODO Auto-generated method stub
		return null;
	}

	@Column(name = "utilise_unite_saisie")
	public Boolean getUtiliseUniteSaisie() {
		return utiliseUniteSaisie;
	}

	public void setUtiliseUniteSaisie(Boolean utiliseUniteSaisie) {
		this.utiliseUniteSaisie = utiliseUniteSaisie;
	}

}

