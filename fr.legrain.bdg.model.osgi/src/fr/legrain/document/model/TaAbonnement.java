package fr.legrain.document.model;


import java.math.BigDecimal;
import java.math.MathContext;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.OrderBy;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlTransient;

import org.apache.log4j.Logger;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import com.fasterxml.jackson.annotation.JsonIgnore;

import fr.legrain.abonnement.model.TaFrequence;
import fr.legrain.abonnement.stripe.model.TaStripeCoupon;
import fr.legrain.abonnement.stripe.model.TaStripeCustomer;
import fr.legrain.abonnement.stripe.model.TaStripeSource;
//import fr.legrain.abonnement.stripe.model.TaStripeSubscription;
import fr.legrain.document.dto.IDocumentCalcul;
import fr.legrain.document.dto.IDocumentTiers;
import fr.legrain.document.dto.IInfosDocumentTiers;
import fr.legrain.document.dto.ILigneDocumentTiers;
import fr.legrain.document.events.SWTModificationDocumentEvent;
import fr.legrain.lib.data.ChangeModeEvent;
import fr.legrain.lib.data.ChangeModeListener;
import fr.legrain.lib.data.EnumModeObjet;
import fr.legrain.lib.data.ExceptLgr;
import fr.legrain.lib.data.LibCalcul;
import fr.legrain.tiers.model.TaAdresse;
import fr.legrain.tiers.model.TaCPaiement;
import fr.legrain.tiers.model.TaTiers;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaAbonnement generated by hbm2java
 */
@Entity
@EntityListeners(SwtDocumentListener.class)
@Table(name = "ta_abonnement", uniqueConstraints = @UniqueConstraint(columnNames = "code_document"))
@NamedQueries(value = { 
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_DATE, query="select a from TaAbonnement a where a.taTiers.codeTiers like :codeTiers and  a.dateDocument between :dateDeb and :dateFin order by a.codeDocument"), 
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_TIERS_AND_CODE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like :codeTiers and f.codeDocument like :codeDocument order by f.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_DATE_LIGHT, query="select f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTtcCalc from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers where tiers.codeTiers like :codeTiers and f.dateDocument between :dateDeb and :dateFin order by f.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_TIERS_AND_CODE, query="select a from TaAbonnement a where a.taTiers.codeTiers like codeTiers and a.codeDocument between :codeDeb and :codeFin order by a.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_CODE, query="select a from TaAbonnement a where a.taTiers.codeTiers like :codeTiers and  a.codeDocument between :codeDeb and :codeFin order by a.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_DATE_PARDATE, query="select a from TaAbonnement a where a.taTiers.codeTiers like :codeTiers and  a.dateDocument between :dateDeb and :dateFin order by a.dateDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_TIERS, query="select a from TaAbonnement a where a.taTiers.codeTiers like :codeTiers"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_TIERS_AND_DATE, query="select a from TaAbonnement a where a.taTiers.codeTiers like :codeTiers and a.dateDocument between :dateDeb and :dateFin order by a.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_ETAT_DATE, query="select a from TaAbonnement a where a.dateEchDocument between :dateDeb and :dateFin and a.taEtat.codeEtat = :codeEtat order by a.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_ETAT_ENCOURS_DATE, query="select a from TaAbonnement a where a.dateEchDocument < :date and a.taEtat is null and a.taRDocuments is empty order by a.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_ETAT_TIERS_DATE, query="select a from TaAbonnement a where a.taTiers.codeTiers like :codeTiers and a.dateEchDocument between :dateDeb and :dateFin and a.taEtat.codeEtat = :codeEtat order by a.codeDocument"),
//		@NamedQuery(name=TaAbonnement.QN.FIND_BY_ETAT_TIERS_ENCOURS_DATE, query="select a from TaAbonnement a where a.taTiers.codeTiers like :codeTiers and a.dateEchDocument < :date and a.taEtat is null and a.taRDocuments is empty order by a.codeDocument"),
		@NamedQuery(name=TaAbonnement.QN.FIND_ALL_LIGHT, query="select new fr.legrain.document.dto.TaAbonnementDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers, infos.nomEntreprise,"
				+ " f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc, f.dateSuspension, f.suspension, f.dateFin, f.dateDebut,f.dateAnnulation, f.commentaireAnnulation, f.typeAbonnement, f.dateDebutPeriodeActive, " + 
				"	f.dateFinPeriodeActive, f.reconductionTacite) "
				+ " from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers order by f.codeDocument"),
		@NamedQuery(name=TaAbonnement.QN.SUM_CA_TOTAL_LIGHT_ANNULE_PERIODE, 
		query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
				+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
				+ " from TaAbonnement f"
				+ " where f.dateAnnulation between :dateDebut and :dateFin and f.taTiers.codeTiers like :codeTiers"),
		@NamedQuery(name=TaAbonnement.QN.COUNT_TOTAL_LIGHT_ANNULE_PERIODE, 
		query="select count(f)"
				+ " from TaAbonnement f"
				+ " where f.dateAnnulation between :dateDebut and :dateFin and f.taTiers.codeTiers like :codeTiers"),
		@NamedQuery(name=TaAbonnement.QN.FIND_ALL_LIGHT_ANNULE_PERIODE, query="select new fr.legrain.document.dto.TaAbonnementDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers, infos.nomEntreprise,"
				+ " f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc, f.dateSuspension, f.suspension, f.dateFin, f.dateDebut,f.dateAnnulation, f.commentaireAnnulation) "
				+ " from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers"
				+ " where f.dateAnnulation between :dateDebut and :dateFin and f.taTiers.codeTiers like :codeTiers"
				+ " order by f.codeDocument"),
		@NamedQuery(name=TaAbonnement.QN.FIND_ALL_LIGHT_ANNULE, query="select new fr.legrain.document.dto.TaAbonnementDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers, infos.nomEntreprise,"
				+ " f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc, f.dateSuspension, f.suspension, f.dateFin, f.dateDebut,f.dateAnnulation, f.commentaireAnnulation) "
				+ " from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers"
				+ " where f.dateAnnulation is not null and f.taTiers.codeTiers like :codeTiers"
				+ " order by f.codeDocument"),
		
		@NamedQuery(name=TaAbonnement.QN.FIND_ALL_LIGHT_EN_COURS_PERIODE, query="select new fr.legrain.document.dto.TaAbonnementDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers, infos.nomEntreprise,"
				+ " f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc, f.dateSuspension, f.suspension, f.dateFin, f.dateDebut,f.dateAnnulation, f.commentaireAnnulation) "
				+ " from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers"
				+ " where f.dateAnnulation is null "
				+ " and f.suspension = false "
				+ " and  f.dateDebut between :dateDebut and :dateFin "
				+ " and f.taTiers.codeTiers like :codeTiers"
				+ " order by f.codeDocument"),
		@NamedQuery(name=TaAbonnement.QN.SUM_CA_TOTAL_LIGHT_EN_COURS_PERIODE, 
		query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
				+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
				+ " from TaAbonnement f"
				+ " where f.dateAnnulation is null "
				+ " and f.suspension = false "
				+ " and  f.dateDebut between :dateDebut and :dateFin "
				+ " and f.taTiers.codeTiers like :codeTiers"),
		@NamedQuery(name=TaAbonnement.QN.COUNT_TOTAL_LIGHT_EN_COURS_PERIODE, 
		query="select count(f)"
				+ " from TaAbonnement f"
				+ " where f.dateAnnulation is null "
				+ " and f.suspension = false "
				+ " and  f.dateDebut between :dateDebut and :dateFin "
				+ " and f.taTiers.codeTiers like :codeTiers"),
		@NamedQuery(name=TaAbonnement.QN.FIND_ALL_LIGHT_SUSPENDU_PERIODE, query="select new fr.legrain.document.dto.TaAbonnementDTO("
				+ " f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers, infos.nomEntreprise,"
				+ " f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc, f.dateSuspension, f.suspension, f.dateFin, f.dateDebut,f.dateAnnulation, f.commentaireAnnulation) "
				+ " from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers"
				+ " where f.dateAnnulation is null "
				+ " and f.suspension = true "
				//+ " and f.dateSuspension between :dateDebut and :dateFin "
				+ " and f.taTiers.codeTiers like :codeTiers"
				+ " order by f.codeDocument"),
		
		@NamedQuery(name=TaAbonnement.QN.FIND_ALL_LIGHT_EN_COURS_DTO_ARRIVANT_A_ECHEANCE_DANS_X_JOURS, query="select new fr.legrain.document.dto.TaAbonnementDTO("
				+ "f.idDocument, f.codeDocument, f.dateDocument, f.libelleDocument, tiers.codeTiers, infos.nomTiers,infos.prenomTiers, infos.nomEntreprise,"
				+ " f.dateEchDocument,f.dateExport,f.netHtCalc,f.netTvaCalc,f.netTtcCalc, f.dateSuspension, f.suspension, f.dateFin, f.dateDebut,f.dateAnnulation, f.commentaireAnnulation, f.typeAbonnement, f.dateDebutPeriodeActive, " 
				+ "	f.dateFinPeriodeActive, f.reconductionTacite) "
				+ " from TaAbonnement f join f.taInfosDocument infos join f.taTiers tiers"
				+ " where f.dateAnnulation is null "
				//+ " and (f.suspension is null or f.suspension = false)"
				+ " and f.dateFinPeriodeActive between :now and :nowPlusXJours "
				+ " and f.taTiers.codeTiers like :codeTiers"
				+ " order by f.codeDocument"),
		
		
		
		@NamedQuery(name=TaAbonnement.QN.SUM_CA_TOTAL_LIGHT_SUSPENDU_PERIODE, 
		query="select new fr.legrain.document.dto.DocumentChiffreAffaireDTO("
				+ " coalesce(sum(f.netHtCalc),0),coalesce(sum(f.netTvaCalc),0),coalesce(sum(f.netTtcCalc),0)) "
				+ " from TaAbonnement f"
				+ " where f.dateAnnulation is null "
				+ " and f.suspension = true "
				//+ " and f.dateSuspension between :dateDebut and :dateFin "
				+ " and f.taTiers.codeTiers like :codeTiers"),
		@NamedQuery(name=TaAbonnement.QN.COUNT_TOTAL_LIGHT_SUSPENDU_PERIODE, 
		query="select count(f)"
				+ " from TaAbonnement f"
				+ " where f.dateAnnulation is null "
				+ " and f.suspension = true "
				//+ " and f.dateSuspension between :dateDebut and :dateFin "
				+ " and f.taTiers.codeTiers like :codeTiers")
		
		
		
})		

	public class TaAbonnement extends SWTDocument implements ChangeModeListener, java.io.Serializable, IDocumentTiers,IDocumentCalcul {

	private static final long serialVersionUID = 1276932676269677958L;
	
	public static final String TYPE_DOC = "Abonnement";
	public static final String PATH_ICONE_COULEUR = "dashboard/abonnement.svg";
	public static final String PATH_ICONE_BLANC = "abonnement-blanc.png";
	public static final String PATH_ICONE_GRIS = "abonnement-gris.png";
	
	public static final String TYPE_SANS_ENGAGEMENT ="sans_engagement";
	public static final String TYPE_AVEC_ENGAGEMENT = "avec_engagement";
	
	public static class QN {
		public static final String FIND_BY_DATE = "TaAbonnement.findEntre2Date";
		public static final String FIND_BY_DATE_LIGHT = "TaAbonnement.findEntre2DateLight";
		public static final String FIND_BY_TIERS_AND_CODE = "TaAbonnement.findEntre2CodeParCode";
		public static final String FIND_BY_TIERS_AND_CODE_LIGHT = "TaAbonnement.findEntre2CodeParCodeLight";
		public static final String FIND_BY_DATE_PARDATE = "TaAbonnement.findEntre2DateParDate";
		public static final String FIND_BY_CODE = "TaAbonnement.findEntre2Code";
		public static final String FIND_BY_TIERS = "TaAbonnement.findTiers";
		public static final String FIND_BY_TIERS_AND_DATE = "TaAbonnement.findTiersEntre2Date";
		public static final String FIND_BY_ETAT_DATE = "TaAbonnement.findEtatDate";
		public static final String FIND_BY_ETAT_ENCOURS_DATE = "TaAbonnement.findEtatEnCoursDate";
		public static final String FIND_BY_ETAT_TIERS_DATE = "TaAbonnement.findTiersEtat";
		public static final String FIND_BY_ETAT_TIERS_ENCOURS_DATE = "TaAbonnement.findTiersEtatEnCoursDate";
		public static final String FIND_ALL_LIGHT = "TaAbonnement.findAllLight";
		public static final String FIND_ALL_LIGHT_PERIODE = "TaAbonnement.findAllLightPeriode";
		public static final String FIND_TRANSFORME_LIGHT_PERIODE = "TaAbonnement.findAbonnementTransfoPeriodeDTO";
		public static final String FIND_NON_TRANSFORME_LIGHT_PERIODE = "TaAbonnement.findAbonnementNonTransfosDTO";		
		public static final String FIND_NON_TRANSFORME_ARELANCER_LIGHT_PERIODE = "TaAbonnement.findAbonnementNonTransfosARelancerDTO";
		
		public static final String FIND_ALL_LIGHT_ANNULE_PERIODE="TaAbonnement.findAllLightAnnulePeriode";
		public static final String FIND_ALL_LIGHT_ANNULE="TaAbonnement.findAllLightAnnule";
		public static final String FIND_ALL_LIGHT_EN_COURS_PERIODE="TaAbonnement.findAllLightEnCoursPeriode";
		public static final String COUNT_TOTAL_LIGHT_EN_COURS_PERIODE="TaAbonnement.countTotalLightEnCoursPeriode";
		
		public static final String FIND_ALL_LIGHT_SUSPENDU_PERIODE="TaAbonnement.findAllLightSuspenduPeriode";
		public static final String SUM_CA_TOTAL_LIGHT_SUSPENDU_PERIODE = "TaAbonnement.caAbonnementTotalSuspenduPeriodeDTO";
		public static final String COUNT_TOTAL_LIGHT_SUSPENDU_PERIODE = "TaAbonnement.countTotalSuspenduPeriodeDTO";
		
		
		public static final String SUM_CA_TOTAL_NON_TRANSFORME_ARELANCER_LIGHT_PERIODE = "TaAbonnement.CaAbonnementNonTransfosARelancerDTO";

		public static final String SUM_CA_JOUR_LIGTH_PERIODE = "TaAbonnement.caAbonnementJourPeriodeDTO";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE = "TaAbonnement.caAbonnementMoisPeriodeDTO";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE = "TaAbonnement.caAbonnementAnneePeriodeDTO";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE = "TaAbonnement.caAbonnementTotalPeriodeDTO";
		
		public static final String SUM_CA_TOTAL_LIGHT_ANNULE_PERIODE = "TaAbonnement.caAbonnementTotalAnnulePeriodeDTO";
		public static final String SUM_CA_TOTAL_LIGHT_EN_COURS_PERIODE = "TaAbonnement.caAbonnementTotalEnCoursPeriodeDTO";
		public static final String COUNT_TOTAL_LIGHT_ANNULE_PERIODE = "TaAbonnement.countTotalAnnulePeriodeDTO";

		public static final String SUM_CA_JOUR_LIGTH_PERIODE_NON_TRANSFORME = "TaAbonnement.caAbonnementJourPeriodeDTONonTransforme";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE_NON_TRANSFORME = "TaAbonnement.caAbonnementMoisPeriodeDTONonTransforme";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE_NON_TRANSFORME = "TaAbonnement.caAbonnementAnneePeriodeDTONonTransforme";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE_NON_TRANSFORME = "TaAbonnement.caAbonnementTotalPeriodeDTONonTransforme";

		public static final String SUM_CA_JOUR_LIGTH_PERIODE_NON_TRANSFORME_A_RELANCER = "TaAbonnement.caAbonnementJourPeriodeDTONonTransformeARelancer";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE_NON_TRANSFORME_A_RELANCER = "TaAbonnement.caAbonnementMoisPeriodeDTONonTransformeARelancer";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE_NON_TRANSFORME_A_RELANCER = "TaAbonnement.caAbonnementAnneePeriodeDTONonTransformeARelancer";
		
		
		public static final String SUM_CA_JOUR_LIGTH_PERIODE_TRANSFORME = "TaAbonnement.caAbonnementJourPeriodeDTOTransforme";
		public static final String SUM_CA_MOIS_LIGTH_PERIODE_TRANSFORME = "TaAbonnement.caAbonnementMoisPeriodeDTOTransforme";
		public static final String SUM_CA_ANNEE_LIGTH_PERIODE_TRANSFORME = "TaAbonnement.caAbonnementAnneePeriodeDTOTransforme";
		public static final String SUM_CA_TOTAL_LIGTH_PERIODE_TRANSFORME = "TaAbonnement.caAbonnementTotalPeriodeDTOTransforme";
		
		public static final String FIND_ARTICLES_PAR_TIERS_PAR_MOIS = "TaAbonnement.articlesProformaMoisPeriode";
		public static final String FIND_ARTICLES_PAR_TIERS_TRANSFORME = "TaAbonnement.articlesProformaPeriodeDTOTransforme";
		public static final String FIND_ARTICLES_PAR_TIERS_NON_TRANSFORME = "TaAbonnement.articlesProformaPeriodeDTONonTransforme";
		public static final String FIND_ARTICLES_PAR_TIERS_NON_TRANSFORME_ARELANCER = "TaAbonnement.articlesProformaPeriodeDTONonTransformeARelancer";		
		
		public static final String FIND_ALL_LIGHT_EN_COURS_DTO_ARRIVANT_A_ECHEANCE_DANS_X_JOURS="TaAbonnement.findAllEnCoursDTOArrivantAEcheanceDansXJours";
	}

//	private int idDocument;
	private String version;
	private TaTPaiement taTPaiement;
	private TaTiers taTiers;
	//private TaCPaiement taCPaiement;
	private String codeDocument;
	private Date dateDocument;
	private Date dateEchDocument;
	private Date dateLivDocument;
	private Date dateExport;
	private String libelleDocument;
	private BigDecimal remHtDocument= new BigDecimal(0);
	private BigDecimal txRemHtDocument= new BigDecimal(0);
	private BigDecimal remTtcDocument= new BigDecimal(0);
	private BigDecimal txRemTtcDocument= new BigDecimal(0);
	private Integer nbEDocument= 0;
	private Integer ttc= 0;
//	private Integer export= 0;
	private BigDecimal regleDocument = new BigDecimal(0);
	private String commentaire;
//	private String quiCree;
//	private Date quandCree;
//	private String quiModif;
//	private Date quandModif;
	private String ipAcces;
//	private Integer versionObj;
	private Date dateVerrouillage;
	private TaEtat taEtat;
//	private TaStripeSubscription taStripeSubscription;
	private TaInfosAbonnement taInfosDocument;
	private TaMiseADisposition taMiseADisposition;
	private Set<TaRDocument> taRDocuments = new HashSet<TaRDocument>(0);
//	private Set<TaRAcompte> taRAcomptes = new HashSet<TaRAcompte>(0);
	@Transient
	private ArrayList<LigneTva> lignesTVA = null; //ensemble des lignes de tva du document
	

	@Transient
	private BigDecimal mtTtcAvantRemiseGlobaleCalc = new BigDecimal(0);
	@Transient
	private boolean gestionTVA = true;
	@Transient
	static Logger logger = Logger.getLogger(TaAbonnement.class.getName());

//	@Transient
	private BigDecimal mtTtcCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal mtHtCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal mtTvaCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netTtcCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netHtCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netTvaCalc = new BigDecimal(0);
//	@Transient
	private BigDecimal netAPayer = new BigDecimal(0);
	
	@Transient
	private BigDecimal remTtcIntermediaireDocument = new BigDecimal(0);
	
	@Transient
	private boolean legrain = false;
	
	protected Integer nbDecimalesPrix;
	protected Integer nbDecimalesQte;
	
	private TaFrequence taFrequence;
	
	private Date dateSuspension;
	private Boolean suspension = true;
	
	//champs venant de taStripeSubscription
	private String idExterne;
	private TaStripeCustomer taStripeCustomer;
	private Date dateDebut;
	private Date dateFin;
	private String billing;
	private Boolean prorata = true;
	private Integer daysUntilDue;
	private TaStripeCoupon taStripeCoupon;
	private TaStripeSource taStripeSource;
	private Date dateAnnulation;
	private String commentaireAnnulation;
	
	
	private String typeAbonnement;
	
	private Date dateDebutPeriodeActive;
	private Date dateFinPeriodeActive;
	
	private Boolean reconductionTacite = false;
	private Boolean reconductionTaciteEngagement = false;
	
	private Integer nbMoisDureeEngagement;
	private Integer nbMoisFrequenceFacturation = 1;
	private Integer nbMoisFrequencePaiement = 1;
	
	private Date dateFinEngagement;
	
	

	private Set<TaRReglementLiaison> taRReglementLiaisons = new HashSet<TaRReglementLiaison>(0);
	
	protected Boolean utiliseUniteSaisie = true;

	
	public TaAbonnement(boolean legrain) {
		this.legrain = legrain;
		lignes = new ArrayList<TaLAbonnement>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}
	public TaAbonnement() {
		lignes = new ArrayList<TaLAbonnement>(0);
		lignesTVA = new ArrayList<LigneTva>();
	}
	
	public TaAbonnement(int idAbonnement) {
		this.idDocument = idAbonnement;
		lignes = new ArrayList<TaLAbonnement>(0);
		lignesTVA = new ArrayList<LigneTva>();		
	}
	
	public TaAbonnement(String oldCodeAbonnement) {
		super(oldCodeAbonnement);
		legrain = true;
		lignes = new ArrayList<TaLAbonnement>(0);
		this.lignesTVA = new ArrayList<LigneTva>();
		//passage ejb
//		this.modeDocument = EnumModeObjet.C_MO_INSERTION;
	}
	
	public TaAbonnement(int idAbonnement, TaTPaiement taTPaiement, TaTiers taTiers,
			TaCPaiement taCPaiement,TaAdresse taAdresseByIdAdresse, 
			TaAdresse taAdresseByIdAdresseLiv,String codeAbonnement,
			Date dateAbonnement, Date dateEchAbonnement,Date dateLivAbonnement,
			String libelleAbonnement, 
			BigDecimal remHtAbonnement, BigDecimal txRemHtAbonnement,
			BigDecimal remTtcAbonnement, BigDecimal txRemTtcAbonnement, Integer nbEAbonnement,
			Integer ttc, Integer export, String commentaire, String quiCreeAbonnement,
			Date quandCreeAbonnement, String quiModifAbonnement, Date quandModifAbonnement,
			String ipAcces, Integer versionObj, List<TaLAbonnement> taLAbonnement,
			TaInfosAbonnement taInfosAbonnementes, Set<TaRDocument> taRDocuments) {
		this.idDocument = idAbonnement;
		this.taTPaiement = taTPaiement;
		this.taTiers = taTiers;
		//this.taCPaiement = taCPaiement;
		this.codeDocument = codeAbonnement;
		this.dateDocument = dateAbonnement;
		this.dateEchDocument = dateEchAbonnement;
		this.dateLivDocument = dateLivAbonnement;
		this.libelleDocument = libelleAbonnement;
		this.remHtDocument = remHtAbonnement;
		this.txRemHtDocument = txRemHtAbonnement;
		this.remTtcDocument = remTtcAbonnement;
		this.txRemTtcDocument = txRemTtcAbonnement;
		this.nbEDocument = nbEAbonnement;
		this.ttc = ttc;
//		this.export = export;
		this.commentaire = commentaire;
		this.quiCree = quiCreeAbonnement;
		this.quandCree = quandCreeAbonnement;
		this.quiModif = quiModifAbonnement;
		this.quandModif = quandModifAbonnement;
		this.ipAcces = ipAcces;
		this.versionObj = versionObj;
		this.lignes = taLAbonnement;
		this.taInfosDocument = taInfosAbonnementes;
//		this.taRDocuments = taRDocuments;
	}

//	@Id
//	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "gen_abonnement")
//	@Column(name = "id_document", unique = true, nullable = false)
//	@LgrHibernateValidated(champ = "id_document",table = "ta_abonnement",clazz = TaAbonnement.class)
//	public int getIdDocument() {
//		return this.idDocument;
//	}
//
//	public void setIdDocument(int idAbonnement) {
//		this.idDocument = idAbonnement;
//	}

	@Column(name = "version", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_t_paiement")
	@LgrHibernateValidated(champBd = "id_t_paiement",table = "ta_t_paiement",champEntite="TaTPaiement.idTPaiement", clazz = TaTPaiement.class)
	public TaTPaiement getTaTPaiement() {
		return this.taTPaiement;
	}

	public void setTaTPaiement(TaTPaiement taTPaiement) {
		this.taTPaiement = taTPaiement;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_tiers")
	@LgrHibernateValidated(champBd = "id_tiers",table = "ta_tiers",champEntite="TaTiers.idTiers", clazz = TaTiers.class)
	public TaTiers getTaTiers() {
		return this.taTiers;
	}

	public void setTaTiers(TaTiers taTiers) {
//		if(taRAcomptes.size()==0 || rechercheSiMemeTiers(taTiers))
			this.taTiers = taTiers;
	}

	public boolean rechercheSiMemeTiers(TaTiers taTiers){
//		for (TaRAcompte acompte : taRAcomptes) {
//			if(acompte.getTaAcompte().getTaTiers()!=null)
//				if (!acompte.getTaAcompte().getTaTiers().equals(taTiers))
//					return false;
//		}
		return true;
	}
//	@ManyToOne(fetch = FetchType.LAZY)
//	@JoinColumn(name = "id_c_paiement")
//	@LgrHibernateValidated(champ = "id_c_paiement",table = "ta_c_paiement",clazz = TaCPaiement.class)
//	public TaCPaiement getTaCPaiement() {
//		return this.taCPaiement;
//	}
//
//	public void setTaCPaiement(TaCPaiement taCPaiement) {
//		this.taCPaiement = taCPaiement;
//	}


	@Column(name = "code_document", unique = true, length = 20)
	@LgrHibernateValidated(champBd = "code_document",table = "ta_abonnement",champEntite="codeDocument", clazz = TaAbonnement.class)
	public String getCodeDocument() {
		return this.codeDocument;
	}

	public void setCodeDocument(String codeAbonnement) {
		this.codeDocument = codeAbonnement;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_document", length = 19)
	@LgrHibernateValidated(champBd = "date_document",table = "ta_abonnement",champEntite="dateDocument", clazz = TaAbonnement.class)
	public Date getDateDocument() {
		return this.dateDocument;
	}

	public void setDateDocument(Date dateFacture) {
		if(this.oldDate==null)this.oldDate=dateFacture;
		else
		if(this.dateDocument==null||
				this.dateDocument.compareTo(dateFacture)!=0)
			this.oldDate=this.dateDocument;
		this.dateDocument = dateFacture;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_ech_document", length = 19)
	@LgrHibernateValidated(champBd = "date_ech_document",table = "ta_abonnement",champEntite="dateEchDocument", clazz = TaAbonnement.class)
	public Date getDateEchDocument() {
		return this.dateEchDocument;
	}

	public void setDateEchDocument(Date dateEchAbonnement) {
		this.dateEchDocument = dateEchAbonnement;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_liv_document", length = 19)
	@LgrHibernateValidated(champBd = "date_liv_document",table = "ta_abonnement",champEntite="dateLivDocument", clazz = TaAbonnement.class)
	public Date getDateLivDocument() {
		return this.dateLivDocument;
	}

	public void setDateLivDocument(Date dateLivAbonnement) {
		this.dateLivDocument = dateLivAbonnement;
	}

	@Column(name = "libelle_document")
	@LgrHibernateValidated(champBd = "libelle_document",table = "ta_abonnement",champEntite="libelleDocument", clazz = TaAbonnement.class)
	public String getLibelleDocument() {
		return this.libelleDocument;
	}

	public void setLibelleDocument(String libelleAbonnement) {
		this.libelleDocument = libelleAbonnement;
	}

	
	
	@Column(name = "rem_ht_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_ht_document",table = "ta_abonnement",champEntite="remHtDocument", clazz = TaAbonnement.class)
	public BigDecimal getRemHtDocument() {
		return this.remHtDocument;
	}

	public void setRemHtDocument(BigDecimal remHtAbonnement) {
		this.remHtDocument = remHtAbonnement;
	}

	@Column(name = "tx_rem_ht_document", precision = 15)
	@LgrHibernateValidated(champBd = "tx_rem_ht_document",table = "ta_abonnement",champEntite="txRemHtDocument", clazz = TaAbonnement.class)
	public BigDecimal getTxRemHtDocument() {
		return this.txRemHtDocument;
	}

	public void setTxRemHtDocument(BigDecimal txRemHtAbonnement) {
		if(txRemHtAbonnement==null)txRemHtAbonnement=new BigDecimal(0);
		if(this.txRemHtDocument!=null && this.txRemHtDocument.compareTo(txRemHtAbonnement)!=0){	
			this.txRemHtDocument = txRemHtAbonnement;
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
				//passage ejb => dans TaAbonnementService
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "rem_ttc_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_ttc_document",table = "ta_abonnement",champEntite="remTtcDocument", clazz = TaAbonnement.class)
	public BigDecimal getRemTtcDocument() {
		return this.remTtcDocument;
	}

	public void setRemTtcDocument(BigDecimal remTtcAbonnement) {
		this.remTtcDocument = remTtcAbonnement;
	}

	@Column(name = "tx_rem_ttc_document", precision = 15)
	@LgrHibernateValidated(champBd = "tx_rem_ttc_document",table = "ta_abonnement",champEntite="txRemTtcDocument", clazz = TaAbonnement.class)
	public BigDecimal getTxRemTtcDocument() {
		return this.txRemTtcDocument;
	}

	public void setTxRemTtcDocument(BigDecimal txRemTtcAbonnement) {
		if(txRemTtcAbonnement==null)txRemTtcAbonnement=new BigDecimal(0);
		if(this.txRemTtcDocument!=null && this.txRemTtcDocument.compareTo(txRemTtcAbonnement)!=0){	
			this.txRemTtcDocument = txRemTtcAbonnement;
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
				//passage ejb => dans TaAbonnementService
				calculeTvaEtTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this,"txRemTtcDocument"));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}

	@Column(name = "nb_e_document")
	@LgrHibernateValidated(champBd = "nb_e_document",table = "ta_abonnement",champEntite="nbEDocument", clazz = TaAbonnement.class)
	public Integer getNbEDocument() {
		return this.nbEDocument;
	}

	public void setNbEDocument(Integer nbEAbonnement) {
		this.nbEDocument = nbEAbonnement;
	}

	@Column(name = "ttc")
	@LgrHibernateValidated(champBd = "ttc",table = "ta_abonnement",champEntite="ttc", clazz = TaAbonnement.class)
	public Integer getTtc() {
		return this.ttc;
	}

	public void setTtc(Integer ttc) {
		this.ttc = ttc;
	}

//	@Column(name = "export")
//	@LgrHibernateValidated(champBd = "export",table = "ta_abonnement",champEntite="export", clazz = TaAbonnement.class)
//	public Integer getExport() {
//		return this.export;
//	}
//
//	public void setExport(Integer export) {
//		this.export = export;
//	}

	@Column(name = "commentaire", length = 2000)
	@LgrHibernateValidated(champBd = "commentaire",table = "ta_abonnement",champEntite="commentaire", clazz = TaAbonnement.class)
	public String getCommentaire() {
		return this.commentaire;
	}

	public void setCommentaire(String commentaire) {
		if(this.commentaire==null||(commentaire!=null &&
				this.commentaire.compareTo(commentaire)!=0)){
			this.commentaire = commentaire;		
			if(legrain) {
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}
	
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_etat")
	@LgrHibernateValidated(champBd = "id_etat",table = "ta_etat",champEntite="TaEtat.idEtat", clazz = TaEtat.class)
	public TaEtat getTaEtat() {
		return this.taEtat;
	}

	public void setTaEtat(TaEtat taEtat) {
		this.taEtat = taEtat;
	}

	@Column(name = "qui_cree", length = 50)
	public String getQuiCree() {
		return this.quiCree;
	}

	public void setQuiCree(String quiCreeAbonnement) {
		this.quiCree = quiCreeAbonnement;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_cree", length = 19)
	public Date getQuandCree() {
		return this.quandCree;
	}

	public void setQuandCree(Date quandCreeAbonnement) {
		this.quandCree = quandCreeAbonnement;
	}

	@Column(name = "qui_modif", length = 50)
	public String getQuiModif() {
		return this.quiModif;
	}

	public void setQuiModif(String quiModifAbonnement) {
		this.quiModif = quiModifAbonnement;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_modif", length = 19)
	public Date getQuandModif() {
		return this.quandModif;
	}

	public void setQuandModif(Date quandModifAbonnement) {
		this.quandModif = quandModifAbonnement;
	}

	@Column(name = "ip_acces", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}
	
	@Column(name = "regle_document", precision = 15)
	@LgrHibernateValidated(champBd = "regle_document",table = "ta_abonnement",champEntite="regleDocument", clazz = TaAbonnement.class)
	public BigDecimal getRegleDocument() {
		return this.regleDocument;
	}

	public void setRegleDocument(BigDecimal regleDocument) {
		if(regleDocument==null)regleDocument=new BigDecimal(0);
		if(this.regleDocument!=null && this.regleDocument.compareTo(regleDocument)!=0){		
			this.regleDocument = regleDocument;		
			if(legrain) {
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
				//passage ejb => dans TaAbonnementService
				calculTotaux();
				try {
					fireModificationDocument(new SWTModificationDocumentEvent(this));
				} catch (Exception e) {
					logger.error("",e);
				}
			}
		}
	}	

//	@Version
//	@Column(name = "version_obj")
//	public Integer getVersionObj() {
//		return this.versionObj;
//	}
//
//	public void setVersionObj(Integer versionObj) {
//		this.versionObj = versionObj;
//	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taDocument", orphanRemoval=true)
	@OrderBy("numLigneLDocument")
	@Fetch(FetchMode.SUBSELECT)
	public List<TaLAbonnement> getLignes() {
		return this.lignes;
	}

	public void setLignes(List<TaLAbonnement> taLAbonnement) {
		this.lignes = taLAbonnement;
	}
	
//	@OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taDocument")
	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL , orphanRemoval=true, optional=false)
	@JoinColumn(name = "id_infos_document")
	public TaInfosAbonnement getTaInfosDocument() {
		return this.taInfosDocument;
	}

	public void setTaInfosDocument(TaInfosAbonnement taInfosAbonnementes) {
		this.taInfosDocument = taInfosAbonnementes;
	}

	
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAbonnement")
//	public Set<TaRDocument> getTaRDocuments() {
//		return this.taRDocuments;
//	}
//
//	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
//		this.taRDocuments = taRDocuments;
//	}
//	
//	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taAbonnement")
//	public Set<TaRAcompte> getTaRAcomptes(){
//		return this.taRAcomptes;
//	}
//
//	public void setTaRAcomptes(Set<TaRAcompte> taRAcomptes) {
//		this.taRAcomptes = taRAcomptes;
//	}
	/**
	 * Initialisation des propriétés de la facture en fonction du tiers
	 */
	public void changementDeTiers() {
//		if(this.taTiers!=null && this.taTiers.getTaTTvaDoc()!=null && 
//				this.taTiers.getTaTTvaDoc().getCodeTTvaDoc()!=null){
//			if(!this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("F")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("UE")
//					//				||this.taTiers.getTaTTvaDoc().getCodeTTvaDoc().equals("HUE")
//			)
//				setGestionTVA(false);
//			else setGestionTVA(true);
//		}else
//			setGestionTVA(true);
	}
	
	@Override
	protected void afterAjoutLigne(SWTLigneDocument ligne) throws ExceptLgr {
		System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
		//passage ejb => dans TaAbonnementService
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
	}

	@Override
	protected void afterEnregistrerEntete() throws ExceptLgr {
		System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier");
		//passage ejb => dans TaAbonnementService
		calculeTvaEtTotaux();
		reinitialiseNumLignes();
		
	}

	@Override
	protected void afterModifierEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void afterRemoveLigne(SWTLigneDocument ligne) throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void afterSupprimerEntete() throws ExceptLgr {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected boolean beforeAjoutLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeEnregistrerEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeModifierEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeRemoveLigne(SWTLigneDocument ligne) {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected boolean beforeSupprimerEntete() {
		// TODO Auto-generated method stub
		return true;
	}

	@Override
	protected void reinitialiseNumLignes() {
//		for (Object ligne : lignes) {
//			((TaLAbonnement)ligne).setNumLigneLDocument(
//					((TaLAbonnement) ligne).getNUM_LIGNE());
//		}		
	}

	@Override
	public void changementMode(ChangeModeEvent evt) {
//passage ejb
//		switch (evt.getNouveauMode()) {
//		case C_MO_CONSULTATION:
//			break;
//		case C_MO_EDITION:
//			//S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
//			break;
//		case C_MO_INSERTION:
////			S'il n'existe pas déjà, charger un objet swtArticle pour la ligne
//			break;
//		case C_MO_SUPPRESSION:
//			break;
//		default:
//			break;
//		}

	}
	
	@Transient
	public ArrayList<LigneTva> getLignesTVA() {
		return lignesTVA;
	}

	public void setLignesTVA(ArrayList<LigneTva> lignesTVA) {
		this.lignesTVA = lignesTVA;
	}
//	@Transient
	@Column(name = "mt_ttc_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_calc",table = "ta_abonnement",champEntite="mtTtcCalc", clazz = TaAbonnement.class)
	public BigDecimal getMtTtcCalc() {
		return mtTtcCalc;
	}

	public void setMtTtcCalc(BigDecimal mtTtcCalc) {
		this.mtTtcCalc = LibCalcul.arrondi(mtTtcCalc);
	}

	//@Transient
	@Column(name = "mt_ht_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ht_calc",table = "ta_abonnement",champEntite="mtHtCalc", clazz = TaAbonnement.class)
	public BigDecimal getMtHtCalc() {
		return mtHtCalc;
	}

	public void setMtHtCalc(BigDecimal mtHtCalc) {
		this.mtHtCalc = LibCalcul.arrondi(mtHtCalc);
	}

	//@Transient
	@Column(name = "mt_tva_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_tva_calc",table = "ta_abonnement",champEntite="mtTvaCalc", clazz = TaAbonnement.class)
	public BigDecimal getMtTvaCalc() {
		return mtTvaCalc;
	}

	public void setMtTvaCalc(BigDecimal mtTvaCalc) {
		this.mtTvaCalc = LibCalcul.arrondi(mtTvaCalc);
	}

	//@Transient
	@Column(name = "net_ttc_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_ttc_calc",table = "ta_abonnement",champEntite="netTtcCalc", clazz = TaAbonnement.class)
	public BigDecimal getNetTtcCalc() {
		return netTtcCalc;
	}

	public void setNetTtcCalc(BigDecimal netTtcCalc) {
		this.netTtcCalc = LibCalcul.arrondi(netTtcCalc);
	}

	//@Transient
	@Column(name = "net_ht_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_ht_calc",table = "ta_abonnement",champEntite="netHtCalc", clazz = TaAbonnement.class)
	public BigDecimal getNetHtCalc() {
		return netHtCalc;
	}

	public void setNetHtCalc(BigDecimal netHtCalc) {
		this.netHtCalc = LibCalcul.arrondi(netHtCalc);
	}

	//@Transient
	@Column(name = "net_tva_calc", precision = 15)
	@LgrHibernateValidated(champBd = "net_tva_calc",table = "ta_abonnement",champEntite="netTvaCalc", clazz = TaAbonnement.class)
	public BigDecimal getNetTvaCalc() {
		return netTvaCalc;
	}

	public void setNetTvaCalc(BigDecimal netTvaCalc) {
		this.netTvaCalc = LibCalcul.arrondi(netTvaCalc);
	}

	//@Transient
	@Column(name = "net_a_payer", precision = 15)
	@LgrHibernateValidated(champBd = "net_a_payer",table = "ta_abonnement",champEntite="netAPayer", clazz = TaAbonnement.class)
	public BigDecimal getNetAPayer() {
		return netAPayer;
	}

	public void setNetAPayer(BigDecimal netAPayer) {
		this.netAPayer = LibCalcul.arrondi(netAPayer);
	}

	public void setLegrain(boolean legrain) {
		this.legrain = legrain;
		for (TaLAbonnement ligne : getLignes()) {
			ligne.setLegrain(legrain);
		}		
	}
	
//passage ejb => dans TaAbonnementService
	public void calculeTvaEtTotaux(){
		calculTvaTotal();
		calculTotaux();
	}
	
	/**
	 * Calcul des totaux de la facture
	 */
	public void calculTotaux() {
		
//			    MT_TVA Numeric(15,2),
			setMtHtCalc(new BigDecimal(0));
			setNetHtCalc(new BigDecimal(0));
			setMtTtcCalc(new BigDecimal(0));
			setMtTtcAvantRemiseGlobaleCalc(new BigDecimal(0));
			for (Object ligne : lignes) {
				if(((TaLAbonnement)ligne).getTaTLigne().getCodeTLigne().equals(C_CODE_T_LIGNE_H)) {
					if(((TaLAbonnement)ligne).getMtHtLApresRemiseGlobaleDocument()!=null)
						setNetHtCalc(getNetHtCalc().add(((TaLAbonnement)ligne).getMtHtLApresRemiseGlobaleDocument()));
					if(((TaLAbonnement)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
						setMtTtcCalc(getMtTtcCalc().add(((TaLAbonnement)ligne).getMtTtcLApresRemiseGlobaleDocument()));
					if(((TaLAbonnement)ligne).getMtHtLDocument()!=null)
						setMtHtCalc(getMtHtCalc().add(((TaLAbonnement)ligne).getMtHtLDocument()));
					if(((TaLAbonnement)ligne).getMtTtcLDocument()!=null)
						setMtTtcAvantRemiseGlobaleCalc(getMtTtcAvantRemiseGlobaleCalc().add(((TaLAbonnement)ligne).getMtTtcLDocument()));
				}
				
			}
			setRemHtDocument(getMtHtCalc().subtract(getNetHtCalc())); // passage ejb 3/8/2016
			setNetTvaCalc(getMtTtcCalc().subtract(getNetHtCalc()));
			BigDecimal tva = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tva = tva.add(ligneTva.getMtTva());
			}
			if(tva.compareTo(getNetTvaCalc())!=0) {
				logger.error("Montant de la TVA incorrect : "+getNetTvaCalc()+" ** "+tva);
			}
			BigDecimal tvaAvantRemise = new BigDecimal(0);
			for (LigneTva ligneTva : lignesTVA) {
				tvaAvantRemise = tvaAvantRemise.add(ligneTva.getMtTvaAvantRemise());
			}
			setMtTvaCalc(tvaAvantRemise);
			setNetTtcCalc(getMtTtcCalc().subtract(getMtTtcCalc().multiply(getTxRemTtcDocument().divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP)));
			/*
			 * remise HT déjà calculée dans dispatcherTva()
			 */
			setRemTtcDocument(getMtTtcCalc().subtract(getNetTtcCalc()).setScale(2,BigDecimal.ROUND_HALF_UP));			
			setNetAPayer(getNetTtcCalc().subtract(getRegleDocument()));
	}

	/**
	 * Reparti le total chaque code TVA sur l'ensemble des lignes concernées par ce code. 
	 */
	public void dispatcherTva() {

		BigDecimal tvaLigne = new BigDecimal(0);
		BigDecimal totalTemp = new BigDecimal(0);

		for (Object ligne : lignes) {
			if(((TaLAbonnement)ligne).getMtHtLDocument()!=null)
				totalTemp = totalTemp.add(((TaLAbonnement)ligne).getMtHtLDocument());
		}
		if(totalTemp!=null && txRemHtDocument!=null)
			setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))).setScale(2,BigDecimal.ROUND_HALF_UP));	
		
		for (TaLAbonnement ligne : getLignes()) {
		if(txRemHtDocument!=null && txRemHtDocument.signum()>0 && ligne.getMtHtLDocument()!=null  && ligne.getMtTtcLDocument()!=null) {
				if(ttc==1){
					((TaLAbonnement)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtTtcLDocument().subtract(((TaLAbonnement)ligne).getMtTtcLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLAbonnement)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtTtcLApresRemiseGlobaleDocument());
					
				}else{
					((TaLAbonnement)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtHtLDocument().subtract(((TaLAbonnement)ligne).getMtHtLDocument()
							.multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
					((TaLAbonnement)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtHtLApresRemiseGlobaleDocument());	
				}
			}
		}
				
		for (LigneTva ligneTva : lignesTVA) {

			if (ligneTva.getMtTva()!=null) {
				int lignepasse=1;
				BigDecimal tvaTmp = ligneTva.getMtTva();
				BigDecimal ttcTmp = LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise());
				BigDecimal htTmp = LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise());

				for (Object ligne : lignes) {
					if(((TaLAbonnement)ligne).getTaTLigne().getCodeTLigne().equals(C_CODE_T_LIGNE_H)) {
						if(((TaLAbonnement)ligne).getCodeTvaLDocument()!=null &&
								((TaLAbonnement)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
							if (ligneTva.getMontantTotalHt().signum()==0) 
								tvaLigne = ((TaLAbonnement)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
							else {
								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
									tvaLigne = tvaTmp;
								else {
									if(ttc==1){
										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
											tvaLigne=BigDecimal.valueOf(0);
										else
											tvaLigne = (ligneTva.getMtTva().multiply(((TaLAbonnement)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
									}
									else{
										if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
											tvaLigne =BigDecimal.valueOf(0);
										else
											tvaLigne = (ligneTva.getMtTva().multiply(((TaLAbonnement)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
									}
								}
							}
							tvaTmp =  tvaTmp.subtract(tvaLigne);
							totalTemp = totalTemp.add(((TaLAbonnement)ligne).getMtHtLDocument());

							if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
								if  (lignepasse>= ligneTva.getNbLigneDocument()) {
									((TaLAbonnement)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									((TaLAbonnement)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
								} else {
									((TaLAbonnement)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtHtLDocument().subtract(((TaLAbonnement)ligne).getMtHtLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
									((TaLAbonnement)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtTtcLDocument().subtract(((TaLAbonnement)ligne).getMtTtcLDocument().multiply(txRemHtDocument).divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)));
								}
//								ttcTmp =  ttcTmp.subtract(((TaLAbonnement)ligne).getMtTtcLFacture());
//								htTmp =  htTmp.subtract(((TaLAbonnement)ligne).getMtHtLFacture());
							} else {
								if(ttc==1)
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLAbonnement)ligne).setMtHtLApresRemiseGlobaleDocument(htTmp);
									}else{
										((TaLAbonnement)ligne).setMtHtLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtTtcLDocument().subtract(tvaLigne));
									}
								else
									if  (lignepasse>= ligneTva.getNbLigneDocument()) {
										((TaLAbonnement)ligne).setMtTtcLApresRemiseGlobaleDocument(ttcTmp);
									}else {
										((TaLAbonnement)ligne).setMtTtcLApresRemiseGlobaleDocument(((TaLAbonnement)ligne).getMtHtLDocument().add(tvaLigne));
									}

							}
							if(((TaLAbonnement)ligne).getMtTtcLApresRemiseGlobaleDocument()!=null)
								ttcTmp =  ttcTmp.subtract(((TaLAbonnement)ligne).getMtTtcLApresRemiseGlobaleDocument());

							if(((TaLAbonnement)ligne).getMtHtLApresRemiseGlobaleDocument()!=null)
								htTmp =  htTmp.subtract(((TaLAbonnement)ligne).getMtHtLApresRemiseGlobaleDocument());

							lignepasse++;
						}
					}
					setRemHtDocument(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100))));						
	
//					setRemHtDocument(getRemHtDocument().add(totalTemp.multiply(txRemHtDocument.divide(new BigDecimal(100)))));						

				}
			}
		}
//		}

	}
	
	
	public void dispatcherTvaAvantRemise() {
		BigDecimal tvaLigne = new BigDecimal(0);
		
		boolean derniereLignePourTVA = false;

		for (LigneTva ligneTva : lignesTVA) {
			if (ligneTva.getMtTvaAvantRemise()!=null) {
				int lignepasse=1;
				BigDecimal tvaAvantRemiseTmp = ligneTva.getMtTvaAvantRemise();
				
				derniereLignePourTVA = false;

				for (Object ligne : lignes) {
					if(((TaLAbonnement)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H)) {
						if(((TaLAbonnement)ligne).getCodeTvaLDocument()!=null&&((TaLAbonnement)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
//							if (ligneTva.getMontantTotalHt().signum()==0) 
//								tvaLigne = ((TaLFacture)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
//							else {
//								if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//									tvaLigne = tvaAvantRemiseTmp;
//								else {
//									if(ttc==1){
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()).signum()<=0)
//											tvaLigne=BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//									else{
//										if(LibCalcul.arrondi(ligneTva.getMontantTotalHt()).signum()<=0)
//											tvaLigne =BigDecimal.valueOf(0);
//										else
//											tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLFacture)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHt()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
//									}
//								}
//							}
							tvaLigne = prorataMontantTVALigneAvantRemise((TaLAbonnement)ligne, ligneTva);
							
							tvaAvantRemiseTmp =  tvaAvantRemiseTmp.subtract(tvaLigne);
							
							if(tvaAvantRemiseTmp.compareTo(resteTVA(ligneTva))==0) {
								//Le reste de TVA a traiter correspond a la difference d'arrondi,
								//les lignes de documents suivantes (s'il en reste) ont un montant HT nul
								//c'est donc la derniere ligne sur laquelle on peut mettre de la TVA => on ajoute le reliquat
								tvaLigne = tvaLigne.add(tvaAvantRemiseTmp);
								derniereLignePourTVA = true;
							}

							if(ttc==1)
								((TaLAbonnement)ligne).setMtHtLDocument(((TaLAbonnement)ligne).getMtTtcLDocument().subtract(tvaLigne));
							else
								((TaLAbonnement)ligne).setMtTtcLDocument(((TaLAbonnement)ligne).getMtHtLDocument().add(tvaLigne));

							lignepasse++;
						}
					}

				}
			}
		}
	}
	
	/**
	 * Calcule le montant de TVA qui reste après répartion de la TVA sur les lignes au prorata du monant HT.
	 * Ce montant de TVA restant de 1 ou 2 centimes provient des arrondis successifs.
	 * @param ligneTva
	 * @return
	 */
	public BigDecimal resteTVAAvantRemise(LigneTva ligneTva) {
		BigDecimal resteTVA = ligneTva.getMtTva();
		for (Object ligne : lignes) {
			//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
			if(((TaLAbonnement)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H)) {
				//si le code TVA de la ligne correspond à celui traite (boucle superieure)
				if(((TaLAbonnement)ligne).getCodeTvaLDocument()!=null&&((TaLAbonnement)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
					resteTVA = resteTVA.subtract(prorataMontantTVALigneAvantRemise(((TaLAbonnement)ligne),ligneTva));
				}
			}
		}
		return resteTVA;
	}
	
	/**
	 * Calcule le montant de TVA qui reste après répartion de la TVA sur les lignes au prorata du monant HT.
	 * Ce montant de TVA restant de 1 ou 2 centimes provient des arrondis successifs.
	 * @param ligneTva
	 * @return
	 */
	public BigDecimal resteTVA(LigneTva ligneTva) {
		BigDecimal resteTVA = ligneTva.getMtTva();
		for (Object ligne : lignes) {
			//si c'est une ligne "normale" (ligne HT et non une ligne de commentaire ou autre)
			if(((TaLAbonnement)ligne).getTaTLigne().getCodeTLigne().equals(SWTDocument.C_CODE_T_LIGNE_H)) {
				//si le code TVA de la ligne correspond à celui traite (boucle superieure)
				if(((TaLAbonnement)ligne).getCodeTvaLDocument()!=null&&((TaLAbonnement)ligne).getCodeTvaLDocument().equals(ligneTva.getCodeTva())){
					resteTVA = resteTVA.subtract(prorataMontantTVALigne(((TaLAbonnement)ligne),ligneTva));
				}
			}
		}
		return resteTVA;
	}
	/**
	 * Calcule le montant de TVA d'une ligne du document par rapport au montant total de TVA pour un code TVA donnee
	 * @param ligne - 
	 * @param ligneTva
	 * @return
	 */
	public BigDecimal prorataMontantTVALigne(TaLAbonnement ligne, LigneTva ligneTva) {
		BigDecimal tvaLigne = new BigDecimal(0);
		
		if (ligneTva.getMontantTotalHt().signum()==0) 
			tvaLigne = ((TaLAbonnement)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
		else {
//			if  (lignepasse>= ligneTva.getNbLigneDocument()) //si c'est la deniere ligne, on prend tout ce qui reste
//				tvaLigne = tvaTmp;
//			else {
				if(ttc==1){ //si saisie TTC
					if(LibCalcul.arrondi(ligneTva.getMontantTotalTtcAvecRemise()).signum()<=0)
						tvaLigne=BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTva().multiply(((TaLAbonnement)ligne).getMtTtcLDocument())).divide(LibCalcul.
								arrondi(ligneTva.getMontantTotalTtcAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
				else{
					if(LibCalcul.arrondi(ligneTva.getMontantTotalHtAvecRemise()).signum()<=0)
						tvaLigne =BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTva().multiply(((TaLAbonnement)ligne).getMtHtLDocument())).divide(LibCalcul.
								arrondi(ligneTva.getMontantTotalHtAvecRemise()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
//			}
		}
		return tvaLigne;
	}
	public BigDecimal prorataMontantTVALigneAvantRemise(TaLAbonnement ligne, LigneTva ligneTva) {
		BigDecimal tvaLigne = new BigDecimal(0);
		
		if (ligneTva.getMontantTotalHt().signum()==0) 
			tvaLigne = ((TaLAbonnement)ligne).getMtHtLDocument().multiply(ligneTva.getTauxTva()).divide(new BigDecimal(100));
		else {
//			if  (lignepasse>= ligneTva.getNbLigneDocument()) 
//				tvaLigne = tvaAvantRemiseTmp;
//			else {
				if(ttc==1){
					if(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()).signum()<=0)
						tvaLigne=BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLAbonnement)ligne).getMtTtcLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalTtc()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
				else{
					if(LibCalcul.arrondi(ligneTva.getMontantTotalHt()).signum()<=0)
						tvaLigne =BigDecimal.valueOf(0);
					else
						tvaLigne = (ligneTva.getMtTvaAvantRemise().multiply(((TaLAbonnement)ligne).getMtHtLDocument())).divide(LibCalcul.arrondi(ligneTva.getMontantTotalHt()),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				}
//			}
		}
		return tvaLigne;
	}
	
	/**
	 * Lance la fonction de calcul du montant sur chacunes des lignes du document.
	 */
	public void calculMontantLigneDocument() {
		for (Object ligne : lignes) {
			((TaLAbonnement)ligne).calculMontant();
		}
	}
	
	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 * et mise à jour du montant de la TVA dans les lignes du document
	 */
	public void calculTvaTotal() {
		calculMontantLigneDocument();
		calculLignesTva();
		dispatcherTvaAvantRemise();
		dispatcherTva();
	}
	

	/**
	 * Calcul de la grille de TVA en fonction de lignes du document et du taux de remise HT global.
	 * Mise à jour de la propriété <code>lignesTVA</code>
	 */
	public void calculLignesTva() {
		Map<String,BigDecimal> montantTotalHt = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtc = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalHtAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> montantTotalTtcAvecRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVA = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> mtTVAAvantRemise = new HashMap<String,BigDecimal>();
		Map<String,BigDecimal> tauxTVA = new HashMap<String,BigDecimal>();
		Map<String,Integer> nbLigne = new HashMap<String,Integer>();
		Map<String,String> libelleLignesTVA = new HashMap<String,String>();
		String codeTVA = null;
//		TaTvaDAO taTvaDAO = new TaTvaDAO();
		
		/*
		 * calcul de la TVA different en fonction de la propriete TTC
		 */
		BigDecimal ttcLigne = null;
		BigDecimal htLigne = null;
		for (Object ligne : lignes) {
			//en commentaire pour ne pas refaire les calculs pendants les editions, 
			//((TaLFacture)ligne).calculMontant();
			codeTVA = ((TaLAbonnement)ligne).getCodeTvaLDocument();
			if(codeTVA!=null && !codeTVA.equals("")) {
				ttcLigne = ((TaLAbonnement)ligne).getMtTtcLDocument();
				htLigne = ((TaLAbonnement)ligne).getMtHtLDocument();
				if(montantTotalHt.containsKey(codeTVA)) {
					montantTotalTtc.put(codeTVA,montantTotalTtc.get(codeTVA).add(ttcLigne));
					montantTotalHt.put(codeTVA,montantTotalHt.get(codeTVA).add(htLigne));
					montantTotalTtcAvecRemise.put(codeTVA,montantTotalTtcAvecRemise.get(codeTVA).add(ttcLigne));
					montantTotalHtAvecRemise.put(codeTVA,montantTotalHtAvecRemise.get(codeTVA).add(htLigne));
					nbLigne.put(codeTVA,nbLigne.get(codeTVA)+1);
				} else {
					montantTotalTtc.put(codeTVA,ttcLigne);
					montantTotalHt.put(codeTVA,htLigne);
					montantTotalTtcAvecRemise.put(codeTVA,ttcLigne);
					montantTotalHtAvecRemise.put(codeTVA,htLigne);
					tauxTVA.put(codeTVA,((TaLAbonnement)ligne).getTauxTvaLDocument());
					nbLigne.put(codeTVA,1);
					libelleLignesTVA.put(codeTVA, ((TaLAbonnement)ligne).getLibTvaLDocument());
//					libelleLignesTVA.put(codeTVA, ((TaLFacture)ligne).getLibLDocument());
				}
			}
		}

		for (String codeTva : montantTotalTtc.keySet()) {
			//les 2 maps ont les meme cles
			BigDecimal mtTtcTotal = montantTotalTtc.get(codeTva);
			BigDecimal mtHtTotal = montantTotalHt.get(codeTva);
			BigDecimal tva =null;
			//traitement tva avant remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVAAvantRemise.put(codeTva, tva);
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVAAvantRemise.put(codeTva, tva );
			}
			//traitement remise
			if(txRemHtDocument!=null && txRemHtDocument.signum()>0) {
//				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(     mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100))  )       ));
//				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract(    mtHtTotal.multiply( (txRemHtDocument.divide(new BigDecimal(100))))     ) ) ;
				BigDecimal valeurInterTTC=mtTtcTotal.multiply(   txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtTtcTotal =LibCalcul.arrondi(mtTtcTotal.subtract(valeurInterTTC )) ;
				BigDecimal valeurInterHT=mtHtTotal.multiply( txRemHtDocument.divide(new BigDecimal(100)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP);
				mtHtTotal = LibCalcul.arrondi(mtHtTotal.subtract( valeurInterHT )) ;
				montantTotalTtcAvecRemise.put(codeTva, mtTtcTotal);
				montantTotalHtAvecRemise.put(codeTva, mtHtTotal);
			} 
			//traitement tva après remise
			if (ttc==1) {
				tva=mtTtcTotal.subtract((mtTtcTotal.multiply(BigDecimal.valueOf(100))) .divide((BigDecimal.valueOf(100).add(tauxTVA.get(codeTva))) ,MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP)     ) ;
				mtTVA.put(codeTva, tva);
				montantTotalHtAvecRemise.put(codeTva, mtTtcTotal.subtract(tva));
			} else {
				tva=mtHtTotal.multiply(   (tauxTVA.get(codeTva).divide(new BigDecimal(100)))) ;
				mtTVA.put(codeTva, tva );
				montantTotalTtcAvecRemise.put(codeTva, mtHtTotal.add(tva));
			}
		}

		lignesTVA.clear();
		for (String codeTva : mtTVA.keySet()) {
			LigneTva ligneTva = new LigneTva();
			ligneTva.setCodeTva(codeTva);
			ligneTva.setTauxTva(tauxTVA.get(codeTva));
			ligneTva.setMtTva(mtTVA.get(codeTva));
			ligneTva.setMtTvaAvantRemise(mtTVAAvantRemise.get(codeTva));
			ligneTva.setMontantTotalHt(montantTotalHt.get(codeTva));
			ligneTva.setMontantTotalTtc(montantTotalTtc.get(codeTva));
			ligneTva.setMontantTotalHtAvecRemise(montantTotalHtAvecRemise.get(codeTva));
			ligneTva.setMontantTotalTtcAvecRemise(montantTotalTtcAvecRemise.get(codeTva));
//			ligneTva.setLibelle(taTvaDAO.findByCode(codeTva).getLibelleTva());
			ligneTva.setLibelle(libelleLignesTVA.get(codeTva));
			ligneTva.setNbLigneDocument(nbLigne.get(codeTva));
			lignesTVA.add(ligneTva);
		}
		
		//dispatcherTva();
	}
	public TaAbonnement clone() {
		TaAbonnement doc = new TaAbonnement(true);
		try {
			//doc = (TaAbonnement)super.clone();
			doc.setIdDocument(0);
			doc.setVersion(version);
			doc.setTaTPaiement(taTPaiement);
			doc.setTaTiers(taTiers);
			//doc.setTaCPaiement(taCPaiement);
			doc.setCodeDocument("");
			doc.setDateDocument(dateDocument);
			doc.setDateEchDocument(dateEchDocument);
			doc.setDateLivDocument(dateLivDocument);
			doc.setLibelleDocument("");

			doc.setRemHtDocument(remHtDocument);
			doc.setTxRemHtDocument(txRemHtDocument);
			doc.setRemTtcDocument(remTtcDocument);
			doc.setTxRemTtcDocument(txRemTtcDocument);
			doc.setNbEDocument(nbEDocument);
			doc.setTtc(ttc);
			doc.setDateExport(dateExport);
			doc.setCommentaire(commentaire);
			doc.setQuiCree(quiCree);
			doc.setQuandCree(quandCree);
			doc.setQuiModif(quiModif);
			doc.setQuandModif(quandModif);
			doc.setIpAcces(ipAcces);
			doc.setVersionObj(versionObj);
			
			for (TaLAbonnement ligne : getLignes()) {
				TaLAbonnement temp =ligne.clone(); 
				temp.setTaDocument(doc);
				doc.addLigne(temp);
			}
			TaInfosAbonnement infos = getTaInfosDocument().clone();
			infos.setTaDocument(doc);
			doc.setTaInfosDocument(infos);
		} catch(Exception cnse) {
			logger.error("",cnse);
		}
		// on renvoie le clone
		return doc;
	}
	
	//@Transient
	@Column(name = "mt_ttc_avt_rem_globale_calc", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_avt_rem_globale_calc",table = "ta_abonnement",champEntite="mtTtcAvantRemiseGlobaleCalc", clazz = TaAbonnement.class)
	public BigDecimal getMtTtcAvantRemiseGlobaleCalc() {
		return mtTtcAvantRemiseGlobaleCalc;
	}

	public void setMtTtcAvantRemiseGlobaleCalc(
			BigDecimal mtTtcAvantRemiseGlobaleCalc) {
		this.mtTtcAvantRemiseGlobaleCalc = mtTtcAvantRemiseGlobaleCalc;
	}
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((codeDocument == null) ? 0 : codeDocument.hashCode());
		return result;
	}
	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TaAbonnement other = (TaAbonnement) obj;
		if (codeDocument == null) {
			if (other.codeDocument != null)
				return false;
		} else if (!codeDocument.equals(other.codeDocument))
			return false;
		if (commentaire == null) {
			if (other.commentaire != null)
				return false;
		} else if (!commentaire.equals(other.commentaire))
			return false;
		if (dateDocument == null) {
			if (other.dateDocument != null)
				return false;
		} else if (!dateDocument.equals(other.dateDocument))
			return false;
		if (dateEchDocument == null) {
			if (other.dateEchDocument != null)
				return false;
		} else if (!dateEchDocument.equals(other.dateEchDocument))
			return false;
		if (dateLivDocument == null) {
			if (other.dateLivDocument != null)
				return false;
		} else if (!dateLivDocument.equals(other.dateLivDocument))
			return false;
		if (dateExport == null) {
			if (other.dateExport != null)
				return false;
		} else if (!dateExport.equals(other.dateExport))
			return false;
		if (gestionTVA != other.gestionTVA)
			return false;
		if (ipAcces == null) {
			if (other.ipAcces != null)
				return false;
		} else if (!ipAcces.equals(other.ipAcces))
			return false;
		if (legrain != other.legrain)
			return false;
		if (libelleDocument == null) {
			if (other.libelleDocument != null)
				return false;
		} else if (!libelleDocument.equals(other.libelleDocument))
			return false;
		if (lignesTVA == null) {
			if (other.lignesTVA != null)
				return false;
		} else if (!lignesTVA.equals(other.lignesTVA))
			return false;
		if (mtHtCalc == null) {
			if (other.mtHtCalc != null)
				return false;
		} else if (!mtHtCalc.equals(other.mtHtCalc))
			return false;
		if (mtTtcAvantRemiseGlobaleCalc == null) {
			if (other.mtTtcAvantRemiseGlobaleCalc != null)
				return false;
		} else if (!mtTtcAvantRemiseGlobaleCalc
				.equals(other.mtTtcAvantRemiseGlobaleCalc))
			return false;
		if (mtTtcCalc == null) {
			if (other.mtTtcCalc != null)
				return false;
		} else if (!mtTtcCalc.equals(other.mtTtcCalc))
			return false;
		if (mtTvaCalc == null) {
			if (other.mtTvaCalc != null)
				return false;
		} else if (!mtTvaCalc.equals(other.mtTvaCalc))
			return false;
		if (nbEDocument == null) {
			if (other.nbEDocument != null)
				return false;
		} else if (!nbEDocument.equals(other.nbEDocument))
			return false;
		if (netAPayer == null) {
			if (other.netAPayer != null)
				return false;
		} else if (!netAPayer.equals(other.netAPayer))
			return false;
		if (netHtCalc == null) {
			if (other.netHtCalc != null)
				return false;
		} else if (!netHtCalc.equals(other.netHtCalc))
			return false;
		if (netTtcCalc == null) {
			if (other.netTtcCalc != null)
				return false;
		} else if (!netTtcCalc.equals(other.netTtcCalc))
			return false;
		if (netTvaCalc == null) {
			if (other.netTvaCalc != null)
				return false;
		} else if (!netTvaCalc.equals(other.netTvaCalc))
			return false;
		if (quandCree == null) {
			if (other.quandCree != null)
				return false;
		} else if (!quandCree.equals(other.quandCree))
			return false;
		if (quandModif == null) {
			if (other.quandModif != null)
				return false;
		} else if (!quandModif.equals(other.quandModif))
			return false;
		if (quiCree == null) {
			if (other.quiCree != null)
				return false;
		} else if (!quiCree.equals(other.quiCree))
			return false;
		if (quiModif == null) {
			if (other.quiModif != null)
				return false;
		} else if (!quiModif.equals(other.quiModif))
			return false;
		if (regleDocument == null) {
			if (other.regleDocument != null)
				return false;
		} else if (!regleDocument.equals(other.regleDocument))
			return false;
		if (remHtDocument == null) {
			if (other.remHtDocument != null)
				return false;
		} else if (!remHtDocument.equals(other.remHtDocument))
			return false;
		if (remTtcDocument == null) {
			if (other.remTtcDocument != null)
				return false;
		} else if (!remTtcDocument.equals(other.remTtcDocument))
			return false;
		if (taInfosDocument == null) {
			if (other.taInfosDocument != null)
				return false;
		} else if (!taInfosDocument.equals(other.taInfosDocument))
			return false;
//		if (taRDocuments == null) {
//			if (other.taRDocuments != null)
//				return false;
//		} else if (!taRDocuments.equals(other.taRDocuments))
//			return false;
		if (taTPaiement == null) {
			if (other.taTPaiement != null)
				return false;
		} else if (!taTPaiement.equals(other.taTPaiement))
			return false;
		if (taTiers == null) {
			if (other.taTiers != null)
				return false;
		} else if (!taTiers.equals(other.taTiers))
			return false;
		if (ttc == null) {
			if (other.ttc != null)
				return false;
		} else if (!ttc.equals(other.ttc))
			return false;
		if (txRemHtDocument == null) {
			if (other.txRemHtDocument != null)
				return false;
		} else if (!txRemHtDocument.equals(other.txRemHtDocument))
			return false;
		if (txRemTtcDocument == null) {
			if (other.txRemTtcDocument != null)
				return false;
		} else if (!txRemTtcDocument.equals(other.txRemTtcDocument))
			return false;
		if (version == null) {
			if (other.version != null)
				return false;
		} else if (!version.equals(other.version))
			return false;
		return true;
	}
	
	@Transient
	public boolean isGestionTVA() {
		return gestionTVA;
	}
	public void setGestionTVA(boolean gestionTVA) {
		this.gestionTVA = gestionTVA;
	}

	@Transient
	public BigDecimal getRemTtcIntermediaireDocument() {
		return mtTtcAvantRemiseGlobaleCalc.subtract(mtTtcCalc);
	}

	@Override
	@Transient
	public String getTypeDocument() {
		// TODO Auto-generated method stub
		return TYPE_DOC;
	}
	
//passage ejb => dans TaAbonnementService
//	public void calculDateEcheanceAbstract(Integer report, Integer finDeMois){
//		calculDateEcheance(report,finDeMois);
//	}
//	
//	public Date calculDateEcheance(Integer report, Integer finDeMois) {
//		TaTCPaiementDAO taTCPaiementDAO = new TaTCPaiementDAO();
//		TaTCPaiement typeCP = taTCPaiementDAO.findByCode(TaTCPaiement.C_CODE_TYPE_DEVIS);
//		TaCPaiement conditionDoc = null;
//		TaCPaiement conditionTiers = null;
//		TaCPaiement conditionSaisie = null;
//		
//		if(typeCP!=null) conditionDoc = typeCP.getTaCPaiement();
//		if(getTaTiers()!=null) conditionTiers = getTaTiers().getTaCPaiement();
//
//		if(report!=null || finDeMois!=null) { 
//			conditionSaisie = new TaCPaiement();
//			if(report!=null)
//				conditionSaisie.setReportCPaiement(report);
//			if(finDeMois!=null)
//				conditionSaisie.setFinMoisCPaiement(finDeMois);
//		}
//		
//		//on applique toute les conditions par ordre décroissant de priorité, la derniere valide est conservée
//		Date nouvelleDate = getDateDocument();
//		if(conditionDoc!=null) {
//			nouvelleDate = conditionDoc.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionTiers!=null) {
//			nouvelleDate = conditionTiers.calculeNouvelleDate(getDateDocument());
//		}
//		if(conditionSaisie!=null) {
//			nouvelleDate = conditionSaisie.calculeNouvelleDate(getDateDocument());
//		}
//		setDateEchDocument(nouvelleDate);
//		return nouvelleDate;
//	}

	
	
	@Transient
	public List<ILigneDocumentTiers> getLignesGeneral(){
		return this.lignes;
	}

	@Transient
	public boolean isLegrain() {
		// TODO Auto-generated method stub
		return legrain;
	}
	@Transient
	public BigDecimal getRegleCompletDocument() {
		// TODO Auto-generated method stub
		return null;
	}
	@Transient
	public BigDecimal getResteAReglerComplet() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Override
	@JsonIgnore
	public void setTaInfosDocument(IInfosDocumentTiers infosDocumentTiers) {
		this.taInfosDocument =  (TaInfosAbonnement) infosDocumentTiers;
		
	}
	
	@OneToOne(fetch = FetchType.EAGER, cascade = {CascadeType.ALL} , orphanRemoval=true )
	@JoinColumn(name = "id_mise_a_disposition")
	public TaMiseADisposition getTaMiseADisposition() {
		return taMiseADisposition;
	}

	public void setTaMiseADisposition(TaMiseADisposition taMiseADisposition) {
		this.taMiseADisposition = taMiseADisposition;
	}
	
	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "date_export")
	@LgrHibernateValidated(champBd = "date_export",table = "ta_abonnement",champEntite="dateExport", clazz = TaAbonnement.class)
	public Date getDateExport() {
		return dateExport;
	}

	public void setDateExport(Date dateExport) {
		this.dateExport = dateExport;
	}
	
	@Column(name = "date_verrouillage")
	public Date getDateVerrouillage() {
		return dateVerrouillage;
	}

	public void setDateVerrouillage(Date dateVerrouillage) {
		this.dateVerrouillage=dateVerrouillage;
	}


	

	@Transient
	public Boolean getGestionLot() {
		// TODO Auto-generated method stub
		return null;
	}
	@Transient
	public void setGestionLot(Boolean gestionLot) {
		// TODO Auto-generated method stub
		
	}
	
//	@javax.persistence.OneToOne(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "taAbonnement", orphanRemoval=true)
//	public TaStripeSubscription getTaStripeSubscription() {
//		return taStripeSubscription;
//	}
//	public void setTaStripeSubscription(TaStripeSubscription taStripeSubscription) {
//		this.taStripeSubscription = taStripeSubscription;
//	}
	
	@OneToMany(cascade = CascadeType.ALL,fetch = FetchType.EAGER, mappedBy = "taAbonnement", orphanRemoval=true)
	@XmlTransient
	public Set<TaRDocument> getTaRDocuments() {
		return this.taRDocuments;
	}

	public void setTaRDocuments(Set<TaRDocument> taRDocuments) {
		this.taRDocuments = taRDocuments;
	}
	
	@Override
	@Column(name = "nb_decimales_qte")
	public Integer getNbDecimalesQte() {
		return nbDecimalesQte;
	}
	@Override
	public void setNbDecimalesQte(Integer nbDecimalesQte) {
		this.nbDecimalesQte = nbDecimalesQte;
	}
	@Override
	@Column(name = "nb_decimales_prix")
	public Integer getNbDecimalesPrix() {
		return nbDecimalesPrix;
	}
	@Override
	public void setNbDecimalesPrix(Integer nbDecimalesPrix) {
		this.nbDecimalesPrix = nbDecimalesPrix;
		
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_frequence")
	public TaFrequence getTaFrequence() {
		return taFrequence;
	}
	public void setTaFrequence(TaFrequence taFrequence) {
		this.taFrequence = taFrequence;
	}
	@Column(name = "date_suspension")
	public Date getDateSuspension() {
		return dateSuspension;
	}
	public void setDateSuspension(Date dateSuspension) {
		this.dateSuspension = dateSuspension;
	}
	@Column(name = "suspension")
	public Boolean getSuspension() {
		return suspension;
	}
	public void setSuspension(Boolean suspension) {
		this.suspension = suspension;
	}
	
	@Column(name = "id_externe")
	public String getIdExterne() {
		return idExterne;
	}
	public void setIdExterne(String idExterne) {
		this.idExterne = idExterne;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_stripe_customer")
	public TaStripeCustomer getTaStripeCustomer() {
		return taStripeCustomer;
	}
	public void setTaStripeCustomer(TaStripeCustomer taStripeCustomer) {
		this.taStripeCustomer = taStripeCustomer;
	}
	@Column(name = "date_debut")
	@Temporal(TemporalType.TIMESTAMP)
	public Date getDateDebut() {
		return dateDebut;
	}
	public void setDateDebut(Date dateDebut) {
		this.dateDebut = dateDebut;
	}
	@Column(name = "date_fin")
	@Temporal(TemporalType.TIMESTAMP)
	public Date getDateFin() {
		return dateFin;
	}
	public void setDateFin(Date dateFin) {
		this.dateFin = dateFin;
	}
	@Column(name = "biling")
	public String getBilling() {
		return billing;
	}
	public void setBilling(String billing) {
		this.billing = billing;
	}
	@Column(name = "prorata")
	public Boolean getProrata() {
		return prorata;
	}
	public void setProrata(Boolean prorata) {
		this.prorata = prorata;
	}
	@Column(name = "days_until_due")
	public Integer getDaysUntilDue() {
		return daysUntilDue;
	}
	public void setDaysUntilDue(Integer daysUntilDue) {
		this.daysUntilDue = daysUntilDue;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_coupon")
	public TaStripeCoupon getTaStripeCoupon() {
		return taStripeCoupon;
	}
	public void setTaStripeCoupon(TaStripeCoupon taStripeCoupon) {
		this.taStripeCoupon = taStripeCoupon;
	}
	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "id_source")
	public TaStripeSource getTaStripeSource() {
		return taStripeSource;
	}
	public void setTaStripeSource(TaStripeSource taStripeSource) {
		this.taStripeSource = taStripeSource;
	}
	@Column(name = "date_annulation")
	@Temporal(TemporalType.TIMESTAMP)
	public Date getDateAnnulation() {
		return dateAnnulation;
	}
	public void setDateAnnulation(Date dateAnnulation) {
		this.dateAnnulation = dateAnnulation;
	}
	@Column(name = "commentaire_annulation")
	public String getCommentaireAnnulation() {
		return commentaireAnnulation;
	}
	public void setCommentaireAnnulation(String commentaireAnnulation) {
		this.commentaireAnnulation = commentaireAnnulation;
	}
	@Column(name = "type_abonnement", length = 20)
	public String getTypeAbonnement() {
		return typeAbonnement;
	}
	public void setTypeAbonnement(String typeAbonnement) {
		this.typeAbonnement = typeAbonnement;
	}
	@Column(name = "date_debut_periode_active")
	public Date getDateDebutPeriodeActive() {
		return dateDebutPeriodeActive;
	}
	public void setDateDebutPeriodeActive(Date dateDebutPeriodeActive) {
		this.dateDebutPeriodeActive = dateDebutPeriodeActive;
	}
	@Column(name = "date_fin_periode_active")
	public Date getDateFinPeriodeActive() {
		return dateFinPeriodeActive;
	}
	public void setDateFinPeriodeActive(Date dateFinPeriodeActive) {
		this.dateFinPeriodeActive = dateFinPeriodeActive;
	}
	@Column(name = "reconduction_tacite_abonnement")
	public Boolean getReconductionTacite() {
		return reconductionTacite;
	}
	public void setReconductionTacite(Boolean reconductionTacite) {
		this.reconductionTacite = reconductionTacite;
	}
	@Column(name = "reconduction_tacite_engagement")
	public Boolean getReconductionTaciteEngagement() {
		return reconductionTaciteEngagement;
	}
	public void setReconductionTaciteEngagement(Boolean reconductionTaciteEngagement) {
		this.reconductionTaciteEngagement = reconductionTaciteEngagement;
	}
	@Column(name = "nb_mois_duree_engagement")
	public Integer getNbMoisDureeEngagement() {
		return nbMoisDureeEngagement;
	}
	public void setNbMoisDureeEngagement(Integer nbMoisDureeEngagement) {
		this.nbMoisDureeEngagement = nbMoisDureeEngagement;
	}
	@Column(name = "nb_mois_frequence_facturation")
	public Integer getNbMoisFrequenceFacturation() {
		return nbMoisFrequenceFacturation;
	}
	public void setNbMoisFrequenceFacturation(Integer nbMoisFrequenceFacturation) {
		this.nbMoisFrequenceFacturation = nbMoisFrequenceFacturation;
	}
	@Column(name = "nb_mois_frequence_paiement")
	public Integer getNbMoisFrequencePaiement() {
		return nbMoisFrequencePaiement;
	}
	public void setNbMoisFrequencePaiement(Integer nbMoisFrequencePaiement) {
		this.nbMoisFrequencePaiement = nbMoisFrequencePaiement;
	}
	@Column(name = "date_fin_engagement")
	public Date getDateFinEngagement() {
		return dateFinEngagement;
	}
	public void setDateFinEngagement(Date dateFinEngagement) {
		this.dateFinEngagement = dateFinEngagement;
	}

	@Transient
	public Set<TaREtat> getTaREtats() {
		// TODO Auto-generated method stub
		return null;
	}
	@Transient
	public void setTaREtats(Set<TaREtat> taREtats) {
		// TODO Auto-generated method stub
		
	}
	@Transient
	public Set<TaHistREtat> getTaHistREtats() {
		// TODO Auto-generated method stub
		return null;
	}
	@Transient
	public void setTaHistREtats(Set<TaHistREtat> taHistREtats) {
		// TODO Auto-generated method stub
		
	}
	@Override
	public Boolean gereStock() {
		// TODO Auto-generated method stub
		return false;
	}

//	public void addREtat(TaEtat taEtat) {
//		TaHistREtat hist=new TaHistREtat();
//		TaREtat rEtat=getTaREtat();
//		if(rEtat!=null) {
//			hist.setTaEtat(getTaREtat().getTaEtat());
//			hist.setTaAbonnement(this);
//			this.getTaHistREtats().add(hist);
//		}else rEtat=new TaREtat();
//		
//		rEtat.setTaEtat(taEtat);
//		rEtat.setTaAbonnement(this);
//		this.setTaREtat(rEtat);
//		this.getTaREtats().add(rEtat);
//	}
	
	
	
	@OneToMany(cascade = CascadeType.ALL,fetch = FetchType.LAZY, mappedBy = "taAbonnement", orphanRemoval=true)
	public Set<TaRReglementLiaison> getTaRReglementLiaisons() {
		return taRReglementLiaisons;
	}

	public void setTaRReglementLiaisons(Set<TaRReglementLiaison> taRReglementLiaisons) {
		this.taRReglementLiaisons = taRReglementLiaisons;
	}

	
	public void addRReglementLiaison(TaRReglementLiaison taReglementLiaison){
		if(!this.getTaRReglementLiaisons().contains(taReglementLiaison)){
			taReglementLiaison.setTaAbonnement(this);
			this.getTaRReglementLiaisons().add(taReglementLiaison);	
		}
	}
	public void removeReglementLiaison(TaRReglementLiaison taRReglementLiaison){
		this.getTaRReglementLiaisons().remove(taRReglementLiaison);
	}
	@Transient
	public String getNumeroCommandeFournisseur() {
		// TODO Auto-generated method stub
		return null;
	}
	
	@Column(name = "utilise_unite_saisie")
	public Boolean getUtiliseUniteSaisie() {
		return utiliseUniteSaisie;
	}

	public void setUtiliseUniteSaisie(Boolean utiliseUniteSaisie) {
		this.utiliseUniteSaisie = utiliseUniteSaisie;
	}
}
