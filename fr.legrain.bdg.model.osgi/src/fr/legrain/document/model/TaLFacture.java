package fr.legrain.document.model;

// Generated Apr 9, 2009 12:40:07 PM by Hibernate Tools 3.2.0.CR1

import java.beans.PropertyChangeEvent;
import java.math.BigDecimal;
import java.math.MathContext;
import java.math.RoundingMode;
import java.util.Date;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.EntityListeners;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.Transient;
import javax.validation.Valid;
import javax.validation.constraints.NotNull;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlTransient;

import org.apache.log4j.Logger;
import org.eclipse.persistence.oxm.annotations.XmlInverseReference;
import org.hibernate.annotations.Fetch;
import org.hibernate.annotations.FetchMode;

import fr.legrain.article.model.TaArticle;
import fr.legrain.article.model.TaEntrepot;
import fr.legrain.article.model.TaFabrication;
import fr.legrain.article.model.TaLFabricationMP;
import fr.legrain.article.model.TaLot;
import fr.legrain.article.model.TaPrix;
import fr.legrain.document.dto.IDocumentTiers;
import fr.legrain.document.dto.ILigneDocumentTiers;
import fr.legrain.document.dto.TaLigneALigneSupplementDTO;
import fr.legrain.lib.data.LibCalcul;
import fr.legrain.lib.data.LibConversion;
import fr.legrain.stock.model.TaMouvementStock;
import fr.legrain.validator.LgrHibernateValidated;

/**
 * TaLFacture generated by hbm2java
 */
@Entity
@EntityListeners(SwtLDocumentListener.class)
//@Cache(usage=CacheConcurrencyStrategy.READ_WRITE)
@Table(name = "ta_l_facture")
//@SequenceGenerator(name = "gen_l_facture", sequenceName = "num_id_l_facture", allocationSize = 1)
public class TaLFacture extends SWTLigneDocument implements java.io.Serializable, ILigneDocumentTiers,Cloneable {

	private static final long serialVersionUID = 1168081824904681732L;
	
	//	private int idLDocument;
	private String version;
	private TaTLigne taTLigne;
	private TaFacture taDocument;
	private TaArticle taArticle;
	
	private TaLot taLot;
	private TaEntrepot taEntrepot;
	private String emplacementLDocument;
	private TaMouvementStock taMouvementStock;
	
	private Integer numLigneLDocument;
//	private String libLDocument;
	private BigDecimal qteLDocument;
	private BigDecimal qte2LDocument;
	private String u1LDocument;
	private String u2LDocument;
	private BigDecimal prixULDocument;
	private BigDecimal tauxTvaLDocument;
	private String compteLDocument;
	private String codeTvaLDocument;
	private String libTvaLDocument;
	private String codeTTvaLDocument;
	private BigDecimal mtHtLDocument;
	private BigDecimal mtTtcLDocument;
	private BigDecimal remTxLDocument;
	private BigDecimal remHtLDocument;
	private String codeTitreTransport;
	private BigDecimal qteTitreTransport;
	private String quiCree;
	private Date quandCree;
	private String quiModif;
	private Date quandModif;
//	private Integer versionObj;
	private String ipAcces;
//	private String tgOperation;
	
	private String uSaisieLDocument;
	private BigDecimal qteSaisieLDocument;


	private Set<TaLigneALigne> taLigneALignes = new HashSet<TaLigneALigne>(0);
	private Set<TaREtatLigneDocument> taREtatLigneDocuments = new HashSet<TaREtatLigneDocument>(0);
	private Set<TaHistREtatLigneDocument> taHistREtatLigneDocuments = new HashSet<TaHistREtatLigneDocument>(0);
	private Set<TaLigneALigneEcheance> taLigneALignesEcheance = new HashSet<TaLigneALigneEcheance>(0);
	

	@Transient
	private boolean gestionTVA = true;
	
	private Boolean mouvementerStock = true;
	/**
	 * Les annotations JPA étant définies sur les méthodes getXXX(), hibernate les utilises pour accéder ou affecter les valeurs des propriétés.<br>
	 * A l'initialisation des objets certaines valeur peuvent être nulles. La présence de code dans les get/set peu dans cas provoquer des erreurs.<br>
	 * JPA utlise toujours le constructeur par defaut (sans argument) pour créer un objet.<br>
	 * En ayant cette variable (<code>legrain</code>) initialisé à false par défaut et en "protégeant" le code présent dans les méthodes get/set par <br>
	 * cette variable, on empeche JPA d'executer cette partie de code.<br>
	 * Dans le cas ou un objet a été créé par JPA (résultat d'une requette JPA) mais que l'on souhaite que ces parties du code s'excute,<br>
	 *  il faut penser à changer cette variable.<br>
	 * Il est possible de faire en sorte que le framework JPA n'utilise pas les methodes get/set pour accéder aux valeurs en mettant les annotations<br>
	 * directement sur les propriétés ou avec des annotations spéciales mais cela pose d'autres problème dans le bureau de gestion.
	 */
	@Transient
	private boolean legrain = false;
	@Transient
	private BigDecimal txRemHtDocument;
	//@Transient
	private BigDecimal mtHtLApresRemiseGlobaleDocument;
	//@Transient
	private BigDecimal mtTtcLApresRemiseGlobaleDocument;
	@Transient
	static Logger logger = Logger.getLogger(TaLFacture.class.getName());
	@Transient
	private List<TaLigneALigneSupplementDTO> listeSupplement=new LinkedList<>();
	@Transient
	private List<TaLigneALigneSupplementDTO> listeLigneAIntegrer=new LinkedList<>();
	
	private Boolean abonnement;
	

	public TaLFacture() {
		recupNbDecimale();
	}

	private void recupNbDecimale() {
		if(getTaDocument()!=null) {
//			setNbDecimalesPrix(getTaDocument().getNbDecimalesPrix());
//			setNbDecimalesQte(getTaDocument().getNbDecimalesQte());
		}
	}
	public TaLFacture(boolean legrain) {
		this.legrain = legrain;
		recupNbDecimale();
	}
	
	public TaLFacture(int idLFacture) {
		this.idLDocument = idLFacture;
		recupNbDecimale();
	}

	public TaLFacture(int idLFacture, TaTLigne taTLigne, TaFacture taFacture,
			TaArticle taArticle, Integer numLigneLFacture, String libLFacture,
			BigDecimal qteLFacture, BigDecimal qte2LFacture, String u1LFacture,
			String u2LFacture, BigDecimal prixULFacture,
			BigDecimal tauxTvaLFacture, String compteLFacture,
			String codeTvaLFacture, String codeTTvaLFacture,
			BigDecimal mtHtLFacture, BigDecimal mtTtcLFacture,
			BigDecimal remTxLFacture, BigDecimal remHtLFacture,
			String quiCreeLFacture, Date quandCreeLFacture,
			String quiModifLFacture, Date quandModifLFacture, String ipAcces,
			Integer versionObj) {
		this.idLDocument = idLFacture;
		this.taTLigne = taTLigne;
		this.taDocument = taFacture;
		this.taArticle = taArticle;
		this.numLigneLDocument = numLigneLFacture;
		this.libLDocument = libLFacture;
		this.qteLDocument = qteLFacture;
		this.qte2LDocument = qte2LFacture;
		this.u1LDocument = u1LFacture;
		this.u2LDocument = u2LFacture;
		this.prixULDocument = prixULFacture;
		this.tauxTvaLDocument = tauxTvaLFacture;
		this.compteLDocument = compteLFacture;
		this.codeTvaLDocument = codeTvaLFacture;
		this.codeTTvaLDocument = codeTTvaLFacture;
		this.mtHtLDocument = mtHtLFacture;
		this.mtTtcLDocument = mtTtcLFacture;
		this.remTxLDocument = remTxLFacture;
		this.remHtLDocument = remHtLFacture;
		this.quiCree = quiCreeLFacture;
		this.quandCree = quandCreeLFacture;
		this.quiModif = quiModifLFacture;
		this.quandModif = quandModifLFacture;
		this.ipAcces = ipAcces;
		this.versionObj = versionObj;
		recupNbDecimale();
	}

//	@Id
//	@GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "gen_l_facture")
//	@Column(name = "id_l_document", unique = true, nullable = false)
//	@LgrHibernateValidated(champ = "id_l_document",table = "ta_l_facture", champEntite="xxxxxxxxxxx", clazz = TaLFacture.class)
//	public int getIdLDocument() {
//		return this.idLDocument;
//	}
//
//	public void setIdLDocument(int idLFacture) {
//		this.idLDocument = idLFacture;
//	}

	@Column(name = "version", length = 20)
	public String getVersion() {
		return this.version;
	}

	public void setVersion(String version) {
		this.version = version;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.REFRESH)
	@JoinColumn(name = "id_t_ligne")
	@LgrHibernateValidated(champBd = "id_t_ligne",table = "ta_t_ligne", champEntite="taTLigne.idTLigne", clazz = TaTLigne.class)
	public TaTLigne getTaTLigne() {
		return this.taTLigne;
	}

	public void setTaTLigne(TaTLigne taTLigne) {
		this.taTLigne = taTLigne;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_document")
	@LgrHibernateValidated(champBd = "id_document",table = "ta_facture", champEntite="taDocument.idDocument", clazz = TaFacture.class)
	@XmlElement
	@XmlInverseReference(mappedBy="lignes")
	public TaFacture getTaDocument() {
		return this.taDocument;
	}

	public void setTaDocument(TaFacture taFacture) {
		this.taDocument = taFacture;
	}
	
	public void setTaDocumentGeneral(IDocumentTiers  taDocument) {
		this.taDocument = (TaFacture) taDocument;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.REFRESH)
	@JoinColumn(name = "id_article")
	@LgrHibernateValidated(champBd = "id_article",table = "ta_article", champEntite="taArticle.idArticle", clazz = TaArticle.class)
	public TaArticle getTaArticle() {
		return this.taArticle;
	}

	public void setTaArticle(TaArticle taArticle) {
		this.taArticle = taArticle;

		if(legrain) {
			if(taArticle!=null) {
				
				System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier : "+this.getTaDocument().getCodeDocument());

				
				boolean commentaire=false;
				commentaire=taArticle.getTaFamille()!=null && taArticle.getTaFamille().getCodeFamille().equals("&&&");
				if(!commentaire){
					TaPrix prix = taArticle.chercheTarif(taDocument.getTaTiers());
					if(prix!=null) {
						if(taDocument!=null) { //#JPA
							if(taDocument.getTtc()==1)
								setPrixULDocument(prix.getPrixttcPrix());
							else
								setPrixULDocument(prix.getPrixPrix());
						}

						if(taArticle.getTaUnite1()!=null) {
							setU1LDocument(taArticle.getTaUnite1().getCodeUnite());
						}
					}else{
						setPrixULDocument(BigDecimal.valueOf(0));
						setU1LDocument("");
					}

					if(taArticle.getTaTva()!=null && taDocument.isGestionTVA()) {
						setCodeTvaLDocument(taArticle.getTaTva().getCodeTva());
						setTauxTvaLDocument(taArticle.getTaTva().getTauxTva());
					}else{
						setCodeTvaLDocument("");
						setTauxTvaLDocument(BigDecimal.valueOf(0));
					}
					setQteLDocument(new BigDecimal(1));
					setCompteLDocument(taArticle.getNumcptArticle());
//					if(taArticle.getTaTitreTransport()!=null) {
//						setCodeTitreTransport(taArticle.getTaTitreTransport().getCodeTitreTransport());
//					}
					if(taArticle.getTaRTaTitreTransport()!=null) {
						//if(taArticle.getTaRTaTitreTransport().getTaUnite()!=null && getU1LDocument().equals(taArticle.getTaRTaTitreTransport().getTaUnite().getCodeUnite())) {
							setCodeTitreTransport(taArticle.getTaRTaTitreTransport().getTaTitreTransport().getCodeTitreTransport());
							setQteTitreTransport(taArticle.getTaRTaTitreTransport().getQteTitreTransport());
						//}
					} else {
						setCodeTitreTransport("");
						setQteTitreTransport(BigDecimal.valueOf(0));
					}
					calculMontant();
					setLibLDocument(taArticle.getLibellecArticle());
				}
				else {
				setLibLDocument(taArticle.getLibellecArticle());
				setTaArticle(null);
				}
			}
		}
	}

	@Column(name = "num_ligne_l_document")
	@LgrHibernateValidated(champBd = "num_ligne_l_document",table = "ta_l_facture", champEntite="numLigneLDocument", clazz = TaLFacture.class)
	public Integer getNumLigneLDocument() {
		return this.numLigneLDocument;
	}

	public void setNumLigneLDocument(Integer numLigneLFacture) {
		this.numLigneLDocument = numLigneLFacture;
	}

	@Column(name = "lib_l_document")
	@LgrHibernateValidated(champBd = "lib_l_document",table = "ta_l_facture", champEntite="libLDocument", clazz = TaLFacture.class)
	public String getLibLDocument() {
		return this.libLDocument;
	}

	public void setLibLDocument(String libLFacture) {
		this.libLDocument = libLFacture;
	}

	@Column(name = "qte_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "qte_l_document",table = "ta_l_facture", champEntite="qteLDocument", clazz = TaLFacture.class)
	public BigDecimal getQteLDocument() {
		return this.qteLDocument;
	}

	public void setQteLDocument(BigDecimal qteLFacture) {
		BigDecimal qteLFactureOld = this.qteLDocument;
		this.qteLDocument = qteLFacture;
		if(legrain) {
			calculMontant();
			if(getCodeTitreTransport()!=null && !getCodeTitreTransport().equals("") //il y a un code CRD
					&& (
							(getQteTitreTransport()==null || getQteTitreTransport().equals("")) //il n'il y a pas de qte CRD
							|| (
									taArticle!=null && taArticle.getTaRTaTitreTransport()!=null //il y a une qte CRD qui correspond au rapport normal (qte CRD de l'aticle * qte de l'article)
									&& taArticle.getTaRTaTitreTransport().getQteTitreTransport()!=null && getQteTitreTransport()!=null 
									&& taArticle.getTaRTaTitreTransport().getQteTitreTransport().multiply(qteLFactureOld).compareTo(getQteTitreTransport())==0
									)
						)
					) { //CRD et pas de quantité saisie par l'utilisateur
				if(taArticle.getTaRTaTitreTransport()!=null && taArticle.getTaRTaTitreTransport().getQteTitreTransport()!=null) {
					setQteTitreTransport(taArticle.getTaRTaTitreTransport().getQteTitreTransport().multiply(getQteLDocument()));
				}
			} else {
				if(getCodeTitreTransport()==null || getCodeTitreTransport().equals(""))
					setQteTitreTransport(null);
			}
			firePropertyChange(new PropertyChangeEvent(this,"qteLDocument",qteLFactureOld,qteLFacture));
		}
	}

	@Column(name = "qte2_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "qte2_l_document",table = "ta_l_facture", champEntite="qte2LDocument", clazz = TaLFacture.class)
	public BigDecimal getQte2LDocument() {
		return this.qte2LDocument;
	}

	public void setQte2LDocument(BigDecimal qte2LFacture) {
		this.qte2LDocument = qte2LFacture;
	}

	@Column(name = "u1_l_document", length = 20)
	@LgrHibernateValidated(champBd = "u1_l_document",table = "ta_l_facture", champEntite="u1LDocument", clazz = TaLFacture.class)
	public String getU1LDocument() {
		return this.u1LDocument;
	}

	public void setU1LDocument(String u1LFacture) {
		this.u1LDocument = u1LFacture;
	}

	@Column(name = "u2_l_document", length = 20)
	@LgrHibernateValidated(champBd = "u2_l_document",table = "ta_l_facture", champEntite="xxxxxxxxu2LDocumentxxx", clazz = TaLFacture.class)
	public String getU2LDocument() {
		return this.u2LDocument;
	}

	public void setU2LDocument(String u2LFacture) {
		this.u2LDocument = u2LFacture;
	}

	@Column(name = "prix_u_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "prix_u_l_document",table = "ta_l_facture", champEntite="prixULDocument", clazz = TaLFacture.class)
	public BigDecimal getPrixULDocument() {
		return this.prixULDocument;
	}

	public void setPrixULDocument(BigDecimal prixULFacture) {
		this.prixULDocument = prixULFacture;
		if(legrain) {
			calculMontant();
		}
	}

	@Column(name = "taux_tva_l_document", precision = 15, scale = 4)
	@LgrHibernateValidated(champBd = "taux_tva_l_document",table = "ta_l_facture", champEntite="tauxTvaLDocument", clazz = TaLFacture.class)
	public BigDecimal getTauxTvaLDocument() {
		return this.tauxTvaLDocument;
	}

	public void setTauxTvaLDocument(BigDecimal tauxTvaLFacture) {
		this.tauxTvaLDocument = tauxTvaLFacture;
	}

	@Column(name = "compte_l_document", length = 8)
	@LgrHibernateValidated(champBd = "compte_l_document",table = "ta_l_facture", champEntite="compteLDocument", clazz = TaLFacture.class)
	public String getCompteLDocument() {
		return this.compteLDocument;
	}

	public void setCompteLDocument(String compteLFacture) {
		this.compteLDocument = compteLFacture;
	}

	@Column(name = "code_tva_l_document", length = 20)
	@LgrHibernateValidated(champBd = "code_tva_l_document",table = "ta_l_facture", champEntite="codeTvaLDocument", clazz = TaLFacture.class)
	public String getCodeTvaLDocument() {
		return this.codeTvaLDocument;
	}

	public void setCodeTvaLDocument(String codeTvaLFacture) {
		this.codeTvaLDocument = codeTvaLFacture;
	}
	
	@Column(name = "lib_tva_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "lib_tva_l_document",table = "ta_l_facture", champEntite="libTvaLDocument", clazz = TaLFacture.class)
	public String getLibTvaLDocument() {
		return this.libTvaLDocument;
	}
	public void setLibTvaLDocument(String libTvaLDocument) {
		this.libTvaLDocument = libTvaLDocument;
	}

	@Column(name = "code_t_tva_l_document", length = 1)
	@LgrHibernateValidated(champBd = "code_t_tva_l_document",table = "ta_l_facture", champEntite="codeTTvaLDocument", clazz = TaLFacture.class)
	public String getCodeTTvaLDocument() {
		return this.codeTTvaLDocument;
	}

	public void setCodeTTvaLDocument(String codeTTvaLFacture) {
		this.codeTTvaLDocument = codeTTvaLFacture;
	}

	@Column(name = "mt_ht_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ht_l_document",table = "ta_l_facture", champEntite="mtHtLDocument", clazz = TaLFacture.class)
	public BigDecimal getMtHtLDocument() {
		return this.mtHtLDocument;
	}

	public void setMtHtLDocument(BigDecimal mtHtLFacture) {
		this.mtHtLDocument = LibCalcul.arrondi(mtHtLFacture);
	}

	@Column(name = "mt_ttc_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_l_document",table = "ta_l_facture", champEntite="mtTtcLDocument", clazz = TaLFacture.class)
	public BigDecimal getMtTtcLDocument() {
		return this.mtTtcLDocument;
	}

	public void setMtTtcLDocument(BigDecimal mtTtcLFacture) {
		this.mtTtcLDocument = LibCalcul.arrondi(mtTtcLFacture);
	}

	@Column(name = "rem_tx_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_tx_l_document",table = "ta_l_facture", champEntite="remTxLDocument", clazz = TaLFacture.class)
	public BigDecimal getRemTxLDocument() {
		return this.remTxLDocument;
	}

	public void setRemTxLDocument(BigDecimal remTxLFacture) {
		this.remTxLDocument = remTxLFacture;
		if(legrain) {
			//calculMontant();
			
			System.out.println("===****=== Transfert de code metier des entites vers les services, à bien vérifier : "+this.getTaDocument().getCodeDocument());
			//passage ejb => dans TaFactureService
			taDocument.calculeTvaEtTotaux();
		}
		
	}

	@Column(name = "rem_ht_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "rem_ht_l_document",table = "ta_l_facture", champEntite="remHtLDocument", clazz = TaLFacture.class)
	public BigDecimal getRemHtLDocument() {
		return this.remHtLDocument;
	}

	public void setRemHtLDocument(BigDecimal remHtLFacture) {
		this.remHtLDocument = LibCalcul.arrondi(remHtLFacture);
	}
	
	@Column(name = "titre_transport_l_document", length = 20)
	@LgrHibernateValidated(champBd = "titre_transport_l_document",table = "ta_l_facture", champEntite="codeTitreTransport", clazz = TaLFacture.class)
	public String getCodeTitreTransport() {
		return this.codeTitreTransport;
	}

	public void setCodeTitreTransport(String titreTransport) {
		this.codeTitreTransport = titreTransport;
	}
	
	@Column(name = "qte_titre_transport_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "qte_titre_transport_l_document",table = "ta_l_facture", champEntite="qteTitreTransport", clazz = TaLFacture.class)
	public BigDecimal getQteTitreTransport() {
		return this.qteTitreTransport;
	}

	public void setQteTitreTransport(BigDecimal qteTitreTransport) {
		this.qteTitreTransport = qteTitreTransport;
	}

	@Column(name = "qui_cree", length = 50)
	public String getQuiCree() {
		return this.quiCree;
	}

	public void setQuiCree(String quiCreeLFacture) {
		this.quiCree = quiCreeLFacture;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_cree", length = 19)
	public Date getQuandCree() {
		return this.quandCree;
	}

	public void setQuandCree(Date quandCreeLFacture) {
		this.quandCree = quandCreeLFacture;
	}

	@Column(name = "qui_modif", length = 50)
	public String getQuiModif() {
		return this.quiModif;
	}

	public void setQuiModif(String quiModifLFacture) {
		this.quiModif = quiModifLFacture;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "quand_modif", length = 19)
	public Date getQuandModif() {
		return this.quandModif;
	}

	public void setQuandModif(Date quandModifLFacture) {
		this.quandModif = quandModifLFacture;
	}

	@Column(name = "ip_acces", length = 50)
	public String getIpAcces() {
		return this.ipAcces;
	}

	public void setIpAcces(String ipAcces) {
		this.ipAcces = ipAcces;
	}

//	@Version
//	@Column(name = "version_obj")
//	public Integer getVersionObj() {
//		return this.versionObj;
//	}
//
//	public void setVersionObj(Integer versionObj) {
//		this.versionObj = versionObj;
//	}

//	public void initialiseLigne(boolean reset){
//		if (reset){
//			setLibLDocument("");
//			setQteLDocument(null);
//			setQte2LDocument(null);
//			setU1LDocument("") ;
//			setU2LDocument("") ;
//			setPrixULDocument(null);
//			setTauxTvaLDocument(null);
//			setCodeTvaLDocument("");
//			setCodeTTvaLDocument("");
//			setMtHtLDocument(null);
//			setMtTtcLDocument(null);
//			setRemTxLDocument(null);
//			setRemHtLDocument(null);
//		}else {
//			setLibLDocument("");
//			setQteLDocument(new BigDecimal(0));
//			setQte2LDocument(new BigDecimal(0));
//			setU1LDocument("");
//			setU2LDocument("");
//			setPrixULDocument(new BigDecimal(0)) ;
//			setTauxTvaLDocument(new BigDecimal(0));
//			setCodeTvaLDocument("");
//			setCodeTTvaLDocument("");
//			setMtHtLDocument(new BigDecimal(0));
//			setMtTtcLDocument(new BigDecimal(0));
//			setRemTxLDocument(new BigDecimal(0));
//			setRemHtLDocument(new BigDecimal(0)) ;
//		}
//		setTaArticle(null);	
//	}

//	//@Override
//	public boolean ligneEstVide() {
//		if (taArticle!=null)return false;
//		if (libLDocument!=null && !libLDocument.equals(""))return false;	
//		return true;
//	}
	
	public void calculMontant() {
		if(qteLDocument!=null && prixULDocument!=null) {
			if(taDocument!=null) {//#JPA
				setTxRemHtDocument(taDocument.getTxRemHtDocument());
				prixULDocument=prixULDocument.setScale(taDocument.getNbDecimalesPrix(),RoundingMode.DOWN);
				if(taDocument.getTtc()==1) {
					setMtTtcLDocument(qteLDocument.multiply(prixULDocument));
					if(remTxLDocument!=null && remTxLDocument.signum()!=0){
						setMtTtcLDocument(getMtTtcLDocument().subtract(getMtTtcLDocument().multiply(remTxLDocument.divide(new BigDecimal(100)))));
					}
					if( tauxTvaLDocument!=null && tauxTvaLDocument.signum()!=0){
						//precision du diviseur = 3, car sinon pour un taux de 19,60% il arrondi a 1.20  au lieu de 1.196
						setMtHtLDocument(mtTtcLDocument.divide(BigDecimal.valueOf(1).add(
								 (tauxTvaLDocument.divide(new BigDecimal(100),MathContext.DECIMAL128).setScale(3,BigDecimal.ROUND_HALF_UP)
							)),MathContext.DECIMAL128).setScale(2,BigDecimal.ROUND_HALF_UP));					
					} else {
						setMtHtLDocument(mtTtcLDocument);
					}
					
				} else {
					setMtHtLDocument(qteLDocument.multiply(prixULDocument));
					if(remTxLDocument!=null && remTxLDocument.signum()!=0){
						setMtHtLDocument(getMtHtLDocument().subtract(getMtHtLDocument().multiply(remTxLDocument.divide(new BigDecimal(100)))));
					}
					if( tauxTvaLDocument!=null && tauxTvaLDocument.signum()!=0){
						setMtTtcLDocument(mtHtLDocument.add((mtHtLDocument.multiply(tauxTvaLDocument.divide(new BigDecimal(100))))));
					} else {
						setMtTtcLDocument(mtHtLDocument);
					}
				
				}
				setMtTtcLApresRemiseGlobaleDocument(getMtTtcLDocument());
				setMtHtLApresRemiseGlobaleDocument(getMtHtLDocument());
			}
		}
	}

	@Transient
	public BigDecimal getTxRemHtDocument() {
		return txRemHtDocument;
	}

	public void setTxRemHtDocument(BigDecimal txRemHtFacture) {
		this.txRemHtDocument = txRemHtFacture;
	}

	public void setLegrain(boolean legrain) {
		this.legrain = legrain;
	}

	public TaLFacture clone() {
		TaLFacture ligne = new TaLFacture();
		try {
			//ligne = (TaLFacture)super.clone();
			ligne.setIdLDocument(0);
			ligne.setVersion(version);
			ligne.setTaTLigne(taTLigne);
			ligne.setTaDocument(taDocument);
			ligne.setTaArticle(taArticle);
			ligne.setTaLot(taLot);
			ligne.setTaEntrepot(taEntrepot);
			ligne.setEmplacementLDocument(emplacementLDocument);
			ligne.setTaMouvementStock(taMouvementStock);
			ligne.setNumLigneLDocument(numLigneLDocument);
			ligne.setLibLDocument(libLDocument);
			ligne.setQteLDocument(qteLDocument);
			ligne.setQte2LDocument(qte2LDocument);
			ligne.setU1LDocument(u1LDocument);
			ligne.setU2LDocument(u2LDocument);
			ligne.setPrixULDocument(prixULDocument);
			ligne.setTauxTvaLDocument(tauxTvaLDocument);
			ligne.setTxRemHtDocument(txRemHtDocument);
			ligne.setCompteLDocument(compteLDocument);
			ligne.setCodeTvaLDocument(codeTvaLDocument);
			ligne.setCodeTTvaLDocument(codeTTvaLDocument);
			ligne.setMtHtLDocument(mtHtLDocument);
			ligne.setMtTtcLDocument(mtTtcLDocument);
			ligne.setMtHtLApresRemiseGlobaleDocument(mtHtLApresRemiseGlobaleDocument);
			ligne.setMtTtcLApresRemiseGlobaleDocument(mtTtcLApresRemiseGlobaleDocument);
			ligne.setRemTxLDocument(remTxLDocument);
			ligne.setRemHtLDocument(remHtLDocument);
			ligne.setQuiCree(quiCree);
			ligne.setQuandCree(quandCree);
			ligne.setQuiModif(quiModif);
			ligne.setQuandModif(quandModif);
			ligne.setIpAcces(ipAcces);
			ligne.setVersionObj(versionObj);			
			
		} catch(Exception cnse) {
			logger.error("",cnse);
		}
		// on renvoie le clone
		return ligne;
	}

	//@Transient
	@Column(name = "mt_ht_apr_rem_globale", precision = 15)
	@LgrHibernateValidated(champBd = "mt_apr_rem_globale",table = "ta_l_facture", champEntite="mtHtLApresRemiseGlobaleDocument", clazz = TaLFacture.class)
	public BigDecimal getMtHtLApresRemiseGlobaleDocument() {
		return mtHtLApresRemiseGlobaleDocument;
	}

	public void setMtHtLApresRemiseGlobaleDocument(
			BigDecimal mtHtLApresRemiseGlobaleDocument) {
		this.mtHtLApresRemiseGlobaleDocument = mtHtLApresRemiseGlobaleDocument;
	}
	
	//@Transient
	@Column(name = "mt_ttc_apr_rem_globale", precision = 15)
	@LgrHibernateValidated(champBd = "mt_ttc_apr_rem_globale",table = "ta_l_facture", champEntite="mtTtcLApresRemiseGlobaleDocument", clazz = TaLFacture.class)
	public BigDecimal getMtTtcLApresRemiseGlobaleDocument() {
		return mtTtcLApresRemiseGlobaleDocument;
	}

	public void setMtTtcLApresRemiseGlobaleDocument(
			BigDecimal mtTtcLApresRemiseGlobaleDocument) {
		this.mtTtcLApresRemiseGlobaleDocument = mtTtcLApresRemiseGlobaleDocument;
	}

//	@NotNull(message="Le lot ne peut être nul")
	@ManyToOne(fetch = FetchType.EAGER, cascade = {CascadeType.REFRESH})
	@JoinColumn(name = "id_lot")
	@LgrHibernateValidated(champBd = "id_lot",table = "ta_lot", champEntite="taLot.idLot", clazz = TaLot.class)
	@Valid
	public TaLot getTaLot() {
		return taLot;
	}

	public void setTaLot(TaLot taLot) {
		this.taLot = taLot;
	}

	@ManyToOne(fetch = FetchType.EAGER, cascade = CascadeType.REFRESH)
	@JoinColumn(name = "id_entrepot")
	@LgrHibernateValidated(champBd = "id_entrepot",table = "ta_entrepot", champEntite="taEntrepot.idEntrepot", clazz = TaEntrepot.class)
	public TaEntrepot getTaEntrepot() {
		return taEntrepot;
	}

	public void setTaEntrepot(TaEntrepot taEntrepot) {
		this.taEntrepot = taEntrepot;
	}

	@Column(name = "emplacement_l_document")
	@LgrHibernateValidated(champBd = "emplacement_l_document",table = "ta_l_fabrication", champEntite="emplacementLDocument", clazz = TaLFabricationMP.class)
	public String getEmplacementLDocument() {
		return this.emplacementLDocument;
	}

	public void setEmplacementLDocument(String emplacementLDocument) {
		this.emplacementLDocument = emplacementLDocument;
	}

//	@NotNull
	@OneToOne(fetch = FetchType.EAGER, cascade = CascadeType.ALL)
	@JoinColumn(name = "id_mouvement_stock")
	@LgrHibernateValidated(champBd = "id_mouvement_stock",table = "ta_mouvement_stock", champEntite="taMouvementStock.idMouvementStock", clazz = TaMouvementStock.class)
	@XmlTransient //peut etre à modifier si on doit utiliser les mouvements dans les web services
	public TaMouvementStock getTaMouvementStock() {
		return taMouvementStock;
	}

	public void setTaMouvementStock(TaMouvementStock taMouvementStock) {
		this.taMouvementStock = taMouvementStock;
	}

//	@Column(name = "tg_operation")
//	public String getTgOperation() {
//		return tgOperation;
//	}
//
//	public void setTgOperation(String tgOperation) {
//		this.tgOperation = tgOperation;
//	}

//	@PrePersist
//	public void aaa() throws Exception{
//		if((this.getIdLDocument()==0 ) && (this.getTaDocument()!=null && this.getTaDocument().getTgOperation()!=null && this.getTaDocument().getTgOperation().equals("UPDATE"))) {
//			//si nouvelle ligne dans document existant
//			this.setTgOperation("UPDATE");
//		}
//	}






//	@Transient
//	public LinkedList<TaLFacture> creeLigneImpression_indirect(int coupure, int rangImpression){
//		LinkedList<TaLFacture> listeNewLigne=new LinkedList<TaLFacture>();
//		try {
//
//			ArrayList<String> listPhrases =new ArrayList<String>();
//			String phrase="";
//			String ligneAParcourir=this.getLibLDocument();
//			String lettre="";
//			int nbMinus=0;
//			int nbMaj=0;
//			int nbDemisMinus=0;
//			int rang=0;
//			int j=0;
//			String ligneParcourue="";
//			String ligneDejaParcourue="";
//			String[]mots=ligneAParcourir.split(" ");
//
//			while(rang<=ligneAParcourir.length()-1){
//				lettre=ligneAParcourir.substring(rang, rang+1);
//				ligneParcourue+=lettre;
//				if (LibChaine.formatDemisMinus(lettre))nbDemisMinus++;
//				else
//				if (LibChaine.formatChiffre(lettre))nbMinus++;
//			else{
//				if(lettre.equals(lettre.toUpperCase()))
//					nbMaj++;
//				else
//					nbMinus++;
//			}
//				boolean trouve=true;
//				String ligneAEcrire="";
//				if((nbMaj*1.3)+nbMinus+(nbDemisMinus*0.7)>=coupure){
//					j=0;
//					//on récupère tous les mots qui sont contenus dans la ligneParcourue
//					//jusqu'à l'avant dernier
//					j=ligneParcourue.lastIndexOf(" ");
//					if(j>0)ligneAEcrire=ligneParcourue.substring(0, j);
//					else ligneAEcrire=ligneParcourue;
//					ligneDejaParcourue+=ligneAEcrire;
//					listPhrases.add(ligneAEcrire);
//					rang=ligneDejaParcourue.length();
//					ligneParcourue="";
//					ligneAEcrire="";
//					nbMaj=0;
//					nbMinus=0;
//					nbDemisMinus=0;
//				}
//
//				rang++;
//			}
//			if(!ligneParcourue.equals(""))listPhrases.add(ligneParcourue);		
//			rang=0;
//			for (String phrases : listPhrases) {
//				if(rang==0){//on traite la ligne initiale
//					TaLFacture lf=new TaLFacture();
//					lf=this.clone();
//					lf.setLibLDocument(phrases);
//					lf.setNumLigneImpression(rangImpression);
//					listeNewLigne.add(lf);
//				}
//				else{
//					//création de la nouvelle ligne
//					TaLFacture newLigne=new TaLFacture();
//					newLigne.initialiseLigne(true);
//					newLigne.setTaTLigne(getTaTLigne());
//					newLigne.setLibLDocument(phrases);
//					newLigne.setTaDocument(taDocument);
//					newLigne.setNumLigneImpression(rangImpression);
//					listeNewLigne.add(newLigne);
//					//taDocument.insertLigne(newLigne, numLigneLDocument+rang);
//				}
//				rang++;
//			}
//		} catch (Exception e) {
//			return null;
//		}
//		return listeNewLigne;
//	}
	
//	@Transient
//	public LinkedList<TaLFacture> creeLigneImpression_indirect(int coupure, int rangImpression){
//		LinkedList<TaLFacture> listeNewLigne=new LinkedList<TaLFacture>();
//		try {
//			String lettre ="";
//			ArrayList<String> listPhrases =new ArrayList<String>();
//			String phrase="";
//			int nbLigne=1;
//			int rang=0;
//			int rangSortie=0;
//			Float nbMaj=new Float(0);
//			int nbMinus=0;
//			int demiMinus=0;
//			String ligneEnCours="";
//			String motSuivant="";
//			int resteMot=0;
//			
//			String[] motsInitials=libLDocument.split(" ");
//			ArrayList<String> mots=new ArrayList<String>();
//			for (int i = 0; i < motsInitials.length; i++) {
//				mots.add(motsInitials[i]);
//			}
//			String ligneParcourue="";
////			rang=0;
////			for (int i = 0; i < motsInitials.length; i++) {
////				while(rang<=mots.get(i).length()-1){
////					lettre=motsInitials[i].substring(rang, rang+1);
////					ligneParcourue+=lettre;
////					if (LibChaine.formatChiffre(lettre))nbMinus++;
////					else{
////						if(lettre.equals(lettre.toUpperCase()))
////							nbMaj++;
////						else
////							nbMinus++;
////					}
////					if((nbMaj*1.5)+nbMinus-demiMinus>=coupure){
////						mots.add(i, ligneParcourue);
////						ligneParcourue="";
////					}
////					rang++;
////				}
////				rang=0;
////				nbMaj=new Float(0);
////				nbMinus=0;
////				demiMinus=0;
////				ligneParcourue="";
////			}
//			for (int i = 0; i < mots.size(); i++) {
//				if(i+1<mots.size())motSuivant=mots.get(i+1);
//				else motSuivant="";
//				nbMinus++;
//				rang=0;
//				rangSortie=i;
//				ligneEnCours="";
//				while(rang<=mots.get(i).length()-1){
//					lettre=mots.get(i).substring(rang, rang+1);
//					ligneParcourue+=lettre;
//					ligneEnCours+=lettre;
//					if (LibChaine.formatChiffre(lettre))nbMinus++;
//					else{
//						if(lettre.equals(lettre.toUpperCase()))
//							nbMaj++;
//						else
//							nbMinus++;
//					}
//					resteMot=mots.get(i).length()-ligneEnCours.length();
//					//on multiplie les majuscules par 1.5, on rajoute les minuscules, on enlève 
//					//les minuscules plus petites 
//					if(((nbMaj*1.5)+nbMinus-demiMinus>=coupure) ||
//							((nbMaj*1.5)+nbMinus-demiMinus+resteMot-coupure<motSuivant.length()) ||
//							(rang>=mots.get(i).length()-1 && i >= mots.size())){
//									//&& i >= mots.size())){
//						nbLigne++;
//						nbMaj=new Float(0); 
//						nbMinus=0;
//						if (rang<mots.get(i).length()-1){
//							phrase=phrase+" "+ligneEnCours;
//							String ligne=mots.get(i);
//							//mots.remove(i);
//							
//							ligne=ligne.replace(ligneEnCours, "");
//							mots.set(i,ligne);
//							rang=0;
//						}
//						else phrase=phrase+" "+mots.get(i);
//						listPhrases.add(phrase);
//						phrase="";
//						ligneParcourue="";
//
//					}else 
//						if (rang==mots.get(i).length()-1)
//							phrase=phrase+" "+mots.get(i);
//					rang++;
//				}				
//			}
//			if (rang==mots.get(rangSortie).length()-1)phrase=phrase+" "+mots.get(rangSortie);
//			if(listPhrases.add(phrase));
//			rang=0;
//			for (String phrases : listPhrases) {
//				if(rang==0){//on traite la ligne initiale
//					TaLFacture lf=new TaLFacture();
//					lf=this.clone();
//					lf.setLibLDocument(phrases);
//					lf.setNumLigneImpression(rangImpression);
//					listeNewLigne.add(lf);
//				}
//				else{
//					//création de la nouvelle ligne
//					TaLFacture newLigne=new TaLFacture();
//					newLigne.initialiseLigne(true);
//					newLigne.setTaTLigne(getTaTLigne());
//					newLigne.setLibLDocument(phrases);
//					newLigne.setTaDocument(taDocument);
//					newLigne.setNumLigneImpression(rangImpression);
//					listeNewLigne.add(newLigne);
//					//taDocument.insertLigne(newLigne, numLigneLDocument+rang);
//				}
//				rang++;
//			}
//		} catch (Exception e) {
//			return null;
//		}
//		return listeNewLigne;
//	}
	
	

	public boolean equalParamTva(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		TaLFacture other = (TaLFacture) obj;
		/*************Pour gérer les problème de type de tva resté à null**************/
		if(codeTTvaLDocument==null || codeTTvaLDocument.equals(""))codeTTvaLDocument="D";
		if(other.codeTTvaLDocument==null || other.codeTTvaLDocument.equals(""))other.codeTTvaLDocument="D";
		/***************************/
		
		if (codeTTvaLDocument == null) {
			if (other.codeTTvaLDocument != null)
				return false;
		} else if (!codeTTvaLDocument.equals(other.codeTTvaLDocument))
			return false;
		if (tauxTvaLDocument == null) {
			if (other.tauxTvaLDocument != null)
				return false;
		} else if (!tauxTvaLDocument.equals(other.tauxTvaLDocument))
			return false;		
		if (codeTvaLDocument == null) {
			if (other.codeTvaLDocument != null)
				return false;
		} else if (!codeTvaLDocument.equals(other.codeTvaLDocument))
			return false;
		if (compteLDocument == null) {
			if (other.compteLDocument != null)
				return false;
		} else if (!compteLDocument.equals(other.compteLDocument))
			return false;
		return true;
	}

	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taLFacture", orphanRemoval=true)
	@Fetch(FetchMode.SUBSELECT)
	@XmlTransient
	public Set<TaLigneALigne> getTaLigneALignes() {
		return this.taLigneALignes;
	}

	public void setTaLigneALignes(Set<TaLigneALigne> taLigneALignes) {
		this.taLigneALignes = taLigneALignes;
	}





	@Column(name = "mouvementer_stock")
	public Boolean getMouvementerStock() {
		return mouvementerStock;
	}

	@Transient
	public List<TaLigneALigneSupplementDTO> getListeSupplement() {
		// TODO Auto-generated method stub
		return listeSupplement;
	}

	@Transient
	public void setListeSupplement(List<TaLigneALigneSupplementDTO> listeSupplement) {
		// TODO Auto-generated method stub
		this.listeSupplement=listeSupplement;
	}

	@Transient
	public List<TaLigneALigneSupplementDTO> getListeLigneAIntegrer() {
		// TODO Auto-generated method stub
		return listeLigneAIntegrer;
	}

	@Transient
	public void setListeLigneAIntegrer(List<TaLigneALigneSupplementDTO> listeLigneAIntegrer) {
		// TODO Auto-generated method stub
		this.listeLigneAIntegrer=listeLigneAIntegrer;
	}
	public void setMouvementerStock(Boolean mouvementerStock) {
		this.mouvementerStock = mouvementerStock;
	}

	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taLFacture", orphanRemoval = true)
	@Fetch(FetchMode.SUBSELECT)
	public Set<TaREtatLigneDocument> getTaREtatLigneDocuments() {
		return this.taREtatLigneDocuments;
	}

	public void setTaREtatLigneDocuments(Set<TaREtatLigneDocument> taREtats) {
		this.taREtatLigneDocuments = taREtats;
	}
	

	
	@OneToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY, mappedBy = "taLFacture", orphanRemoval = true)
	@Fetch(FetchMode.SUBSELECT)
	public Set<TaHistREtatLigneDocument> getTaHistREtatLigneDocuments() {
		return this.taHistREtatLigneDocuments;
	}

	public void setTaHistREtatLigneDocuments(Set<TaHistREtatLigneDocument> taHistREtatLigneDocuments) {
		this.taHistREtatLigneDocuments = taHistREtatLigneDocuments;
	}

	public void removeTaREtatLigneDoc(TaREtatLigneDocument taREtatLigneDocument) {
		taREtatLigneDocument.setTaEtat(null);
		taREtatLigneDocument.setTaLFacture(null);
		this.getTaREtatLigneDocuments().remove(taREtatLigneDocument);
		if(!this.getTaREtatLigneDocuments().isEmpty())
			this.setTaREtatLigneDocument(this.getTaREtatLigneDocuments().iterator().next());
		else if(this.getTaREtatLigneDocuments().isEmpty()){
			this.setTaREtatLigneDocument(null);
		}
	}


	
	public void addREtatLigneDoc(TaEtat taEtat) {
		TaREtatLigneDocument rEtat=getTaREtatLigneDocument();
		if(rEtat!=null) {
			TaHistREtatLigneDocument hist=new TaHistREtatLigneDocument();
			hist.setTaEtat(getTaREtatLigneDocument().getTaEtat());
			hist.setTaLFacture(this);
			this.getTaHistREtatLigneDocuments().add(hist);
		}else rEtat=new TaREtatLigneDocument();
		
		rEtat.setTaEtat(taEtat);
		rEtat.setTaLFacture(this);
		this.setTaREtatLigneDocument(rEtat);
		this.getTaREtatLigneDocuments().add(rEtat);
	}

	@Column(name = "abonnement")
	public Boolean getAbonnement() {
		return abonnement;
	}
	
	public void setAbonnement(Boolean abonnement) {
		this.abonnement = abonnement;
	}


	@OneToMany(cascade = {CascadeType.REMOVE, CascadeType.MERGE}, fetch = FetchType.LAZY, mappedBy = "taLFacture", orphanRemoval=true)
	@XmlTransient
	@Fetch(FetchMode.SUBSELECT)	
	public Set<TaLigneALigneEcheance> getTaLigneALignesEcheance() {
		return taLigneALignesEcheance;
	}

	public void setTaLigneALignesEcheance(Set<TaLigneALigneEcheance> taLigneALignesEcheance) {
		this.taLigneALignesEcheance = taLigneALignesEcheance;
	}	

	@Column(name = "u_saisie_l_document", length = 20)
	@LgrHibernateValidated(champBd = "u_saisie_l_document",table = "ta_l_facture", champEntite="uSaisieLDocument", clazz = TaLFacture.class)
	public String getUSaisieLDocument() {
		return uSaisieLDocument;
	}

	public void setUSaisieLDocument(String uSaisieLDocument) {
		this.uSaisieLDocument = uSaisieLDocument;
	}

	@Column(name = "qte_saisie_l_document", precision = 15)
	@LgrHibernateValidated(champBd = "qte_saisie_l_document",table = "ta_l_facture", champEntite="qteSaisieLDocument", clazz = TaLFacture.class)
	public BigDecimal getQteSaisieLDocument() {
		return qteSaisieLDocument;
	}

	public void setQteSaisieLDocument(BigDecimal qteSaisieLDocument) {
		this.qteSaisieLDocument = qteSaisieLDocument;
	}

}
